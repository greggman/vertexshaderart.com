{
  "_id": "rXA7dW2QF9uYGive2",
  "owner": {
    "_id": "Qepb28Zb8T4S4FH9e",
    "createdAt": {
      "$date": {
        "$numberLong": "1651354813104"
      }
    },
    "username": "argonblue",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/33a85e016ea152866eb10da331df9bb7?default=retro&size=200",
      "info": "https://argon.blue/"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1651354874048"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1651459289417"
    }
  },
  "origId": null,
  "name": "trochoids",
  "notes": "spinning breathing trochoids",
  "rank": {
    "$numberDouble": "1.447953621373387"
  },
  "private": false,
  "unlisted": false,
  "username": "argonblue",
  "avatarUrl": "https://secure.gravatar.com/avatar/33a85e016ea152866eb10da331df9bb7?default=retro&size=200",
  "settings": {
    "num": 12600,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI radians(180.)\n\n#define imod(a, b) ((a) - (b)*((a)/(b)))\n#define CS(th) (vec2(cos(th), sin(th)))\n#define N(v) (normalize(vec2(-(v).y, (v).x)))\n\n#define NFIGS 7\n\n#define V_PER_SEG 9\n#define P_PER_FIG (int(vertexCount)/(NFIGS*V_PER_SEG))\n#define V_PER_FIG (P_PER_FIG * V_PER_SEG)\n\n#define SPIN 0.5\n#define BREATHE 0.1\n\n#define LINEWIDTH 10.\n#define ORBIT 0.18\n#define R_ORBIT 0.63\n\nvoid init_figs(out vec2 a[NFIGS]) {\n  a[0] = vec2(-3, 1);\n  a[1] = vec2(3, 1);\n  a[2] = vec2(5, 1);\n  a[3] = vec2(3, 1);\n  a[4] = vec2(5, 2);\n  a[5] = vec2(7, 2);\n  a[6] = vec2(-2, 1);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Triangles for main rect of line segment\nvec2 rect_tri(vec2 pn[3], int vnum, float nlw) {\n  vec2 n = N(pn[1] - pn[0]);\n  vec2 wv = 0.5 * n * nlw;\n  mat3 pm = mat3(vec3(pn[0], 0),\n                 vec3(pn[1], 0),\n                 vec3(wv, 0));\n  // This vertex order allows easier visualization\n  // using LINE_STRIP\n  vec3 ops[6];\n  // No array initializers in ES 100...\n  // Columns of pm are (pn[0], pn[1], wv)\n  ops[0] = vec3(1, 0, 1);\n  ops[1] = vec3(1, 0, -1);\n  ops[2] = vec3(0, 1, -1);\n  ops[3] = vec3(0, 1, 1);\n  ops[4] = vec3(1, 0, 1);\n  ops[5] = vec3(0, 1, -1);\n  // Work around constant-index-expression...\n  for (int i = 0; i < 6; i++) {\n    if (vnum == i) {\n      return (pm * ops[i]).xy;\n    }\n  }\n}\n\n// Bevel triangle to fill joints\nvec2 bevel_tri(vec2 pn[3], int vnum, float nlw) {\n  vec2 n1 = N(pn[1] - pn[0]);\n  vec2 n2 = N(pn[2] - pn[1]);\n  // Cross product to decide which side to draw on\n  vec3 s = cross(vec3(n1, 0), vec3(n2, 0));\n  float d = -sign(s.z) * 0.5 * nlw;\n  mat3 pm = mat3(vec3(pn[1], 0),\n                 vec3(n1 * d, 0),\n                 vec3(n2 * d, 0));\n  bvec2 sel = equal(ivec2(0, 1), ivec2(vnum));\n  return (pm * vec3(1, sel)).xy;\n}\n\n// Thick line triangulation\nvec2 genvert(vec2 pn[3], int vnum, float lw) {\n  float nlw = lw/min(resolution.x, resolution.y);\n  if (vnum < 6) {\n    return rect_tri(pn, vnum, nlw);\n  } else {\n    return bevel_tri(pn, vnum - 6, nlw);\n  }\n}\n\n// Actual trochoid calculation\nvec2 curvepoint(float th, float ph, float a, float b, float rph) {\n  vec2 p1 = CS(b*th);\n  vec2 p2 = CS((b-a)*th+ph/b);\n  float r = cos(rph);\n  r = 1.-(r*r);\n  return 0.21 * vec2(mix(p1, p2, r));\n}\n\nvec2 fig(vec2 fig, int vnum, float pnum, float bph, float lw) {\n  float pmax = float(P_PER_FIG);\n  float ph = 2.*PI*time*SPIN;\n  float rph = 2.*PI*time*BREATHE + bph;\n  vec2 pn[3];\n  float th;\n  for (int i = 0; i < 3; i++) {\n    th = 2.*PI*((pnum-float(2-i))/(pmax-1.));\n    pn[i] = curvepoint(th, ph, fig[0], fig[1], rph);\n  }\n  return genvert(pn, vnum, lw);\n}\n\nvoid main() {\n  gl_PointSize = 4.;\n\n  vec2 figs[NFIGS];\n  init_figs(figs);\n\n  int fnum = int(vertexId)/V_PER_FIG;\n  // Vertex number within a line segment\n  int vnum = imod(int(vertexId), V_PER_SEG);\n  float pnum = float(imod(int(vertexId), V_PER_FIG)/V_PER_SEG);\n  float pmax = float(P_PER_FIG);\n\n  float bph = 2.*PI*float(fnum)/float(NFIGS);\n  vec2 xy;\n  for (int i = 0; i < NFIGS; i++) {\n    if (i != fnum) { continue; }\n    xy = fig(figs[i], vnum, pnum, bph, LINEWIDTH);\n  }\n\n  vec2 offset = R_ORBIT*CS(2.*PI*(float(fnum)/float(NFIGS)+time*ORBIT));\n  xy += offset;\n\n  vec2 aspect;\n  if (resolution.x > resolution.y) {\n    aspect = vec2(resolution.y/resolution.x, 1);\n  } else {\n    aspect = vec2(1, resolution.x/resolution.y);\n  }\n  gl_Position = vec4(xy * aspect, 0, 1);\n\n  //  v_color = vec4(.2,.8,1.,1.);\n  float v = fract(time*.21+2.*pnum/pmax);\n  v = 2. * mix(v, (1. - v), step(0.5, v));\n  float hue = .5+.27*v;\n  v_color = vec4(hsv2rgb(vec3(hue, 1, 1)), 1);\n  if (fnum >= NFIGS) {\n    v_color = vec4(1,1,0,1);\n  }\n}\n"
  },
  "screenshotURL": "data/images/images-nuewkledrnmenfsgg-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "285"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "qYGcQWtPDkwsyWZsv"
}