{
  "_id": "yva6wZBxMPvZtC8iA",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1523537399442"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1523537399442"
    }
  },
  "origId": "hDdt5XinuSqDPHKS9",
  "name": "12345678",
  "notes": "http://glslsandbox.com/e#38484.0",
  "rank": {
    "$numberDouble": "1.780785471401423"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 50000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/user-158087960/studiomix-douzirec-06-2007-flac",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "//Created by K Machine from http://glslsandbox.com/e#46343.0\nvec2 surfacePosition;\nvec4 simFragCoord;\nvec2 vertexResolution = resolution;\n#ifdef GL_ES\n//precision  mediump float;\n#endif\n\n//#extension  GL_OES_standard_derivatives : enable\n\n//uniform  //float time;\n//uniform  vec2 mouse;\n//uniform  vec2 vertexResolution;\n\nfloat extract_bit(float n, float e)\n{\n\treturn fract(n/exp2(e+1.));\n}\n\n\nfloat sprite(float n, vec2 p)\n{\n\tp \t\t= floor(p);\n\tfloat bounds \t= float(all(bvec2(p.x < 3., p.y < 5.)) && all(bvec2(p.x >= 0., p.y >= 0.)));\n\treturn extract_bit(n, (2. - p.x) + 3. * p.y) * bounds;\n}\n\n\t\t\t\t\nfloat digit(float n, vec2 p)\n{\n\treturn    (n == 1.) ? sprite( 9362., p) \n\t\t: (n == 2.) ? sprite(29671., p) \n\t\t: (n == 3.) ? sprite(29391., p) \n\t\t: (n == 4.) ? sprite(23497., p) \n\t\t: (n == 5.) ? sprite(31183., p) \n\t\t: (n == 6.) ? sprite(31215., p) \n\t\t: (n == 7.) ? sprite(29257., p) \n\t\t: (n == 8.) ? sprite(31727., p) \n\t\t: (n == 9.) ? sprite(31695., p) \n\t\t: \t      sprite(31599., p);\n}\n\nfloat badlog10(float i)\n{\n\treturn    (i >= 1000000000.) ? 9. \n\t\t: (i >=  100000000.) ? 8. \n\t\t: (i >=   10000000.) ? 7. \n\t\t: (i >=    1000000.) ? 6. \n\t\t: (i >=     100000.) ? 5. \n\t\t: (i >=      10000.) ? 4. \n\t\t: (i >=       1000.) ? 3. \n\t\t: (i >=        100.) ? 2. \n\t\t: (i >=         10.) ? 1. \n\t\t: \t\t       0.;\t\n}\n\t\n\n\nfloat print(float n, vec2 position)\n{\t\n\tfloat offset\t= 4.;\n\tfloat result\t= 0.;\n\n\tfor(int i = 0; i < 8; i++)\n\t{\n\t\tfloat place = pow(10., float(i));\n\t\t\n\t\tif(n >= place || i == 0)\n\t\t{\n\t\t\tresult\t \t+= digit(floor(mod(floor(n/place)+.5, 10.)), position);\t\t\n\t\t\tposition.x\t+= 4.;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\t\n\t}\n\t\n\treturn floor(result + .5);\n}\n\n\nfloat center_print(float n, vec2 position)\n{\n\treturn print(n, position - vec2(4. * badlog10(n) * .5 - 2., -2.));\n}\n\n\nvoid main( void ) {float finalDesiredPointSize = 3.;\nfloat maxFinalSquareSideSize = floor(sqrt(vertexCount));\nfloat finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\nfloat maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\nvertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\nfloat finalVertexCount = vertexResolution.x*vertexResolution.y;\nfloat finalVertexId = mod(vertexId,finalVertexCount);\nfloat x = mod(finalVertexId, vertexResolution.x);\nfloat y = floor(finalVertexId / vertexResolution.x);\nsimFragCoord = vec4(x,y,1.,1.);//simfragCoord will replace the gl_FragCoord of fragment shader\nfloat u_i = (x /vertexResolution.x);\nfloat v_i = (y /vertexResolution.y);\nfloat sizeFactor = finalDesiredPointSize*vertexResolution.x/resolution.x;\nfloat ux = sizeFactor*(u_i - 0.5);\nfloat vy = sizeFactor*(v_i - 0.5);\ngl_PointSize = finalDesiredPointSize;\ngl_Position = vec4(ux, vy, 0., 1.);\nsurfacePosition = vec2(ux,vy);\n\n\n\tvec2 uv\t\t= simFragCoord.xy / vertexResolution.xy - .5;\n\tvec2 print_uv\t= floor(uv * 64.);\n\t\n\tfloat text\t= center_print(12345678., print_uv);\n\tfloat axis \t= float(abs(uv.x) < 1./vertexResolution.x || abs(uv.y) < 1./vertexResolution.y) * .25;\n\tv_color \t+= text + axis;\n\n}\n"
  },
  "screenshotURL": "data/images/images-x0glh34ebpjwfodon-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "4"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "WyfuAHdBKGMSBYq4F"
}