{
  "_id": "HSGSvjGwQyB6cFQMP",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1445836248361"
    }
  },
  "origId": null,
  "name": "dots",
  "username": "gman",
  "settings": "{\"num\":5000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/claudevonstroke/vocal-chords\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,1,1,1],\"shader\":\"#define NUM_SEGMENTS 64.0\\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\\n#define STEP 1.0\\n#define NUM_LINES_DOWN 32.0\\n#define PI 3.14159\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvoid main() {\\n  // produces 0,1, 1,2, 2,3, ...\\n  float point = floor(mod(vertexId, NUM_POINTS) / 2.0) + mod(vertexId, 2.0) * STEP;\\n  // line count\\n  float count = floor(vertexId / NUM_POINTS);\\n\\n  float u = point / NUM_SEGMENTS;    // 0 <-> 1 across line\\n  float v = count / NUM_LINES_DOWN;  // 0 <-> 1 by line\\n  float invV = 1.0 - v;\\n\\n  // Only use the left most 1/4th of the sound texture\\n  // because there's no action on the right\\n  float historyX = u * 0.25;\\n  // Match each line to a specific row in the sound texture\\n  float historyV = (v * NUM_LINES_DOWN + 0.5) / soundRes.y;\\n  float snd = texture2D(sound, vec2(historyX, historyV)).a;\\n  float sndPM = snd * 2.0 - 1.0;\\n  \\n  gl_PointSize = min(32.0, snd * 32.0) * invV;\\n\\n  float x = u * 2.0 - 1.0 + sndPM * 0.05;\\n  float y = v * 2.0 - 1.0;;\\n  vec2 xy = vec2(x, y);\\n  gl_Position = vec4(xy, 0, 1);\\n\\n  float hue = u * 0.1 + time * 0.01;\\n  float sat = invV;\\n  float val = mix(snd * invV, 1.0, v);\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\\n}\"}",
  "screenshotDataId": "ssTFyFzXXEKdnCe9X",
  "views": {
    "$numberInt": "400"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "FYrrPKDfsxDKF4PDe",
  "screenshotURL": "data/images/images-ssTFyFzXXEKdnCe9X-thumbnail.png",
  "modifiedAt": {
    "$date": {
      "$numberLong": "1445836782712"
    }
  },
  "hasSound": true,
  "rank": {
    "$numberDouble": "1.0622734409886718"
  },
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}