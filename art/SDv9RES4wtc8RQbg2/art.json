{
  "_id": "SDv9RES4wtc8RQbg2",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1467301943774"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1467318370729"
    }
  },
  "origId": "B3fTWQihXfD9t8Q8r",
  "name": "lesson-05-circles",
  "notes": "",
  "rank": {
    "$numberDouble": "1.714810574872671"
  },
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":100000,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/graham-panter/fly-by-light\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0.25098039215686274,1],\"shader\":\"// from: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n#define PI radians(180.0)\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nvec2 getCirclePoint(float id, float numCircleSegments) {\\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\\n  \\n  float angle = ux / numCircleSegments * PI * 2.;\\n  float c = cos(angle);\\n  float s = sin(angle);\\n  \\n  float radius = mix(0.5, 1.0, vy);\\n  float x = c * radius;\\n  float y = s * radius;\\n  \\n  return vec2(x, y);\\n}\\n\\n\\nvoid main() {\\n  float numCircleSegments = 12.0;\\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\\n  float numPointsPerCircle = numCircleSegments * 6.;\\n  \\n  float circleId = floor(vertexId / numPointsPerCircle);\\n  float numCircles = floor(vertexCount / numPointsPerCircle);\\n  \\n  float sliceId = floor(vertexId / 6.);\\n  float oddSlice = mod(sliceId, 2.);\\n  \\n  float down = sqrt(numCircles);\\n  float across = floor(numCircles / down);\\n  float x = mod(circleId, across);\\n  float y = floor(circleId / across);\\n  \\n  float u = x / (across - 1.);\\n  float v = y / (across - 1.);\\n  \\n  float su = abs(u - 0.5) * 2.;\\n  float sv = abs(v - 0.5) * 2.;\\n  \\n  float au = abs(atan(su, sv)) / PI;\\n  float av = length(vec2(su, sv));\\n  \\n  float snd = texture2D(sound, vec2(au * 0.05, av * .25)).a;\\n\\n  float xoff = 0.;//sin(time + y * 0.2) * 0.1;\\n  float yoff = 0.;//sin(time + x * 0.3) * 0.2;\\n  \\n  float ux = u * 2. - 1. + xoff;\\n  float vy = v * 2. - 1. + yoff;\\n\\n  float sc = pow(snd + 0., 5.0)  + oddSlice * 0.1;\\n  float aspect = resolution.x / resolution.y;\\n  \\n  vec4 pos = vec4(circleXY, 0, 1);\\n  mat4 mat = ident();\\n  mat *= scale(vec3(1, aspect, 1));\\n  mat *= rotZ(time * 0.1);\\n  mat *= trans(vec3(ux, vy, 0));\\n  mat *= uniformScale(0.1 * sc * 20. / across);\\n  mat *= rotZ(snd * 10. * sign(ux));\\n  \\n  gl_Position = mat * pos;\\n  \\n  float soff = 1.;//sin(time + x * y * .02) * 5.;  \\n  \\n  float pump = step(0.8, snd);\\n  \\n  float hue = u * .1 + snd * 0.2 + time * .1; //sin(time + v * 20.) * .05;\\n  float sat = mix(0., 1., pump);\\n  float val = mix(.1, pow(snd + 0.2, 5.0), pump);\\n  \\n  hue = hue + oddSlice * 0.5;\\n  val += oddSlice;\\n  \\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\\n}\\n\\n\"}",
  "screenshotURL": "data/images/images-nn67al4rjl4pyk6v2-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "132"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "WYWXNuEC6bxGJoEJt"
}