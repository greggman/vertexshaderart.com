{
  "_id": "kTER7eQ7zASKMtkpo",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1485763057738"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1485763057738"
    }
  },
  "origId": "qjkP6BDvEFyD6CfZC",
  "name": "shu1",
  "notes": "",
  "rank": {
    "$numberDouble": "1.923460575848831"
  },
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":2000,\"mode\":\"LINES\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,1,1,1],\"shader\":\"vec3 hsl2rgb(vec3 c) {\\n  c = vec3(fract(c.x), clamp(c.yz, 0.0, 1.0));\\n  vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\\n  return c.z + c.y * (rgb - 0.5) * (1.0 - abs(2.0 * c.z - 1.0));\\n}\\n\\n// ---- start here ----\\n\\n\\n// original\\n// <body onload=setInterval(\\\"f()\\\",t=16)><script>\\n//function f(){\\n//  g=c.getContext('2d');\\n//  for(t+=.1,i=300,h=150,c.height=i;i>0;--i){\\n//    g.fillStyle='hsla('+360/(i%9)+t+',100%,50%,0.3)';\\n//    g.fillRect(i,h,9,h*Math.sin(i/h+i%9*2+t))\\n//  }\\n//}</script><canvas id=c>\\n\\nvoid main() {\\n  // 2 points per line\\n  float lineId = floor(vertexId / 2.);\\n  float numLines = floor(vertexCount / 2.);\\n  float i = lineId / numLines * 3.; \\n  float odd = mod(vertexId, 2.);\\n \\n  // g.fillStyle='hsla('+360/(i%9)+t+',100%,50%,0.3)';\\n  float h = mod(i, 300.) + time;\\n  float s = 1.;\\n  float l = .5;\\n  v_color.rgb = hsl2rgb(vec3(h,s,l));\\n  v_color.a = 0.3;\\n  v_color.rgb *= v_color.a;\\n  \\n  float lineOffset = floor(lineId / (numLines / 3.));\\n  gl_Position.x = fract(i + lineOffset * 0.331) * 2. - 1.;\\n  gl_Position.y = mix(0., sin(i + i * 5. + time * 10.), odd);\\n  gl_Position.z = 0.;\\n  gl_Position.w = 1.;\\n}\"}",
  "screenshotURL": "data/images/images-qq13ef31pslbk4ebh-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "2"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "mZdgjSDHtmqgfNy2n"
}