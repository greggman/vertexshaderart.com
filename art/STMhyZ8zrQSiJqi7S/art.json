{
  "_id": "STMhyZ8zrQSiJqi7S",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1523405528541"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1538517073402"
    }
  },
  "origId": "dPsnyuwF6HxdEJMAd",
  "name": "cosmic",
  "notes": "http://glslsandbox.com/e#45880.0",
  "rank": {
    "$numberDouble": "1.2093627851478472"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/dark_trance/azzault-technicolors-of-lsd",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define parameter0 0.6//KParameter -5.0>>5.\n#define parameter1 0.4//KParameter 0.0>>10.\n#define parameter2 100.//KParameter 10.0>>100.\n#define parameter3 0.2//KParameter 0.0>>1.\n#define parameter4 1.//KParameter 0.0>>2.\n#define parameter5 1.//KParameter 0.0>>1.\n#define parameter6 1.//KParameter 0.0>>1.\n#define parameter7 1.//KParameter 0.0>>1.\n\n#define PI 3.14159265359\n//#define time\n\nfloat random(float n) {\n\treturn fract(abs(sin(n * 55.753) * 367.34));\n}\n\nmat2 rotate2d(float angle){\n\treturn mat2(cos(angle), -sin(angle),  sin(angle), cos(angle));\n}\n\nvoid main( void ) {float finalDesiredPointSize = 3.;\nfloat maxFinalSquareSideSize = floor(sqrt(vertexCount));\nfloat finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\nfloat maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\nvec2 vertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\nfloat finalVertexCount = vertexResolution.x*vertexResolution.y;\nfloat finalVertexId = mod(vertexId,finalVertexCount);\nfloat x = mod(finalVertexId, vertexResolution.x);\nfloat y = floor(finalVertexId / vertexResolution.x);\nvec2 simFragCoord = vec2(x,y);//simfragCoord will replace the gl_FragCoord of fragment shader\nfloat u_i = (x /vertexResolution.x);\nfloat v_i = (y /vertexResolution.y);\nfloat sizeFactor = finalDesiredPointSize*vertexResolution.x/resolution.x;\nfloat ux = sizeFactor*(u_i - 0.5);\nfloat vy = sizeFactor*(v_i - 0.5);\ngl_PointSize = finalDesiredPointSize;\ngl_Position = vec4(ux, vy, 0., 1.);\nvec2 surfacePosition = vec2(ux,vy);\n\n\tvec2 uv = (simFragCoord.xy * 2.0 -  vertexResolution.xy) / vertexResolution.x;\n\n\tuv *= rotate2d(time * parameter3); //time * 0.2\n\n\tfloat direction = 1.0;\n\tfloat speed = time * direction * parameter0;\n\tfloat distanceFromCenter = length(uv);\n\n\tfloat meteorAngle = atan(uv.y, uv.x) * (180.0 / PI);\n\n\tfloat flooredAngle = floor(meteorAngle);\n\tfloat randomAngle = pow(random(flooredAngle), 0.5);\n\tfloat t = speed + randomAngle;\n\n\tfloat lightsCountOffset = parameter1;\n\tfloat adist = randomAngle / distanceFromCenter * lightsCountOffset;\n\tfloat dist = t + adist;\n\tfloat meteorDirection = (direction < 0.0) ? -1.0 : 0.0;\n\tdist = abs(fract(dist) + meteorDirection);\n\n\tfloat lightLength = parameter2;\n\tfloat meteor = (5.0 / dist) * cos(sin(speed)) / lightLength;\n\tmeteor *= distanceFromCenter * 5.0;\n\n\tvec3 color = vec3(0.);\n\tcolor += meteor;\n\n\tv_color = vec4(color, 1.0);\n}"
  },
  "screenshotURL": "data/images/images-9f5fa8apiti9tbtb4-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "19"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "DqLN4CQvBeTLesaGt"
}