{
  "_id": "7ZTwrYe7Bq7kSQpPb",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": "1445777397953"
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1462069721460"
  },
  "modifiedAt": {
    "$date": "1462069721460"
  },
  "origId": "Q6WYaT35yY2FLBkgi",
  "name": "outty",
  "notes": "",
  "rank": "1.6537556133164832",
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "LINES",
    "sound": "https://soundcloud.com/caravan-palace-official/lone-digger?in=caravan-palace-official%2Fsets%2Freleases",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "//\n#define PI radians(180.0)\n#define NUM_SEGMENTS 200.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 5.0\n//#define FIT_VERTICAL\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  float point = mod(floor(vertexId / 2.0) + mod(vertexId, 2.0) * STEP, NUM_SEGMENTS);\n  float count = floor(vertexId / NUM_POINTS);\n  float numShapes = vertexCount / NUM_POINTS;\n  float cv = count / numShapes;\n  float offset = count * 0.02;\n  float ev = point / NUM_SEGMENTS;\n  float angle = ev * PI * 2.0 + offset;\n  float radius = 0.2;\n  float c = cos(angle + time) * radius;\n  float s = sin(angle + time) * radius;\n  float orbitAngle = count * 0.01;\n  \n  float snd = texture2D(sound, vec2(cv * 0.1, ev * .1)).x;\n\n  vec2 aspect = vec2(1, resolution.x / resolution.y) * 1.;\n\n  float scale = pow(cv + 0.5, 2.7) + pow(snd, 5.0) * 3.;\n  vec2 xy = vec2(\n      c,\n      s);\n  gl_Position = vec4(xy * aspect * scale, 0, 1);\n\n  float hue = cv * 0.2;\n  float unf = step(0.9, snd);\n  v_color = vec4(hsv2rgb(vec3(0, unf, hue + unf)), unf);\n}"
  },
  "screenshotURL": "data/images/images-now6d6u2gzj77364a-thumbnail.jpg",
  "hasSound": true,
  "views": "89",
  "likes": "0",
  "revisionId": "BJpsEngevZrLzdYug"
}