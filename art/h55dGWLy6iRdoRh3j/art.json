{
  "_id": "h55dGWLy6iRdoRh3j",
  "owner": {
    "_id": "vkPwAHM8PnAebFPxW",
    "createdAt": {
      "$date": {
        "$numberLong": "1501857924166"
      }
    },
    "profile": {
      "name": "Macro Machines",
      "avatarUrl": "https://lh3.googleusercontent.com/-hZKcNaW8AT0/AAAAAAAAAAI/AAAAAAAAEGM/geaXegN2s9U/photo.jpg",
      "info": "axiom-crux.net macromachines.net"
    },
    "username": "macro"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1522428289602"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1605795805356"
    }
  },
  "origId": "P9XfoFdHfyNDCwh2N",
  "name": "Richard Devine Point Cloud v3",
  "notes": "",
  "rank": {
    "$numberDouble": "1.1811060571225842"
  },
  "private": false,
  "unlisted": true,
  "username": "macro",
  "avatarUrl": "https://lh3.googleusercontent.com/-hZKcNaW8AT0/AAAAAAAAAAI/AAAAAAAAEGM/geaXegN2s9U/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/richarddevine/strum-modular-patch",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n   point cloud vs spheres by Kabuto remix by Macro Machines\n   Recreated this well-known demo effect. A bit tricky without being able to store history for points, so it's just computed again and again for each render pass\n*/\n\n#define RATE 1.0\n#define SND 1.5\n#define SND2 1.0\n#define BPM 172.0\n\nvec3 posf2(float t, float i) {\n\treturn vec3(\n      sin(t+i*.18293) +\n      sin(t*1.311+i) +\n      sin(t*1.4+i*1.53) +\n      sin(t*1.844+i*.76),\n      sin(t+i*.74553+2.1) +\n      sin(t*1.311+i*1.1311+2.1) +\n      sin(t*1.4+i*1.353-2.1) +\n      sin(t*1.84+i*.476-2.1),\n      sin(t+i*1.5553-2.1) +\n      sin(t*1.311+i*1.1-2.1) +\n      sin(t*1.4+i*1.23+2.1) +\n      sin(t*1.84+i*.36+2.1)\n\t)*0.1492;\n}\n\nvec3 posf0(float t) {  return posf2(t,-1.)*RATE;}\nvec3 posf(float t, float i) {  return posf2(t*.3,i) + posf0(t);}\nvec3 push(float t, float i, vec3 ofs, float lerpEnd) {\n  vec3 pos = posf(t,i)+ofs;\n  vec3 posf = fract(pos+0.5)-0.5;\n  float l = length(posf)*1.45;\n  return (- posf + posf/l)*(1.-smoothstep(lerpEnd,1.,l));\n}\n\nvoid main() { // more or less random movement\n  float tempo = 0.125*time*BPM/60.0;\n  float ramp = fract( tempo*2. );\n  float sine = sin(tempo);\n  float t = time*.10;\n  float i = vertexId+sin(vertexId)*0.10;\n  vec3 pos = posf(t,i);\n  vec3 ofs = vec3(0);\n  vec3 colmod = vec3(0.);\n  for (float f = -10.; f < 0.; f++) {\n    \tfloat nn = f<-5.?0.0001:1.;\n    \tfloat snd = texture2D(sound,vec2(-f*0.1,i*-f*0.1*nn)).a*SND;\n\t  \tofs += push(t+f*.105*snd,i,ofs,2.-exp(-f*.1*snd));\n    \tofs -= snd*0.2;\n    \tofs += SND*0.05;\n    \tofs *= nn;\n  }\n  float snd2 = texture2D(sound,vec2(pos.yz)).a*SND2;\n  snd2*= ramp/sin(time*1.70);//*i;//*0.01;\n  ofs += push(t+snd2,i,ofs,0.999);\n  pos -= posf0(t);\n  pos += ofs;\n  pos.yz *= mat2(.8,.6,-.6,.8);\n  pos.xz *= mat2(.8,.6,-.6,.8);\n  pos *= 1.;\n  pos.z += 0.7;\n  float moddepth = mix(0.2, 0.5, ramp*snd2);\n  pos.xy *= moddepth/pos.z;\n  \n  gl_Position = vec4(pos.x, pos.y*resolution.x/resolution.y, pos.z*.1, 1);\n  float size = 1.0/pos.z* 0.1+1.;\n  size = clamp(size, 0.51, 2.0);\n  gl_PointSize = size;\n  \n  //gl_Position.z -= 1.*sine;\n\n  v_color = vec4(abs(ofs/max(length(ofs),1e-9))*.3+.7,1)*vec4(0.357, 0.470, 0.97, 0.23);\n}"
  },
  "screenshotURL": "data/images/images-r2mgbhgep3kkwy56u-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "9"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "jxc7FN5TQKsZCiKxB"
}