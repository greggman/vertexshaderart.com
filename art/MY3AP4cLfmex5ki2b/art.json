{
  "_id": "MY3AP4cLfmex5ki2b",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1598711334183"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1600519205493"
    }
  },
  "origId": "57DGNjDnDYwrBWXqD",
  "name": "eggsample",
  "notes": "",
  "rank": {
    "$numberDouble": "1.1571784793544553"
  },
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/rukunetsu/alpha-beat-office-shenmue-rmix",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.1803921568627451,
      0.1803921568627451,
      0.1803921568627451,
      1
    ],
    "shader": "/* ðŸ‘¾ */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n// times 2 minus 1\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// times .5 plus .5\nfloat t5p5(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float u = ux / numEdgePointsPerCircle;\n  float v = mix(inner, 1., vy);\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float s = sin(a);\n  float c = cos(a);\n  float x = c * v;\n  float y = s * v;\n  float z = 0.;\n  pos = vec3(x, y, z);  \n}\n\n\n#define CUBE_POINTS_PER_FACE 6.\n#define FACES_PER_CUBE 6.\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\n  float sideId = mod(quadId, 3.);\n  float flip   = mix(1., -1., step(2.5, quadId));\n  // 0 1 2  1 2 3\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\n  float a = pointId * PI * 2. / 4. + PI * 0.25;\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\n  vec3 n = vec3(0, 1, 0) * flip;\n  float lr = mod(sideId, 2.);\n  float ud = step(2., sideId);\n  mat4 mat = rotX(lr * PI * 0.5);\n  mat *= rotZ(ud * PI * 0.5);\n  position = (mat * vec4(p, 1)).xyz;\n  normal = (mat * vec4(n, 0)).xyz;\n}\n\nfloat pinch(float v, float p) {\n  if (v < 0.5) {\n    return pow(v * 2., p) * .5;\n  } \n  return 1. - pow(1. - (v - 0.5) * 2., p);\n}\n\n\n// adapted from http://stackoverflow.com/a/26127012/128511\n\nvec3 fibonacciSphere(float samples, float i) {\n  float rnd = 1.;\n  float offset = 2. / samples;\n  float increment = PI * (3. - sqrt(5.));\n\n  //  for i in range(samples):\n  float y = ((i * offset) - 1.) + (offset / 2.);\n  float r = sqrt(1. - pow(y ,2.));\n\n  float phi = mod(i + rnd, samples) * increment;\n\n  float x = cos(phi) * r;\n  float z = sin(phi) * r;\n\n  return vec3(x, y, z);\n}\n\nvoid getSphereVertex(float vertexId, float vertexCount, float around, \n                     out vec3 pos, out vec3 nrm, out vec2 uv) {\n  float numQuads = floor(vertexCount / 6.);\n  float down = numQuads / around;\n  float quadId = floor(float(vertexId) / 6.);\n\n  float qx = mod(quadId, around);\n  float qy = floor(quadId / around);\n\n  // 0--1 3\n  // | / /|\n  // |/ / |\n  // 2 4--5\n  //\n  // 0 1 0 1 0 1\n  // 0 0 1 0 1 1\n\n  float edgeId = mod(float(vertexId), 6.);\n  float ux = mod(edgeId, 2.);\n  float vy = mod(floor(edgeId / 2.) + floor(edgeId / 3.), 2.);\n\n  float qu = (qx + ux) / around;\n  float qv = (qy + vy) / down;\n\n  float r = sin(qv * PI);\n  float x = cos(qu * PI * 2.) * r;\n  float z = sin(qu * PI * 2.) * r;\n\n  pos = vec3(x, cos(qv * PI), z);\n  nrm = normalize(pos);\n  uv = vec2(qu, qv);\n}\n\n\nvoid main() {\n  if (vertexId < 6.) {\n    float id = vertexId;\n    float ux = floor(id / 6.) + mod(id, 2.);\n    float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n\n    gl_Position = vec4(ux, mix(-1., 1., vy), 0.999, 1);\n    v_color = vec4(0);\n    return;\n    \n  }\n  float pointId = vertexId;  \n\n  vec3 pos;\n  vec3 normal;\n  vec2 uv;\n  float around = 24.0;\n  float down = 12.0;\n  float vertsPerSphere = around * down * 6.;\n  getSphereVertex(mod(pointId, vertsPerSphere), vertsPerSphere, around, pos, normal, uv);\n  float cubeId = floor(pointId / vertsPerSphere);\n  float maxCubes = floor(vertexCount / vertsPerSphere);\n  float numCubes = maxCubes;// * mix(0.1, 1., t5p5(sin(time * .05)));\n\n  //vec3 loc = fibonacciSphere(numCubes, cubeId);\n\n  float cv = cubeId / numCubes;\n  float su = (cv);\n  \n  float cvv = cubeId / (numCubes - 1.);\n  \n  //su = hash(cubeId / maxCubes);\n  /*\n  float s1 = texture2D(sound, vec2(mix(.05, .00, fract(su + 1.0)), 0. / soundRes.y)).a;\n  float s2 = texture2D(sound, vec2(mix(.06, .01, fract(su + 0.8)), 1. / soundRes.y)).a;\n  float s3 = texture2D(sound, vec2(mix(.07, .02, fract(su + 0.6)), 2. / soundRes.y)).a;\n  float s4 = texture2D(sound, vec2(mix(.08, .03, fract(su + 0.4)), 3. / soundRes.y)).a;\n  \n  float s = max(max(max(s1, s2), s3), s4);mix(0.0, 0.25, s1 + s2 + s3 + s4);\n  */\n  \n  float numVertsAround = around * 6.0;\n  float lonId = floor(vertexId / numVertsAround);\n  float lonV = fract(lonId / around);\n\n  float latId = mod(floor(vertexId / 6.0), around);\n  float latV = fract(latId / around);\n  \n  vec2 u1 =vec2(mix(0.02, 0.1, latV), lonV * 0.2);\n  vec2 u2 =vec2(mix(0.02, 0.1, lonV), latV * 0.2);\n  float s = texture2D(sound, mix(u1, u2, cvv)).a;\n  float sBeat = texture2D(sound, vec2(cvv, 0)).a;\n  float sLon = texture2D(sound, vec2(cvv * 0.1 + lonV, 0) * 0.2).a;\n  float sLat = texture2D(sound, vec2(cvv * 0.11 + abs(latV * 2. - 1.) * 0.2, 0)).a;\n  \n  float tm = time * .1;\n  float r = 2.5;\n  mat4 mat = persp(radians(100.0), resolution.x / resolution.y, 0.1, 20.0);\n  vec3 eye = vec3(cos(tm) * r, sin(tm) * r * 0. + r, sin(tm) * r);\n  vec3 target = vec3(0);\n  vec3 up = vec3(0,1,0);\n  \n  float sc = mix(1.8, 20., pow(1. - numCubes / maxCubes, 10.));\n  mat *= cameraLookAt(eye, target, up);\n  float r2 = mix(25., 50., sin(cv * PI * 2. + time) * 0.5 + 0.5);\n//  mat *= rotX(tm);\n//mat *= lookAt(loc * r2, vec3(0), up);\n//  mat *= scale(vec3(sc, sc, mix(1., 2.5, pow(s, 1.0))));\n  mat *= trans((2. * vec3(hash(cvv), hash(cvv * 0.531), hash(cvv * 0.712)) - 1.) * 2.);\n//  mat *= rotZ(s * PI * 2.);\n  float ss = fract(time * .1 + cvv * 0.5) * 4.;\n  mat *= uniformScale(0.1);\n  mat *= uniformScale(ss);\n  mat *= uniformScale(1. + mix(sLat * sin(pos.y * PI), sLon, cvv));\n  mat *= uniformScale(mix(1.0, 1.5, sBeat));\n  \n  gl_Position = mat * vec4(pos, 1);\n  vec3 n = normalize((mat * vec4(normal, 0)).xyz);\n  \n  vec3 lightDir = normalize(vec3(0.3, 0.4, -1));\n\n\n  float hue = mix(cv + time * 0.1, sin(latV * PI) * 0.1 + cvv, 1. - cvv);\n  float sat = .5;\n  float val = mix(1., pow(sLon + 0.3, 2.), cvv);\n  vec3 color = hsv2rgb(vec3(hue, sat, val));\n  vec3 color2 = hsv2rgb(vec3(hue + 0.5, 1., 1.));\n  float lt = (dot(n, lightDir) * 0.5 + 0.5);\n  v_color = mix(vec4(color * lt, 1), vec4(color2, 1), step(0.7, s));\n//  v_color.a = s;\n  v_color.a = min(1. , 4.0 - ss);\n  v_color.rgb *= v_color.a; \n//  if (s < .2) {\n//    gl_Position.z = 10000.;\n//  }\n}\n\n"
  },
  "screenshotURL": "data/images/images-egfuq7qaauvg1h4tr-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "4"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "2cytE9b5HDimWX8B6"
}