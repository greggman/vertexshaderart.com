{
  "_id": "9xQqPx9YtLs7Zddzb",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1551833350652"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1551998159737"
    }
  },
  "origId": "xxhTPvXjTWPCPLM2v",
  "name": "simple cube with light",
  "notes": "",
  "rank": {
    "$numberDouble": "1.1942129440854712"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "TRI_STRIP",
    "sound": "https://soundcloud.com/djapsara/apsara-afterdark-031-on-frisky-radio-may-2017",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.10196078431372549,
      0.19607843137254902,
      0.25098039215686274,
      1
    ],
    "shader": "\n\n\n//KDrawmode=GL_TRIANGLE_STRIP\n//KVerticesNumber=36000\n\n\n#define slideSpeed 5. //KParameter 0.>>30.\n\n#define fakeVerticeNumber 72000.\n\n\n#define PI radians( 180.0 )\n\n\nmat4 lookAt(vec3 _eye, vec3 _targ, vec3 _up) {\n  vec3 zAx = normalize(_eye - _targ);\n  vec3 xAx = normalize(cross(_up, zAx));\n  vec3 yAx = cross(zAx, xAx);\n\n  return mat4(\n    xAx, 0.,\n    yAx, 0.,\n    zAx, 0.,\n    _eye, 1.);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 persp(float _fov, float _aspect, float _zNear, float _zFar) {\n  float f = tan(PI * 0.5 - 0.5 * _fov);\n  float rInv = 1.0 / (_zNear - _zFar);\n\n  return mat4(\n    f / _aspect, 0., 0., 0.,\n    0., f, 0., 0.,\n    0., 0., (_zNear + _zFar) * rInv, -1.,\n    0., 0., _zNear * _zFar * rInv * 2., 0.);\n}\n\n\nvec2 Rotate( const in vec2 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec2 vResult = vec2( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y);\n    \n    return vResult;\n}\n\nstruct SurfaceInfo\n{\n\tvec3 vPos;\n  \tvec3 vNormal;\n};\n\nvoid Translate( vec3 vTranslation, inout vec3 vPos )\n{\n\tvPos += vTranslation;\n}\n  \nvoid RotateX( float theta, inout vec3 vPos )\n{\n  \tvPos.yz = Rotate( vPos.yz, theta );\n}\n\nvoid RotateY( float theta, inout vec3 vPos )\n{\n  \tvPos.xz = Rotate( vPos.xz, theta );\n}\n\nvoid RotateZ( float theta, inout vec3 vPos )\n{\n  \tvPos.xy = Rotate( vPos.xy, theta );\n}\n\nvoid AddPointLight( vec3 vLightPos, vec3 vLightColor, const SurfaceInfo surfaceInfo, inout vec3 vDiffuse, inout vec3 vSpecular )\n{\n  vec3 vLightDir = normalize(vLightPos - surfaceInfo.vPos);\n  vec3 vViewDir = normalize(-surfaceInfo.vPos);\n  \n  float NdotL = max( 0.0, dot( vLightDir, surfaceInfo.vNormal ) );\n  \n  vec3 vHalfAngle = normalize( vViewDir + vLightDir );\n\n  float NdotH = max( 0.0, dot( vHalfAngle, surfaceInfo.vNormal ) );\n  \n  vDiffuse += NdotL * vLightColor;\n\n  float fPower = 80.0;\n  vSpecular += pow( NdotH, fPower ) * (fPower * 8.0 * PI) * NdotL * vLightColor;\n}\n\nvoid AddDirectionalLight( vec3 vLightDir, vec3 vLightColor, const SurfaceInfo surfaceInfo, inout vec3 vDiffuse, inout vec3 vSpecular )\n{\n  vec3 vViewDir = normalize(-surfaceInfo.vPos);\n  \n  float NdotL = max( 0.0, dot( vLightDir, surfaceInfo.vNormal ) );\n  \n  vec3 vHalfAngle = normalize( vViewDir + vLightDir );\n\n  float NdotH = max( 0.0, dot( vHalfAngle, surfaceInfo.vNormal ) );\n  \n  vDiffuse += NdotL * vLightColor;\n\n  float fPower = 80.0;\n  vSpecular += pow( NdotH, fPower ) * (fPower * 8.0 * PI) * NdotL * vLightColor;\n}\n\nvec3 GetSkyColor( vec3 vDir )\n{\n  return mix( vec3(0.01, 0.1, 0.4), vec3(0.2, 0.5, 0.6) * 5.0, vDir.y * 0.5 + 0.5 );\n}\n\n\n\nvec3 LightSurface( const SurfaceInfo surfaceInfo, const vec3 vAlbedo, const vec2 _sceneSize)\n{   \n  vec3 vDiffuseLight = vec3(0.0);\n  vec3 vSpecLight = vec3(0.2);\n\n  // use background color\n  vec3 vAmbient = GetSkyColor( surfaceInfo.vNormal );\n  vDiffuseLight += vAmbient;\n  vSpecLight += vAmbient;\n\n  float center = _sceneSize.x/2.;\n  AddPointLight( vec3(0.0, center, 10.0), vec3( 1., 1.0, 1.0), surfaceInfo, vDiffuseLight, vSpecLight );\n  //AddDirectionalLight( normalize(vec3(0.0, 1.0, 0.0)), vec3( 3.0, 2.9, 1.5), surfaceInfo, vDiffuseLight, vSpecLight );\n  //AddDirectionalLight( normalize(vec3(0.0, 1.0, 0.0)), vec3( 0.0, 2.9, 0.5), surfaceInfo, vDiffuseLight, vSpecLight );\n  //AddDirectionalLight( normalize(vec3(0.0, -1.0, 0.0)), vAmbient * 0.1, surfaceInfo, vDiffuseLight, vSpecLight );\n  \n  // viewer is at origin\n  vec3 vViewDir = normalize(-surfaceInfo.vPos);\n  \n  float fNdotD = clamp(dot(surfaceInfo.vNormal, vViewDir), 0.0, 1.0);\n  vec3 vR0 = vec3(0.04);\n  vec3 vFresnel = vR0 + (1.0 - vR0) * pow(1.0 - fNdotD, 5.0);\n  \n  \n  vec3 vColor = mix( vDiffuseLight * vAlbedo, vSpecLight, vFresnel );\n  \n  return vColor;\n}\n\nvec3 PostProcess( vec3 vColor )\n{\n  float kExposure = 1.0;\n  vColor = vec3(1.0) - exp2( vColor * -kExposure );\n\n  vColor = pow( vColor, vec3(1.0 / 2.2) );\n\n  return vColor;\n}\n\n\n#define kShapeVertexCount 36.0\n#define kVertexPerShape 6.0\n\nvec3 shapeVertex(float _vId, out vec4 _nI, in vec3 _sizes)\n{\n    float faceId = floor(_vId / kVertexPerShape);\n    float vtxId = mod(_vId, kVertexPerShape);\n    vec2 fp;\n    vec3 v;\n    \n    if(vtxId <= 1.0) {\n        fp = vec2(0.5, 0.5);\n    }\n    else if(vtxId == 2.0) {\n        fp = vec2(-0.5, 0.5);\n    }\n    else if(vtxId == 3.0) {\n        fp = vec2(0.5, -0.5);\n    }\n    else {\n        fp = vec2(-0.5, -0.5);\n    }\n    \n    if(faceId == 0.0) {\n        \n        v = vec3(fp.x, fp.y, 0.5);\n        _nI = vec4(0.0, 0.0, 1.0, faceId);\n    }\n    else if(faceId == 1.0) {\n        \n        v = vec3(-fp.x, fp.y, -0.5);\n        _nI = vec4(0.0, 0.0, -1.0, faceId);\n    }\n    else if(faceId == 2.0) {\n        \n        v = vec3(fp.x, 0.5, -fp.y);\n        _nI = vec4(0.0, 1.0, 0.0, faceId);\n    }\n    else if(faceId == 3.0) {\n        \n        v = vec3(fp.x, -0.5, fp.y);\n        _nI = vec4(0.0, -1.0, 0.0, faceId);\n    }\n    else if(faceId == 4.0) {\n        \n        v = vec3(-0.5, fp.y, -fp.x);\n        _nI = vec4(-1.0, 0.0, 0.0, faceId);\n    }\n    else {\n        \n        v = vec3(0.50, fp.y, fp.x);\n        _nI = vec4(1.0, 0.0, 0.0, faceId);\n    }\n    \n    return v;\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\n#define kShapeVertexCount 36.0\n#define kVertexPerShape 6.0\n#define numberOfShapesPerGroup 5.0\n\n\n//#define MOVING_SHAPES\n#define SOUND_ON\n#define EYE_STYLE 0\nvoid main() \n{\n  \n    float finalVertexId = mod(vertexId,fakeVerticeNumber);\n    float finalVertexCount = min(vertexCount,fakeVerticeNumber);\n  \n    //shape\n    float shapeCount = floor(finalVertexCount / kShapeVertexCount);\n    float shapeId = floor(finalVertexId / kShapeVertexCount);\n    float shapeVertexId = mod(finalVertexId, kShapeVertexCount);\n    float shapeRelId = shapeId/shapeCount;\n    \n    //group\n    float groupId = floor(shapeId/numberOfShapesPerGroup);\n    float groupCount = floor(shapeCount/numberOfShapesPerGroup);\n    float shapeIdInGroup = mod(shapeId,numberOfShapesPerGroup);\n    float relShapeGroupId = shapeIdInGroup/numberOfShapesPerGroup;\n    float relGroupId = groupId/groupCount;\n  \n    float xCount, zCount;\n    xCount = floor(sqrt(shapeCount));\n    zCount = xCount;\n  \n    vec2 gridDim = vec2(10.,10.);\n    float marginSize = 0.02;\n\n    float xIndex = mod(shapeId,xCount);\n    float zIndex = floor(shapeId/xCount);\n    float relx = xIndex/xCount;\n    float relz = zIndex/zCount;\n  \n  #ifdef SOUND_ON\n    float snd = 10.*texture2D(sound, vec2(1. - relx, 1. -relz)).a;\n  #else\n    float snd = 1.;\n  #endif\n  \n  vec4 cNorm;\n  \n  vec3 sizes = vec3(1.,1.,1.);\n  \n  vec3 cubep = shapeVertex(shapeVertexId, cNorm, sizes);\n \n  float lineWidth = gridDim.x/xCount; //the shape 'line' size including margins\n  float cubeWidth = lineWidth - marginSize;//the shape size\n  mat4 scaleMat = scale(vec3(cubeWidth,(1.+snd)*cubeWidth,cubeWidth));\n  cubep = (scaleMat*vec4(cubep,1.)).xyz;\n     \n\n  #ifdef MOVING_SHAPES\n  cubep += vec3(zIndex*lineWidth, 0., mod(xIndex - time*slideSpeed,xCount)*cubeSize); \n #else\n  cubep += vec3(xIndex*lineWidth, 0., zIndex*lineWidth);\n  #endif\n  \n  SurfaceInfo surfaceInfo;  \n  surfaceInfo.vPos = cubep;\n  surfaceInfo.vNormal = cNorm.xyz;\n\n  vec3 vViewPos = surfaceInfo.vPos;\n  \n  float dim = 1.;\n\n  float pos = xCount*lineWidth;\n  \n  \n  float eyePosY = 1.2;//10.*texture2D(sound, vec2(relcol, 0.)).a; \n  float eyeSpeedFactor = 0.2;\n  #if EYE_STYLE == 0\n  vec3 eye = vec3(gridDim.x/2.+gridDim.x/2.*cos(time*eyeSpeedFactor), eyePosY, gridDim.x/2.+gridDim.x/2.*sin(time*eyeSpeedFactor))*dim;\n  #else\n  vec3 eye = vec3(gridDim.x/2., eyePosY, -1.3)*dim;\n  #endif\n  //vec3 eye = vec3(gridDim.x/2., eyePosY, -1.3)*dim;\n  //vec3 eye = vec3(pos+sin(time*1.57), 0.6, pos+cos(time*0.2))*dim;\n  vec3 target = vec3(gridDim.x/2., 0., gridDim.x/2.)*dim;\n  vec3 up     = vec3(0., 1., 0.);\n  \n  mat4 vmat = inverse(lookAt(eye, target, up));\n  \n  mat4 pmat = persp(radians(60.0), resolution.x / resolution.y, .1, 1000.0);\n  \n  gl_Position = pmat * vmat * vec4(cubep, 1);\n  \n  vec3 vAlbedo = vec3(1.0, 1.0, 1.0);\n  \n  vec3 vColor = LightSurface( surfaceInfo, vAlbedo, gridDim );  \n\n  vColor = PostProcess( vColor );\n  \n  v_color = vec4(vColor, 1.0);\n}\n\n\n"
  },
  "screenshotURL": "data/images/images-9ecd6onfkaadvcgx8-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "9"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "KfBaayLubGghX7HnJ"
}