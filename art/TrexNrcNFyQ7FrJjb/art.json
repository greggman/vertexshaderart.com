{
  "_id": "TrexNrcNFyQ7FrJjb",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1446545252712"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1446545252712"
    }
  },
  "origId": "LTuqGKGJGc3bHxGij",
  "name": "shapeshift",
  "private": false,
  "username": "gman",
  "settings": "{\"num\":20000,\"mode\":\"LINES\",\"sound\":\"\",\"lineSize\":\"CSS\",\"backgroundColor\":[0.996078431372549,0.9921568627450981,1,1],\"shader\":\"vec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvoid main() {\\n  float t = time * 0.2;\\n  float NUM_SEGMENTS = 3. + mod(floor(t), 20.);\\n  float NUM_POINTS = NUM_SEGMENTS * 2.0;\\n  float STEP = 3.0 + mod(floor(t * 4.), NUM_SEGMENTS);\\n  float PI = 3.14159 + mod(floor(t * 8.), 30.0);\\n  float localTime = time + 20.0;\\n  float point = mod(floor(vertexId / 2.0) + mod(vertexId, 2.0) * STEP, NUM_SEGMENTS);\\n  float count = floor(vertexId / NUM_POINTS);\\n  float offset = count * sin(time * 0.01) + 5.0;\\n  float angle = point * PI * 2.0 / NUM_SEGMENTS + offset;\\n  float radius = pow(count * 0.00024, 1.0);\\n  float c = cos(angle + localTime) * radius;\\n  float s = sin(angle + localTime) * radius;\\n  float orbitAngle =  pow(count * 0.9, 0.8);\\n  float innerRadius = pow(count * 0.0025, 1.10);\\n  float oC = cos(orbitAngle + count * 0.01) * innerRadius;\\n  float oS = sin(orbitAngle + count * 0.01) * innerRadius;\\n\\n  vec2 aspect = vec2(1, resolution.x / resolution.y); \\n  vec2 xy = vec2(\\n      oC + c,\\n      oS + s);\\n  gl_Position = vec4(xy * aspect, 0, 1);\\n\\n  \\n  float hue = floor(time) / 0.23;\\n  float sat = 1.;\\n  float val = 0.8;\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\\n}\"}",
  "screenshotURL": "data/images/images-q8ud09emoqpfjkx2f-thumbnail.jpg",
  "views": {
    "$numberInt": "229"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "dRpMmQJ9SuxgmcbAZ",
  "rank": {
    "$numberDouble": "1.3489571120973654"
  },
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}