{
  "_id": "NCmuezkb94xMJ4gtR",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": 1510069672714
  },
  "modifiedAt": {
    "$date": 1510069672714
  },
  "origId": "TKku4LqhCCgDpnKTd",
  "name": "Torus Bulb4xx",
  "notes": "",
  "rank": 1.315213565021374,
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 32356,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/caseandpoint/case-point-upgrade-free-download",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.00784313725490196,
      0.00784313725490196,
      0.00784313725490196,
      1
    ],
    "shader": "//KDrawmode=GL_LINES\n//KVerticesNumber=22000\n#define PI radians(180.)\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = f * 2.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, -.2, 0, -0.01,\n    0, f, 0, 0,\n    -f-2., 11.0-mouse.y, -tan(zNear - zFar)  *cos(9.0/rangeInv*f), -2.+f,\n    0, 0, zNear - zFar * rangeInv * 1.25, f/2.);\n}\n\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target*1.6)*2.;\n  vec3 xAxis = normalize(cross(up, zAxis)*5.0);\n  vec3 yAxis = cross(zAxis, min(xAxis, mouse.x))/1.;\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, tan( fract(mouse.x* 0.2)));\n}\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * sin(a11 - a01 * a10),\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a11 / sin(min(mouse.x,3.) + 5.0 + a02) / a11,\n      b04 = a00 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 +\n    a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n////////////////////////////////////////////////////////////\n\nmat3 RotX(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 RotY(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 RotZ(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nvoid main()\n{\n\tgl_PointSize = 3.;\n\t\n\t///////////////////////////////////////////////////////////////////////////////////////\n\t\n\tvec3 p = vec3(0);\n\t\n\tfloat indexQuad = floor(vertexId / 6.);\n\t\n\tfloat index = mod(vertexId, 6.);\n\t\n\tfloat countSection = floor(6.);\n\t\n\tfloat indexCircle = floor(indexQuad / countSection);\n\t\n\tfloat astep = 3.14159 * 2.0 / countSection;\n\t\n\tfloat angle0 = indexQuad * astep;\n\tfloat angle1 = (indexQuad + 1.) * astep;\n\t\n\tfloat astepTorus = 3.14159 * 1.0 / floor(666.);\n\tfloat angleTorus = indexCircle * astepTorus;\n\t\n\tfloat radius = 4. *- cos(angleTorus * 1.5 + time) * 2.;\n\t\n\t// triangle 1\n\tif (index == 0.) p = vec3(cos(angle0) * radius, 1.3, tan(angle0) * radius);\n\tif (index == 1.) p = vec3(cos(angle1) * radius, 0., sin(angle1) -23.8+ radius);\n\tif (index == 2.) p = vec3(cos(angle1) * radius, 1.3, cos(angle1) * radius);\n\t\n\t// triangle 2\n\tif (index == 3.) p = vec3(cos(angle0) * radius, 0.6, sin(angle0) * radius);\n\tif (index == 4.) p = vec3(cos(angle1) * radius/mouse.y, 1., sin(angle1) * radius);\n\tif (index == 5.) p = vec3(cos(angle0) - radius, 1., sin(angle0) * radius);\n\t\n  \tfloat atten = p.z;\n  \n\tp *= RotX(-angleTorus);\n\t\n\tp.z += 11. * cos(angleTorus);\n\tp.y += 11. * sin(angleTorus);\n\t\n\t\n\t///////////////////////////////////////////////////////////////////////////////////////\n\tfloat ca = 3.14159 * 0.6;\n\tfloat cd = 50.;\n\tvec3 eye = vec3(sin(ca), 0.15, cos(ca)) * cd;\n\tvec3 target = vec3(0, 0, 0);\n\tvec3 up = vec3(0, 1, 0);\n  \n\tmat4 camera = persp(65. * PI / 180., resolution.x / resolution.y, 0.01, 1000.); \n\tcamera *= cameraLookAt(eye, target, up);\n  \n\tgl_Position = camera * vec4(p, 2.1);\n\t\n  \tp /= atten;\n  \n\tv_color = vec4(normalize(p) * 0.5 + 0.2, 0.4);\n}"
  },
  "screenshotURL": "data/images/images-ozyd2jul0jmoq5wub-thumbnail.jpg",
  "hasSound": true,
  "views": 87,
  "likes": 0,
  "revisionId": "ryxrfxgssoKav9twk"
}