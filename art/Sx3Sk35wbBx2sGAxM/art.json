{
  "_id": "Sx3Sk35wbBx2sGAxM",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1570789418144"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1689925800170"
    }
  },
  "origId": "N3hXFQfEHwQ9N3TkC",
  "name": "sdf-ish",
  "notes": "",
  "rank": {
    "$numberDouble": "10.227631380941888"
  },
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/joe-blobs/naga-baba-the-jabberwocky-joe-blobs-rmx\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"/**/\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n#define PI radians(180.)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nmat4 rotX(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0, -s, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotY(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\n// times 2 minus 1\\nfloat t2m1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\n// times .5 plus .5\\nfloat t5p5(float v) {\\n  return v * 0.5 + 0.5;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\\n  float u = ux / numEdgePointsPerCircle;\\n  float v = mix(inner, 1., vy);\\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\\n  float s = sin(a);\\n  float c = cos(a);\\n  float x = c * v;\\n  float y = s * v;\\n  float z = 0.;\\n  pos = vec3(x, y, z);  \\n}\\n\\n\\n#define CUBE_POINTS_PER_FACE 6.\\n#define FACES_PER_CUBE 6.\\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\\n  float sideId = mod(quadId, 3.);\\n  float flip   = mix(1., -1., step(2.5, quadId));\\n  // 0 1 2  1 2 3\\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\\n  float a = pointId * PI * 2. / 4. + PI * 0.25;\\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\\n  vec3 n = vec3(0, 1, 0) * flip;\\n  float lr = mod(sideId, 2.);\\n  float ud = step(2., sideId);\\n  mat4 mat = rotX(lr * PI * 0.5);\\n  mat *= rotZ(ud * PI * 0.5);\\n  position = (mat * vec4(p, 1)).xyz;\\n  normal = (mat * vec4(n, 0)).xyz;\\n}\\n\\n\\nfloat sdSphere( vec3 p, float s )\\n{\\n  return length(p)-s;\\n}\\n\\nfloat sdTorus( vec3 p, vec2 t )\\n{\\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\\n  return length(q)-t.y;\\n}\\n\\nfloat sdCappedCylinder( vec3 p, float h, float r )\\n{\\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\\n}\\n\\nfloat sdOctahedron( in vec3 p, in float s)\\n{\\n    p = abs(p);\\n    float m = p.x+p.y+p.z-s;\\n    vec3 q;\\n         if( 3.0*p.x < m ) q = p.xyz;\\n    else if( 3.0*p.y < m ) q = p.yzx;\\n    else if( 3.0*p.z < m ) q = p.zxy;\\n    else return m*0.57735027;\\n    \\n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \\n    return length(vec3(q.x,q.y-s+k,q.z-k)); \\n}\\n\\n\\nfloat sdHexPrism( vec3 p, vec2 h )\\n{\\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\\n    p = abs(p);\\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\\n    vec2 d = vec2(\\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\\n       p.z-h.y );\\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\\n}\\n\\n#if 1\\nvoid main() {\\n  float cubeSize = floor(pow(vertexCount, 1.0 / 3.0));\\n  float uId = mod(vertexId, cubeSize);\\n  float vId = mod(floor(vertexId / cubeSize), cubeSize);\\n  float wId = floor(vertexId / cubeSize / cubeSize);\\n  \\n  vec3 uvw = vec3(uId, vId, wId) / cubeSize;\\n  //vec3 pos = uvw * 2. - 1.;\\n  float v = vertexId + time * 0.1;\\n  vec3 pos = fract(time * 0. + vec3(hash(v * 0.135), hash(v * 1.237), hash(v * 1.721))) * 2.0 - 1.0;\\n  pos *= 2.0;\\n  \\n  \\n  mat4 pmat = persp(radians(45.0), resolution.x / resolution.y, 0.01, 15.0);\\n  float cr = 3.;\\n  float ct = time * 0.1;\\n  vec3 cam = vec3(cos(ct) * cr, sin(ct * 0.9), sin(ct) * cr);\\n  vec3 target = vec3(0, 0, 0);\\n  vec3 up = vec3(0, 1, 0);\\n  mat4 cmat = cameraLookAt(cam, target, up);\\n  \\n  vec3 p1 = (rotX(time) * vec4(pos, 1)).xyz; \\n  vec3 p2 = (trans(vec3(sin(time), 0, 0)) * vec4(pos, 1)).xyz;\\n  vec3 p3 = (trans(vec3(0, sin(time), 0)) * rotX(time) * vec4(pos, 1)).xyz;\\n  vec3 p4 = (trans(vec3(0, 0, sin(time))) * vec4(pos, 1)).xyz;\\n  vec3 p5 = (trans(vec3(cos(time), sin(time), 0)) * rotX(time) * vec4(pos, 1)).xyz;\\n  float dist2 = sdTorus(p1, vec2(1.1, 0.01));\\n  float dist1 = sdSphere(p2, 0.5);\\n  float dist3 = sdHexPrism(p3, vec2(.5, .1));\\n  float dist4 = sdCappedCylinder(p4, 1., 0.5);\\n  float dist5 = sdOctahedron(p5, 1.);\\n  float dist = 1000.0;\\n  dist = min(dist5, dist);\\n  dist = min(dist4, dist);\\n  dist = min(dist3, dist);\\n  dist = min(dist2, dist);\\n  dist = min(dist1, dist);\\n  float off = max(0., dist);\\n  pos -= normalize(pos) * off;\\n  \\n  float s = texture2D(sound, vec2(\\n    mix(0.01, 0.1, (abs(pos.x) * 0.3)),\\n    fract(abs(atan(pos.y, pos.z)) / PI * 0.2 * 10.)\\n  )).r;\\n  \\n  gl_Position = pmat * cmat * vec4(pos, 1);\\n  gl_PointSize = 4. + pow(s, 10.) * 40.;\\n  v_color = vec4(vec3(abs(off) * 50., s, s), 1);\\n  v_color.rgb = hsv2rgb(vec3(time * 0.1 + s * 0.2, 1., pow(s + 0.25, 5.)));\\n  v_color = mix(v_color, vec4(1, 1, 0, 1), pow(s + 0.2, 15.));\\n  v_color.a = 0.4;\\n  v_color.rgb *= v_color.a;\\n}\\n\\n#endif\\n\\n\"}",
  "screenshotURL": "data/images/images-lv949vucjio91xr9b-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1414"
  },
  "likes": {
    "$numberInt": "8"
  },
  "revisionId": "PR8SgJFDr8yLg4kje"
}