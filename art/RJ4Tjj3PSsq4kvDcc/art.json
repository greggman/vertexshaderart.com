{
  "_id": "RJ4Tjj3PSsq4kvDcc",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1448522234366"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1448816664580"
    }
  },
  "origId": "xvg4vyvfWjCvKZQfW",
  "name": "jjblox",
  "rank": {
    "$numberDouble": "1.3319837843856768"
  },
  "private": false,
  "username": "gman",
  "settings": {
    "num": 87554,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/noisia/noisia-machine-gun-amon-tobin-remix",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/*\n\n\n                  __                 __              __                     __ \n _   _____  _____/ /____  _  _______/ /_  ____ _____/ /__  _________ ______/ /_\n| | / / _ \\/ ___/ __/ _ \\| |/_/ ___/ __ \\/ __ `/ __  / _ \\/ ___/ __ `/ ___/ __/\n| |/ /  __/ /  / /_/  __/>  <(__  ) / / / /_/ / /_/ /  __/ /  / /_/ / /  / /_  \n|___/\\___/_/   \\__/\\___/_/|_/____/_/ /_/\\__,_/\\__,_/\\___/_/   \\__,_/_/   \\__/  \n                                                                               \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n\nvec3 gSunColor = vec3(1.0, 1.0, 1.0) * 10.0;  \n\nvec3 gSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\nvec3 gSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\n\nvec3 gCubeColor = vec3(1.0, 1.0, 1.0);\nfloat gExposure = 1.0;\n\nfloat gCubeColorRandom = 0.0;\n\n#define MOVE_OUTWARDS\n\nfloat fAOAmount = 10.83;\nfloat gFloorHeight = -1.0;\nfloat g_cameraFar = 1000.0;\n\n#define PI radians( 180.0 )\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvec3 GetSunDir()\n{\n  \treturn normalize( vec3( 1.0, 0.3, -0.5 ) );\n}\n\n\nvoid GetQuadInfo( const float vertexIndex, out vec2 quadVertId, out float quadId )\n{\n    float twoTriVertexIndex = mod( vertexIndex, 6.0 );\n    float triVertexIndex = mod( vertexIndex, 3.0 );\n  \n    if \t\t( twoTriVertexIndex < 0.5 ) quadVertId = vec2( 0.0, 0.0 );\n    else if\t( twoTriVertexIndex < 1.5 )\tquadVertId = vec2( 1.0, 0.0 );\n    else if ( twoTriVertexIndex < 2.5 )\tquadVertId = vec2( 0.0, 1.0 );\n    else if ( twoTriVertexIndex < 3.5 )\tquadVertId = vec2( 1.0, 0.0 );\n    else if ( twoTriVertexIndex < 4.5 )\tquadVertId = vec2( 1.0, 1.0 );\n    else \t\t\t\t\t\t\t\tquadVertId = vec2( 0.0, 1.0 );\n\n    quadId = floor( vertexIndex / 6.0 );\n}\n\n\nvoid GetQuadTileInfo( const vec2 quadVertId, const float quadId, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\n{\n    vQuadTileIndex.x = floor( mod( quadId, vDim.x ) );\n    vQuadTileIndex.y = floor( quadId / vDim.x );\n\n  \tvQuadUV.x = floor(quadVertId.x + vQuadTileIndex.x);\n    vQuadUV.y = floor(quadVertId.y + vQuadTileIndex.y);\n\n    vQuadUV = vQuadUV * (1.0 / vDim);\n}\n\n\nvoid GetQuadTileInfo( const float vertexIndex, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\n{\n  \tvec2 quadVertId;\n  \tfloat quadId;\n\tGetQuadInfo( vertexIndex, quadVertId, quadId );  \n  \tGetQuadTileInfo( quadVertId, quadId, vDim, vQuadTileIndex, vQuadUV );   \n}\n\n\nvoid GetMatrixFromZY( const vec3 vZ, const vec3 vY, out mat3 m )\n{\n   vec3 vX = normalize( cross( vY, vZ ) );\n   vec3 vOrthoY = normalize( cross( vZ, vX ) );\n   m[0] = vX;\n   m[1] = vOrthoY;\n   m[2] = vZ;\n}\n\n\nvoid GetMatrixFromZ( vec3 vZAxis, out mat3 m )\n{\n  \tvec3 vZ = normalize(vZAxis);\n   \tvec3 vY = vec3( 0.0, 1.0, 0.0 );\n  \tif ( abs(vZ.y) > 0.99 )\n    {\n       vY = vec3( 1.0, 0.0, 0.0 );\n    }\n  \tGetMatrixFromZY( vZ, vY, m );\n}\n\n\nstruct SceneVertex\n{\n  \tvec3 vWorldPos;\n  \tvec4 vColor;\n};\n\n\nfloat GetCosSunRadius()\n{\n  return 0.01;\n}\n\n\nfloat GetSunIntensity()\n{  \t\n  \treturn 0.001;\n}\n\n\nvec3 GetSkyColor( vec3 vViewDir )\n{\n\treturn mix( gSkyBottom, gSkyTop, max( 0.0, vViewDir.y ) );\n}\n#define g_cubeFaces\t\t\t\t\t6.0\n#define g_cubeVerticesPerFace\t\t( 2.0 * 3.0 )\n#define g_cubeVertexCount \t\t\t( g_cubeVerticesPerFace * g_cubeFaces )\n\n//                   6          7\n//                    +----------+\n//                   /|         /|\n//                2 / |       3/ |\n//                 +----------+  |\n//                 |  |       |  |\n//      Y   Z      | 4|       | 5|\n//                 |  +-------|--+\n//      ^ /        | /        | /\n//      |/        0|/        1|/\n//      +--> X     +----------+\n  \nvec3 GetCubeVertex( float fVertexIndex )\n{\n\tvec3 fResult = vec3( 1.0 );\n  \n  \tfloat f = fVertexIndex / 8.0;\n  \tif ( fract( f * 4.0 ) < 0.5 )\n    {\n    \tfResult.x = -fResult.x;\n    }\n  \n  \tif ( fract( f * 2.0 ) < 0.5 )\n    {\n    \tfResult.y = -fResult.y;\n    }\n\n  \tif ( fract( f ) < 0.5 )\n    {\n    \tfResult.z = -fResult.z;\n    }\n  \n  \treturn fResult;\n}\n\n\nvoid GetCubeVertex( const float vertexIndex, const mat4 mat, out vec3 vWorldPos, out vec3 vWorldNormal )\n{\n  \tfloat fFaceIndex = floor( vertexIndex / g_cubeFaces );\n\n  \tvec3 v0, v1, v2, v3;\n  \n  \tif ( fFaceIndex < 0.5 )\n    {\n      \tv0 = GetCubeVertex( 0.0 );\n      \tv1 = GetCubeVertex( 2.0 );\n      \tv2 = GetCubeVertex( 3.0 );\n      \tv3 = GetCubeVertex( 1.0 );\n    }\n  \telse if ( fFaceIndex < 1.5 )\n    {\n      \tv0 = GetCubeVertex( 5.0 );\n      \tv1 = GetCubeVertex( 7.0 );\n      \tv2 = GetCubeVertex( 6.0 );\n      \tv3 = GetCubeVertex( 4.0 );\n    }\n  \telse if ( fFaceIndex < 2.5 )\n    {\n      \tv0 = GetCubeVertex( 1.0 );\n      \tv1 = GetCubeVertex( 3.0 );\n      \tv2 = GetCubeVertex( 7.0 );\n      \tv3 = GetCubeVertex( 5.0 );\n    }\n  \telse if ( fFaceIndex < 3.5 )\n    {\n      \tv0 = GetCubeVertex( 4.0 );\n      \tv1 = GetCubeVertex( 6.0 );\n      \tv2 = GetCubeVertex( 2.0 );\n      \tv3 = GetCubeVertex( 0.0 );\n    }\n  \telse if ( fFaceIndex < 4.5 )\n    {\n      \tv0 = GetCubeVertex( 2.0 );\n      \tv1 = GetCubeVertex( 6.0 );\n      \tv2 = GetCubeVertex( 7.0 );\n      \tv3 = GetCubeVertex( 3.0 );\n    }\n  \telse\n    {\n      \tv0 = GetCubeVertex( 1.0 );\n      \tv1 = GetCubeVertex( 5.0 );\n      \tv2 = GetCubeVertex( 4.0 );\n      \tv3 = GetCubeVertex( 0.0 );\n    }\n  #if 0\n  \tv0 = (vec4(v0, 1) * mat).xyz;\n  \tv1 = (vec4(v1, 1) * mat).xyz;\n  \tv2 = (vec4(v2, 1) * mat).xyz;\n  \tv3 = (vec4(v3, 1) * mat).xyz;\n  #else\n  \tv0 = (mat * vec4(v0, 1)).xyz;\n  \tv1 = (mat * vec4(v1, 1)).xyz;\n  \tv2 = (mat * vec4(v2, 1)).xyz;\n  \tv3 = (mat * vec4(v3, 1)).xyz;\n  #endif\n  \tfloat fFaceVertexIndex = mod( vertexIndex, 6.0 );\n  \n  \tif ( fFaceVertexIndex < 0.5 )\n    {\n\t  \tvWorldPos = v0;\n    }\n  \telse if ( fFaceVertexIndex < 1.5 )\n    {\n\t  \tvWorldPos = v1;\n    }\n  \telse if ( fFaceVertexIndex < 2.5 )\n    {\n\t  \tvWorldPos = v2;\n    }\n  \telse if ( fFaceVertexIndex < 3.5 )\n    {\n\t  \tvWorldPos = v0;\n    }\n  \telse if ( fFaceVertexIndex < 4.5 )\n    {\n\t  \tvWorldPos = v2;\n    }\n  \telse\n    {\n\t  \tvWorldPos = v3;\n    }\n  \n  \tvWorldNormal = normalize( cross( v1 - v0, v2 - v0 ) );  \n}\n\n\nvec3 GetSunLighting( const vec3 vNormal )\n{\n  \tvec3 vLight = -GetSunDir();\n  \n  \tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\n \t  \n  \treturn gSunColor * NdotL;\n}\n\n\nvec3 GetSunSpec( const vec3 vPos, const vec3 vNormal, const vec3 vCameraPos )\n{\n  \tvec3 vLight = -GetSunDir();\n\n  \tvec3 vView = normalize( vCameraPos - vPos );\n  \n  \tvec3 vH = normalize( vView - vLight );\n  \n  \tfloat NdotH = max( 0.0, dot( vNormal, vH ) );\n  \tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\n \n  \tfloat f = mix( 0.01, 1.0, pow( 1.0 - NdotL, 5.0 ) );\n  \n  \treturn gSunColor * pow( NdotH, 20.0 ) * NdotL * f * 4.0;\n}\n\n\nvec3 GetSkyLighting( const vec3 vNormal )\n{\n  \tvec3 vSkyLight = normalize( vec3( -1.0, -2.0, -0.5 ) );\n  \n  \tfloat fSkyBlend = vNormal.y * 0.5 + 0.5;\n \n  \treturn mix( gSkyBottom, gSkyTop, fSkyBlend );\n}\n\n\nvoid GenerateCubeVertex( const float fCubeId, const float vertexIndex, const mat4 mat, const vec4 vCubeCol, const vec3 vCameraPos, out SceneVertex outSceneVertex )\n{  \n  vec3 vNormal;\n  float glow = mod(fCubeId, 2.);\n\n  GetCubeVertex( vertexIndex, mat, outSceneVertex.vWorldPos, vNormal );\n\n  outSceneVertex.vColor = vec4(0,0,0,1);\n\n  float h = outSceneVertex.vWorldPos.y - gFloorHeight;\n  outSceneVertex.vColor.xyz += GetSkyLighting( vNormal );\n  outSceneVertex.vColor.xyz *= mix( 1.0, fAOAmount, clamp( h, 0.0, 1.0 ) );\n\n  outSceneVertex.vColor.xyz += GetSunLighting( vNormal );\n\n  outSceneVertex.vColor.xyz *= vCubeCol.rgb;      \n\n  outSceneVertex.vColor.xyz += GetSunSpec( outSceneVertex.vWorldPos, vNormal, vCameraPos );\n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  #if 0\n  return mat4(\n    1, 0, 0, trans[0],\n    0, 1, 0, trans[1],\n    0, 0, 1, trans[2],\n    0, 0, 0, 1);\n  #else\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n  #endif\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat inRange(float v, float minV, float maxV) {\n  return step(minV, v) * step(v, maxV);\n}\n\nfloat at(float v, float target) {\n  return inRange(v, target - 0.1, target + 0.1);\n}\n\n\nvoid GetCubePosition( float fVertexId, float fCubeId, out mat4 mat, out vec4 vCubeCol, out float snd)\n{  \n  \tfloat fSeed = fCubeId;\n  \tfloat fPositionBase = fCubeId;\n  \tfloat fSize = 1.0;\n\n  \tvec3 vCubeOrigin = vec3( 0.0, 0.0, 0.0 );\n\n    float posId = floor(fCubeId / 4.);\n    float side = m1p1(mod(floor(fCubeId / 2.), 2.));\n    float across = 32.;\n    float down = 20.;\n    float u = mod(posId, across) / across;\n    float v = floor(posId / across) / down;\n    float lng = u * PI * 2.;\n    float lat = v * PI;\n\n    float uu = abs(m1p1(u));\n    float ur = uu; //cos(PI * -0.25) * u + sin(PI * -0.25) * v;\n    float vr = v; //sin(PI * -0.25) * v  - cos(PI * -0.25) * u;\n    snd = texture2D(sound, vec2(mix(0.05, 0.25, ur), vr * 0.05)).a;\n    float glow = mod(fCubeId, 2.);\n    float glowScale = pow(snd, 5.) * glow * 6.;\n    //vCubeOrigin.z += pow(snd, 10.0) * 10.0;\n    float fScale = 0.1 + glowScale * 0.2;//mix(0.1, 0.6, sin(lat)) * snd * 1.02;\n    vCubeOrigin.x = side * 6. * (1. - pow(snd, 5.) * 2.);\n    vCubeOrigin.y = m1p1(v) * 10.;\n    vCubeOrigin.z = m1p1(u) * 10.; \n  \n    float axisId = floor(fVertexId / 12.);\n    \n  \n    mat  = ident();\n // \tmat *= rotZ(lng);\n // \tmat *= rotY(lat);\n    mat *= trans(vCubeOrigin);\n    mat *= scale(vec3(\n      fScale * mix(1., 0.33, glow * at(axisId, 1.)), \n      fScale * mix(1., 0.33, glow * at(axisId, 2.)),\n      fScale * mix(1., 0.33, glow * at(axisId, 0.))));\n  \n  \tvec3 vRandCol;\n\n    float s2 = texture2D(sound, vec2(mix(0.015, 0.015, u), v * 0.1)).a;\n  \n    vCubeCol.xyz = mix(vec3(0.0), vec3(1,1,1), pow(s2, 40.0));  \n    vCubeCol.xyz = mix(vCubeCol.xyz, vec3(1,0,0), step(0.95,s2));\n    vCubeCol.xyz = vec3(0,0,1);\n\n  #if 0\n    vCubeCol.xyz = hsv2rgb(vec3(axisId / 3., 1, 1));\n    vCubeCol.xyz = \n      at(axisId, 0.) * vec3(1,1,0) * 1. +\n      at(axisId, 1.) * vec3(1,0,1) * 1. + \n      at(axisId, 2.) * vec3(0,1,1) * 1. ;\n  #endif\n}\n\n\nvoid main()\n{ \n  \tSceneVertex sceneVertex;\n  \n  \tvec2 vMouse = mouse;\n  \n  \tfloat fov = 1.5;\n  \n  \tfloat animTime = time;\n  \n  \tfloat orbitAngle = animTime * 0.3456 + 4.0;\n  \tfloat elevation = -2.2 + (sin(animTime * 0.223 - PI * 0.5) * 0.5 + 0.5) * 0.5;\n  \tfloat fOrbitDistance = 25.0 + (cos(animTime * 0.2345) * 0.5 + 0.5 ) * 10.0;\n  \n  \tvec3 vCameraTarget = vec3( 0.0, 1.0, 0.0 );\n  \tvec3 vCameraPos = vCameraTarget + vec3( sin(orbitAngle) * cos(elevation), sin(elevation * 1.11), cos(orbitAngle * 0.97) * cos(elevation) ) * fOrbitDistance;\n  \tvec3 vCameraUp = vec3( 0.1, 1.0, 0.0 );\n  \n  \tvec3 vCameraForwards = normalize(vCameraTarget - vCameraPos);\n  \n  \tmat3 mCamera;\n    GetMatrixFromZY( vCameraForwards, normalize(vCameraUp), mCamera );\n  \n  \tfloat vertexIndex = vertexId;\n  \n  \n    float fCubeId = floor( vertexIndex / g_cubeVertexCount );\n    float fCubeVertex = mod( vertexIndex, g_cubeVertexCount );\n\n      mat4 mCube;\n      vec4 vCubeCol;\n      float snd;\n\n      GetCubePosition( fCubeVertex, fCubeId, mCube, vCubeCol, snd );\n\n      GenerateCubeVertex( fCubeId, fCubeVertex, mCube, vCubeCol, vCameraPos, sceneVertex );\n\n\n    // Fianl output position\n\tvec3 vViewPos = sceneVertex.vWorldPos;\n    vViewPos -= vCameraPos;\n  \tvViewPos =  vViewPos * mCamera;\n  \t\n  \tvec2 vFov = vec2( 1.0, resolution.x / resolution.y ) * fov;\n  \tvec2 vScreenPos = vViewPos.xy * vFov;\n\n\tgl_Position = vec4( vScreenPos.xy, -1.0, vViewPos.z );\n    \n    float glow = mod(fCubeId, 2.);\n  \n  \t// Final output color\n  \tfloat fExposure = min( gExposure, time * 0.1 );\n  \tvec4 vFinalColor = vec4(sqrt( vec3(1.0) - exp2( sceneVertex.vColor.xyz * -fExposure ) ), sceneVertex.vColor.a);\n    vFinalColor = mix(vFinalColor, vec4(1,1,1,0.9), glow);\n  \n  \tv_color = vec4(vFinalColor.xyz * vFinalColor.a, vFinalColor.a);\n}"
  },
  "screenshotURL": "data/images/images-y4cjt7x163oumppk0-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "388"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "WeX5egpaAqGkMhfzk",
  "unlisted": false,
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}