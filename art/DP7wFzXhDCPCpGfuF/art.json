{
  "_id": "DP7wFzXhDCPCpGfuF",
  "owner": {
    "_id": "imKH8hHM6p6ZTmGEi",
    "createdAt": {
      "$date": "1448575381674"
    },
    "username": "sap",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/bd1ffaa5c21bfd6fb5a36cfbb45b8fa6?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1448751371138"
  },
  "modifiedAt": {
    "$date": "1448812233590"
  },
  "origId": null,
  "name": "hypercube",
  "rank": "1.2677843186409063",
  "private": false,
  "username": "sap",
  "settings": {
    "num": 64,
    "mode": "LINES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define TAU radians( 360. )\n#define PI radians( 180. )\n#define DEG2RAD 0.0174532925199433\n\n/*\n  http://steve.hollasch.net/thesis/\n*/\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 cross(vec4 u, vec4 v, vec4 w)\n{\n    float a, b, c, d, e, f;\n\n    a = (v[0] * w[1]) - (v[1] * w[0]);\n    b = (v[0] * w[2]) - (v[2] * w[0]);\n    c = (v[0] * w[3]) - (v[3] * w[0]);\n    d = (v[1] * w[2]) - (v[2] * w[1]);\n    e = (v[1] * w[3]) - (v[3] * w[1]);\n    f = (v[2] * w[3]) - (v[3] * w[2]);\n\n    return vec4(\n          (u[1] * f) - (u[2] * e) + (u[3] * d),\n        - (u[0] * f) + (u[2] * c) - (u[3] * b),\n          (u[0] * e) - (u[1] * c) + (u[3] * a),\n        - (u[0] * d) + (u[1] * b) - (u[2] * a)\n    );\n}\n\nmat4 rot4xy(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4(\n        c, s, 0, 0,\n       -s, c, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1);\n}\n\nmat4 rot4yz(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4(\n        1, 0, 0, 0,\n        0, c, s, 0,\n        0, -s, c, 0,\n        0, 0, 0, 1);\n}\n\nmat4 rot4zx(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4(\n        c, 0, -s, 0,\n        0, 1, 0, 0,\n        s, 0, c, 0,\n        0, 0, 0, 1);\n}\n\nmat4 rot4xw(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4(\n        c, 0, 0, s,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        -s, 0, 0, c);\n}\n\nmat4 rot4yw(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4(\n        1, 0, 0, 0,\n        0, c, 0, -s,\n        0, 0, 1, 0,\n        0, s, 0, c);\n}\n\nmat4 rot4zw(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, c, -s,\n        0, 0, s, c);\n}\n\nmat4 lookAt4(vec4 from, vec4 to, vec4 up, vec4 over)\n{\n  vec4 d = normalize(to-from);\n  vec4 a = normalize(cross(up, over, d));\n  vec4 b = normalize(cross(up, d, a));\n  vec4 c = cross(d, a, b);\n  return mat4(a, b, c, d);\n}\n\n// from 4d to 3d space.\nvec4 project4(vec4 vertex, vec4 from, float fov, mat4 transform)\n{\n  float  S,T;    // Divisor Values\n  vec4 V;      // Scratch Vector\n\n  T = 1.0 / tan (fov * 0.5 * DEG2RAD);\n  V = vertex - from;\n  S = T / dot (V, transform[3]);\n\n  return vec4(\n    S * dot (V, transform[0]),\n    S * dot (V, transform[1]),\n    S * dot (V, transform[2]),\n    0\n  );\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(0.5 * fov * DEG2RAD);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nvec4 hypercube(float id)\n{\n  id = mod(id, 16.0);\n  if (id == 0.) return vec4( 1,  1,  1,  1);\n  if (id == 1.) return vec4(-1,  1,  1,  1);\n  if (id == 2.) return vec4( 1, -1,  1,  1);\n  if (id == 3.) return vec4( 1,  1, -1,  1);\n  if (id == 4.) return vec4( 1,  1,  1, -1);\n  if (id == 5.) return vec4(-1, -1,  1,  1);\n  if (id == 6.) return vec4(-1,  1, -1,  1);\n  if (id == 7.) return vec4(-1,  1,  1, -1);\n  if (id == 8.) return vec4( 1, -1, -1,  1);\n  if (id == 9.) return vec4( 1, -1,  1, -1);\n  if (id == 10.)return vec4( 1,  1, -1, -1);\n  if (id == 11.)return vec4(-1, -1, -1,  1);\n  if (id == 12.)return vec4(-1, -1,  1, -1);\n  if (id == 13.)return vec4( 1, -1, -1, -1);\n  if (id == 14.)return vec4(-1,  1, -1, -1);\n  if (id == 15.)return vec4(-1, -1, -1, -1);\n  return vec4(0);\n}\n\nvec4 hypercube_lines(float id)\n{\n  id = mod(id, 64.0);\n\n  // outer cuber\n  if (id == 00.) return hypercube(0.);\n  if (id == 01.) return hypercube(3.);\n  if (id == 02.) return hypercube(3.);\n  if (id == 03.) return hypercube(8.);\n  if (id == 04.) return hypercube(8.);\n  if (id == 05.) return hypercube(2.);\n  if (id == 06.) return hypercube(2.);\n  if (id == 07.) return hypercube(0.);\n  if (id == 08.) return hypercube(0.);\n  if (id == 09.) return hypercube(4.);\n  if (id == 10.) return hypercube(4.);\n  if (id == 11.) return hypercube(10.);\n  if (id == 12.) return hypercube(10.);\n  if (id == 13.) return hypercube(3.);\n  if (id == 14.) return hypercube(8.);\n  if (id == 15.) return hypercube(13.);\n  if (id == 16.) return hypercube(2.);\n  if (id == 17.) return hypercube(9.);\n  if (id == 18.) return hypercube(4.);\n  if (id == 19.) return hypercube(9.);\n  if (id == 20.) return hypercube(10.);\n  if (id == 21.) return hypercube(13.);\n  if (id == 22.) return hypercube(13.);\n  if (id == 23.) return hypercube(9.);\n\n  // inner cube\n  if (id == 24.) return hypercube(1.);\n  if (id == 25.) return hypercube(6.);\n  if (id == 26.) return hypercube(6.);\n  if (id == 27.) return hypercube(11.);\n  if (id == 28.) return hypercube(11.);\n  if (id == 29.) return hypercube(5.);\n  if (id == 30.) return hypercube(5.);\n  if (id == 31.) return hypercube(1.);\n  if (id == 32.) return hypercube(7.);\n  if (id == 33.) return hypercube(14.);\n  if (id == 34.) return hypercube(14.);\n  if (id == 35.) return hypercube(15.);\n  if (id == 36.) return hypercube(15.);\n  if (id == 37.) return hypercube(12.);\n  if (id == 38.) return hypercube(12.);\n  if (id == 39.) return hypercube(7.);\n  if (id == 40.) return hypercube(1.);\n  if (id == 41.) return hypercube(7.);\n  if (id == 42.) return hypercube(6.);\n  if (id == 43.) return hypercube(14.);\n  if (id == 44.) return hypercube(11.);\n  if (id == 45.) return hypercube(15.);\n  if (id == 46.) return hypercube(5.);\n  if (id == 47.) return hypercube(12.);\n\n  // w\n  if (id == 48.) return hypercube(2.);\n  if (id == 49.) return hypercube(5.);\n  if (id == 50.) return hypercube(8.);\n  if (id == 51.) return hypercube(11.);\n  if (id == 52.) return hypercube(13.);\n  if (id == 53.) return hypercube(15.);\n  if (id == 54.) return hypercube(9.);\n  if (id == 55.) return hypercube(12.);\n  if (id == 56.) return hypercube(0.);\n  if (id == 57.) return hypercube(1.);\n  if (id == 58.) return hypercube(3.);\n  if (id == 59.) return hypercube(6.);\n  if (id == 60.) return hypercube(10.);\n  if (id == 61.) return hypercube(14.);\n  if (id == 62.) return hypercube(4.);\n  if (id == 63.) return hypercube(7.);\n  return vec4(0);\n}\n\nvoid main()\n{\n  vec4 from4  = vec4(4, 0, 0, 0);\n  vec4 to4    = vec4(0, 0, 0, 0);\n  vec4 up4    = vec4(0, 1, 0, 0);\n  vec4 over4  = vec4(0, 0, 1, 0);\n\n  vec3 from3  = vec3(cos(PI * mouse.x), 0.3, sin(PI * mouse.x));\n  vec3 to3    = vec3(0, 0, 0);\n  vec3 up3    = vec3(0, 1, 0);\n\n  mat4 m1 = ident();\n  m1 *= lookAt4(from4, to4, up4, over4);\n  m1 *= rot4xy(time * 0.1 * TAU);\n\n  vec4 v4 = hypercube_lines(vertexId);\n  vec4 v3 = project4(v4, from4, 45.0, m1);\n  \n  mat4 m2 = ident();\n  m2 *= lookAt(from3, to3, up3);\n  m2 *= persp(45., resolution.x / resolution.y, 0.1, 60.);\n  vec4 v = v3 * m2 * 1.5;\n\n  gl_Position = vec4(v.xy, 0, 1);\n  v_color = vec4(0);\n  v_color += vec4(vec3(1,0,0)*(1. - v4.x), 1);\n  v_color += vec4(vec3(0,0,1)*(v4.x), 1);\n}\n"
  },
  "screenshotURL": "data/images/images-umfpcyroohixkydph-thumbnail.jpg",
  "hasSound": "",
  "views": "157",
  "likes": "1",
  "revisionId": "BLFhcEy8hZv9end7F",
  "avatarUrl": "https://secure.gravatar.com/avatar/bd1ffaa5c21bfd6fb5a36cfbb45b8fa6?default=retro&size=200"
}