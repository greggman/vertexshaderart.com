{
  "_id": "Nd7RLTNMwo9xcqBgZ",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1523538327500"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1523538327500"
    }
  },
  "origId": "rpeFEbrt3ozGdCvBQ",
  "name": "spiral blue",
  "notes": "http://glslsandbox.com/e#38484.0",
  "rank": {
    "$numberDouble": "1.7615089602844327"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":50000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/user-158087960/studiomix-douzirec-06-2007-flac\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"//Created by K Machine from http://glslsandbox.com/e#46283.0\\nvec2 surfacePosition;\\nvec4 simFragCoord;\\nvec2 vertexResolution = resolution;\\n\\n//precision  mediump float;\\n\\n\\n//uniform  float time;\\n//uniform  vec2 mouse;\\n//uniform  vec2 vertexResolution;\\n\\nvec2 R = vertexResolution;\\nvec2 Offset;\\nvec2 Scale=vec2(0.001,0.002);\\nfloat Saturation = 0.8; // 0 - 1;\\n\\n\\nvec3 lungth(vec2 x,vec3 c){\\n       return vec3(length(x+c.r),length(x+c.g),length(c.b));\\n}\\n\\nvoid main( void ) {float finalDesiredPointSize = 3.;\\nfloat maxFinalSquareSideSize = floor(sqrt(vertexCount));\\nfloat finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\\nfloat maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\\nvertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\\nfloat finalVertexCount = vertexResolution.x*vertexResolution.y;\\nfloat finalVertexId = mod(vertexId,finalVertexCount);\\nfloat x = mod(finalVertexId, vertexResolution.x);\\nfloat y = floor(finalVertexId / vertexResolution.x);\\nsimFragCoord = vec4(x,y,1.,1.);//simfragCoord will replace the gl_FragCoord of fragment shader\\nfloat u_i = (x /vertexResolution.x);\\nfloat v_i = (y /vertexResolution.y);\\nfloat sizeFactor = finalDesiredPointSize*vertexResolution.x/resolution.x;\\nfloat ux = sizeFactor*(u_i - 0.5);\\nfloat vy = sizeFactor*(v_i - 0.5);\\ngl_PointSize = finalDesiredPointSize;\\ngl_Position = vec4(ux, vy, 0., 1.);\\nsurfacePosition = vec2(ux,vy);\\n\\n\\t\\n\\tvec2 position = (simFragCoord.xy - vertexResolution * .5) / vertexResolution.yy;\\n\\tfloat th = atan(position.y, position.x) / (1.0 * 3.1415926);\\n\\tfloat dd = length(position) + 0.005;\\n\\tfloat d = 0.5 / dd + time;\\n\\t\\n    \\tvec2 x2 = simFragCoord.xy;\\n   \\tx2=x2*Scale*R/R.x;\\n    \\tx2+sin(x2.yx*sqrt(vec2(1,9)))/1.;\\n\\tx2+=sin(x2.yx*sqrt(vec2(73,5)))/5.;\\n    \\tx2+=sin(x2.yx*sqrt(vec2(93,7)))/3.;\\n\\t\\n\\tvec3 uv = vec3(th + d, th - d, th + sin(d) * 0.45);\\n\\tfloat a = 0.5 + cos(uv.x * 3.1415926 * 2.0) * 0.5;\\n\\tfloat b = 0.5 + cos(uv.y * 3.1415926 * 2.0) * 0.5;\\n\\tfloat c = 0.5 + cos(uv.z * 3.1415926 * 6.0) * 0.5;\\n\\tvec3 color = \\tmix(vec3(0.1, 0.5, 0.5), \\tvec3(0.1, 0.1, 0.2),  pow(a, 0.2)) * 3.;\\n\\tcolor += \\tmix(vec3(0.8, 0.2, 1.0), \\tvec3(0.1, 0.1, 0.2),  pow(b, 0.1)) * 0.75;\\n\\t//color += \\tmix(c2, \\t\\t\\tvec3(0.1, 0.2, 0.2),  pow(c, 0.1)) * 0.75;\\n\\n\\tv_color = vec4( (color * dd), 1.0);\\n}\"}",
  "screenshotURL": "data/images/images-yq7e5jsrccm6qx4oh-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "KHuSMGtMPGNvrRLAh"
}