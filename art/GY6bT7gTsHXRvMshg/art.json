{
  "_id": "GY6bT7gTsHXRvMshg",
  "owner": {
    "_id": "eRW4yDxawZyEw54rX",
    "createdAt": {
      "$date": {
        "$numberLong": "1446229516677"
      }
    },
    "username": "johan",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/d01877a458be485c665b6ee7c1376d7b?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1446229802719"
    }
  },
  "origId": null,
  "name": "wip",
  "username": "johan",
  "settings": {
    "num": 56549,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI 3.14159\n#define NUM_SEGMENTS 21.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define OCTAVES  8\n\nconst float DIM_X = 128.;\nconst float DIM_Y = 64.;\n\nconst float BG_DIM_X = 8.;\nconst float BG_DIM_Y = 6.;\n//#define FIT_VERTICAL\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 hash(vec3 p){\n  return vec3(0.);\n}\n\nfloat rand(in vec2 co){\n   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand2(in vec2 co){\n   return fract(cos(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand3(in vec3 co){\n   return fract(sin(dot(co.xyz ,vec3(12.9898,78.233,213.576))) * 43758.5453);\n}\n\nfloat valueNoiseSimple3D(in vec3 vl) {\n    const vec2 helper = vec2(0., 1.);\n    vec3 grid = floor(vl);\n    vec3 interp = smoothstep(vec3(0.), vec3(1.), fract(vl));\n    \n    float interpY0 = mix(mix(rand3(grid),\n                         \t rand3(grid + helper.yxx),\n                         \t interp.x),\n                        mix(rand3(grid + helper.xyx),\n                         \trand3(grid + helper.yyx),\n                         \tinterp.x),\n                        interp.y);\n    \n    \n    float interpY1 = mix(mix(rand3(grid + helper.xxy),\n                         \t rand3(grid + helper.yxy),\n                         \tinterp.x),\n                        mix(rand3(grid + helper.xyy),\n                         \trand3(grid + helper.yyy),\n                         \tinterp.x),\n                        interp.y);\n    \n    return -1. + 2.*mix(interpY0, interpY1, interp.z);\n}\n\nfloat fractalNoise(in vec3 vl) {\n    const float persistance = 2.;\n    const float persistanceA = 2.;\n    float amplitude = .5;\n    float rez = 0.0;\n    float rez2 = 0.0;\n    vec3 p = vl;\n    \n    for (int i = 0; i < OCTAVES / 2; i++) {\n        rez += amplitude * valueNoiseSimple3D(p);\n        amplitude /= persistanceA;\n        p *= persistance;\n    }\n    \n    float h = smoothstep(0., 1., vl.y*.5 + .5 );\n    if (h > 0.01) { // small optimization, since Hermit polynom has low front at the start\n        // God is in the details\n        for (int i = OCTAVES / 2; i < OCTAVES; i++) {\n            rez2 += amplitude * valueNoiseSimple3D(p);\n            amplitude /= persistanceA;\n            p *= persistance;\n        }\n        rez += mix(0., rez2, h);\n    }\n    \n    return rez;\n}\n\n\nvoid GetQuadInfo( const float vertexIndex, out float x, out float y, out float quadId )\n{\n  float twoTriVertexIndex = mod( vertexIndex, 6.0 );\n  float triVertexIndex = mod( vertexIndex, 3.0 );\n  float quadTriIndex = floor(twoTriVertexIndex*0.334);\n  float quadVertexIndex = triVertexIndex + quadTriIndex;\n\n  x = mod(quadVertexIndex, 2.);\n  y = floor(quadVertexIndex * 0.5);\n \n  quadId = floor( vertexIndex / 6.0 );\n}\n\n//todo: DEFINE PROJECTION\nmat4 GetProjection(){\n  float near = 0.01;\n  float far = 10.;\n  float aspectRatio = resolution.x / resolution.y;\n  float fov = 2.;\n  float h = cos(0.5*fov)/sin(0.5*fov);\n  float w = h * aspectRatio;\n  float a =  - (near+far)/(near - far);\n  float b = - ((2.*far*near)/(far-near));\n\n  mat4 m = mat4( \n    w, 0, 0, 0,\n    0, h, 0, 0,\n    0, 0, a, 1,\n    0, 0, b, 0\n  );\n    return m;\n}\n\nvoid ProcessBackdrop( float vertexIndex )\n{\n  float quadX, quadY, quadId;\n  \n  GetQuadInfo( vertexIndex, quadX, quadY, quadId );\n\n  //vec2 vDim = vec2( 8.0, 8.0 );\n  \n  vec2 vUV;\n  \n  vec2 quadTile;\n  quadTile.x = mod(quadId, BG_DIM_X);\n  quadTile.y = floor(quadId / BG_DIM_X);\n  \n  vUV.x = quadX + quadTile.x;\n  vUV.y = quadY + quadTile.y;\n\n  vUV /= vec2(BG_DIM_X, BG_DIM_Y);\n  \n  gl_Position = vec4( vUV.xy * 2.0 - 1.0, 0.99, 1.0 );\n\n  v_color = vec4( vUV.xy, 0., 1.0 );\n}\n\nvoid ProcessCylinder(float vertexIndex )\n{\n  float quadX, quadY, quadId;\n  \n  GetQuadInfo( vertexIndex, quadX, quadY, quadId );\n\n  vec2 vDim = vec2(DIM_X, DIM_Y);\n  \n  vec2 vUV;\n  \n  vec2 quadTile;\n  quadTile.x = mod(quadId, vDim.x);\n  quadTile.y = floor(quadId / vDim.x);\n  \n  vUV.x = quadX + quadTile.x;\n  vUV.y = quadY + quadTile.y;\n\n  vUV /= vDim;\n  \n  float phase = vUV.x * PI * 2.;\n  vec3 pos;\n  float r = smoothstep(1.,0.,vUV.y);\n  r += 0.5;\n  r *= 0.25;\n  \n  pos.x = sin(phase);\n  pos.y =  vUV.y - 0.5;\n  pos.z = cos(phase);\n  pos.xz *= r;\n  \n  pos.z += 1.;\n  \n  pos += fractalNoise(pos*10.)* 0.05;\n  \n  \n  gl_Position = GetProjection() * vec4(pos, 1.0 );\n\n  //vec3 vPos = vec3( vUV.xy * 2.0 - 1.0, 2.0 );\n  //vPos.y *= resolution.x / resolution.y;\n\n  v_color = vec4( vUV.xy, 0., 1.0 );\n}\n   \n\nvoid main() {\n  float vid = vertexId;\n float bgCount = BG_DIM_X * BG_DIM_Y * 6.;\n  \n  \n  \tif( vid < bgCount )\n    {\n\t\tProcessBackdrop(vid);    \n    }\n   else \n  {\n    \tvid -= bgCount;\n    \tfloat cylCount = DIM_X * DIM_Y * 6.;\n    \tif(vid < cylCount) ProcessCylinder(vid); \n    \t//ProcessCylinder(vid); \n    \t//ProcessCylinder(vertexId - bgCount);\n  }\n  /*\n  else if(vertexId - bgCount< DIM_X * DIM_Y * 6.)\n  {\n    ProcessCylinder(vertexId-bgCount);  \n  }*/\n\n \n}"
  },
  "screenshotURL": "data/images/images-o9ijcc82vz6w3tsh0-thumbnail.jpg",
  "views": {
    "$numberInt": "86"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "BBr576Ayxyvy6vg2x",
  "modifiedAt": {
    "$date": {
      "$numberLong": "1446239989110"
    }
  },
  "rank": {
    "$numberDouble": "1.604776213188471"
  },
  "avatarUrl": "https://secure.gravatar.com/avatar/d01877a458be485c665b6ee7c1376d7b?default=retro&size=200"
}