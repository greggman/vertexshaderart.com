{
  "_id": "YbA3f6xnjbmXzkwHx",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": 1493741221077
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": 1503981621743
  },
  "modifiedAt": {
    "$date": 1503981621743
  },
  "origId": "kRDzJyojeaeAei2M4",
  "name": "Kringu",
  "notes": "",
  "rank": 10.556329750509324,
  "private": false,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 40000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/samuraimusicgroup/homemade-weapons-negative-space-remixed-smde006",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "/*\n\n┬  ┬┌─┐┬─┐┌┬┐┌─┐─┐ ┬┌─┐┬ ┬┌─┐┌┬┐┌─┐┬─┐┌─┐┬─┐┌┬┐\n└┐┌┘├┤ ├┬┘ │ ├┤ ┌┴┬┘└─┐├─┤├─┤ ││├┤ ├┬┘├─┤├┬┘ │ \n └┘ └─┘┴└─ ┴ └─┘┴ └─└─┘┴ ┴┴ ┴─┴┘└─┘┴└─┴ ┴┴└─ ┴ \n\ninspired by:\nhttp://codepen.io/xposedbones/full/aOrQVy\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//KDrawmode=GL_TRIANGLES\n//KVerticesNumber=40000\n//KBackGroundColor=vec3(0.,0.,0.);\n\n//for the K Machine\n#define parameter0 0.//KParameter0 0.>>30.\n#define parameter1 1.1//KParameter1 0.>>1.\n#define parameter2 0.1//KParameter2 0.>>1.\n#define parameter3 0.5//KParameter3 0.>>0.5\n#define parameter4 0.//KParameter4 0.>>1.\n#define parameter5 0.//KParameter5 0.>>1.\n#define parameter6 0.//KParameter6 0.>>1.\n\n\n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat p1m1(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\n#define NUM_EDGE_POINTS_PER_CIRCLE 48.\n//#define NUM_SUBDIVISIONS_PER_CIRCLE 16.\n#define NUM_POINTS_PER_DIVISION (NUM_EDGE_POINTS_PER_CIRCLE * 6.)\n#define NUM_POINTS_PER_CIRCLE (NUM_SUBDIVISIONS_PER_CIRCLE * NUM_POINTS_PER_DIVISION) \nvoid getCirclePoint(const float id, const float inner, const float start, const float end, out vec3 pos, out vec4 uvf, out float snd) {\n  float NUM_SUBDIVISIONS_PER_CIRCLE = floor(vertexCount / NUM_POINTS_PER_DIVISION);\n  float edgeId = mod(id, NUM_POINTS_PER_DIVISION);\n  float ux = floor(edgeId / 6.) + mod(edgeId, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float sub = floor(id / NUM_POINTS_PER_DIVISION);\n  float subV = sub / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\n  float level = subV + vy / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\n  float v = 1.;//mix(inner, 1., level);\n  float ringId = sub + vy;\n  float ringV = ringId / NUM_SUBDIVISIONS_PER_CIRCLE;\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float skew = 1. - step(0.5, mod(ringId - 2., 3.));\n  float su = fract(abs(u * 2. - 1.) + time * 0.1);\n  //snd = texture2D(sound, vec2(0.02 + su * 0.10, (1. - ringV) * 0.1)).a;\n  snd = 1.;\n  float ss = 0.8;//mix(0.0, 1.0, pow(snd, 1.0));\n  \n  a += 1. / NUM_EDGE_POINTS_PER_CIRCLE * PI * 2. * 20. * sin(time * 1.) + snd * 7.5;\n  float s = sin(a);\n  float c = cos(a);\n  float z = mix(inner, 2., level) - vy / NUM_SUBDIVISIONS_PER_CIRCLE * 0.1;\n  float x = c * v * z * ss;\n  float y = s * v * z * ss;\n  pos = vec3(x, y, 0.);  \n  uvf  = vec4(floor(edgeId / 6.) / NUM_EDGE_POINTS_PER_CIRCLE, subV, floor(id / 6.), level);\n}\n\n\nvoid main() {\n  float NUM_SUBDIVISIONS_PER_CIRCLE = floor(vertexCount/2. / NUM_POINTS_PER_DIVISION);\n  float fVertexId = mod(vertexId,vertexCount/2.);\n  float circleId = floor(fVertexId / NUM_POINTS_PER_CIRCLE);\n  float pointId = mod(fVertexId, NUM_POINTS_PER_CIRCLE);\n  float sideId = floor(circleId / 2.);\n  float side = mix(-1., 1., step(0.15, mod(circleId, 2.)));\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\n  float cu = circleId / numCircles;\n  vec3 pos;\n  float inner = parameter3;\n  float start = 0.0;\n  float end   = start + parameter2;\n  float snd;\n  vec4 uvfl;\n  getCirclePoint(pointId, inner, start, end, pos, uvfl, snd); \n  \n  mat4 mat = scale(vec3(resolution.y / resolution.x, 1.91, 0.8) * .04 - min(resolution.x / resolution.y, 1.7)); \n  mat *= rotZ((parameter0 + uvfl.y * PI) * time * parameter1);\n  \n  /*\n  if(vertexId>vertexCount/2.)\n    pos.x += 0.5;\n  */\n  if(vertexId>vertexCount/2.)\n    pos.x += (0.5-pos.x);\n  gl_Position = mat * vec4(pos, 1);\n  gl_PointSize = 4.;\n\n  \n    \n  v_color = vec4(parameter4,parameter5, parameter6, 1.);\n//  v_color = mix(v_color.rgba, vec4(1,1,1,1), mod(uvf.z, 2.));\n//  v_color.a = 1.0 - uvf.y;\n//  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\n}"
  },
  "screenshotURL": "data/images/images-hq7sgqfity9trscld-thumbnail.jpg",
  "hasSound": true,
  "views": 364,
  "likes": 3,
  "revisionId": "NfoeRZ9sGJwN2S3bM"
}