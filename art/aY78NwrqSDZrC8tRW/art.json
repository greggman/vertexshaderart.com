{
  "_id": "aY78NwrqSDZrC8tRW",
  "owner": {
    "_id": "ck9o8akC3voRsXXny",
    "createdAt": {
      "$date": {
        "$numberLong": "1549374729066"
      }
    },
    "username": "kcha",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/393683f94ba2c18293b67ab3d3eb6f10?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1552793701983"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1552804576162"
    }
  },
  "origId": "d5q4WZfHWEwTikN2o",
  "name": "tutorial_05",
  "notes": "",
  "rank": {
    "$numberDouble": "1.6587469711450227"
  },
  "private": false,
  "unlisted": true,
  "username": "kcha",
  "avatarUrl": "https://secure.gravatar.com/avatar/393683f94ba2c18293b67ab3d3eb6f10?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/graham-panter/fly-by-light",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0.14901960784313725,
      0.3764705882352941,
      1
    ],
    "shader": "vec3 hsv2rgb(vec3 c){\n  c = vec3(c.x, clamp(c.yz, 0., 1.));\n  vec4 K = vec4(1., 2. / 3., 1. / 3., 3.);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6. - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0., 1.), c.y);\n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\n#define PI radians(180.0)\n\nvec2 getCirclePoint(float id, float numCircleSegments){\n  // id = 0 1 2 3 4 5 6 7 8 9 10 11 12 13\n  //      0 0 0 0 0 0 1 1 1 1  1  1  2  2\n  //      0 1 0 1 0 1 0 1 0 1  0  1  0  1\n  //      0 1 0 1 0 1 1 2 1 2  1  2  2  3\n  float ux = floor(id / 6.) + mod(id, 2.);\n  // id = 0 1 2 3 4 5 6 7 8 9 10 11 12 13\n  //      0 0 1 1 2 2 3 3 4 4  5  5  6  6\n  //      0 0 0 1 1 1 2 2 2 3  3  3  4  4\n  //      0 0 1 0 1 1 1 1 0 1  0  0  0  0\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\n\n  float angle = ux / numCircleSegments * PI * 2.;\n  float c = cos(angle);\n  float s = sin(angle);\n  float radius = vy + 1.;\n  \n  float x = c * radius;\n  float y = s * radius;\n  \n  return vec2(x, y);\n}\n\nvoid main(){\n  float numCircleSegments = 12.;\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\n  \n  float numPointsPerCircle = numCircleSegments * 6.;\n  float circleId = floor(vertexId / numPointsPerCircle);\n  float numCircles = floor(vertexCount / numPointsPerCircle);\n  \n  float sliceId = floor(vertexId / 6.0);\n  float oddSlice = mod(sliceId, 2.0);\n  \n  float down = floor(sqrt(numCircles));\n  float across = floor(numCircles / down);\n  \n  float x = mod(circleId, across);\n  float y = floor(circleId / across);\n  \n  // 0.0 - 1.0\n  float u = x / (across - 1.); // .0, .1, ... , .9, .0, .1, ...\n  float v = y / (across - 1.); // .0, .0, ... , .1, .1, ... \n  \n  float xoff = 0.;//sin(time + y * 0.2) * 0.1;\n  float yoff = 0.;//sin(time + x * 0.3) * 0.2;\n  \n  float ux = u * 2. - 1. + xoff;\n  float vy = v * 2. - 1. + yoff;\n\n  // 0.0-1.0 => -0.5-0.5 => 0.5-0.0-0.5 => 1.0-0.0-1.0\n  float su = abs(u - .5) * 2.;\n  float sv = abs(v - .5) * 2.;\n  float au = abs(atan(su, sv)) / PI;\n  float av = length(vec2(su, sv));\n  float snd = texture2D(sound, vec2(au * .05, av * .25)).a;\n\n  float aspect = resolution.x / resolution.y;\n  float sc = pow(snd + 0.2, 5.) * mix(1.0, 1.2, oddSlice);\n  sc *= 20. / across;\n  \n  vec4 pos = vec4(circleXY, 0, 1);\n  mat4 mat = ident();\n  mat *= scale(vec3(1, aspect, 1));\n  mat *= rotZ(time * 0.2);\n  mat *= trans(vec3(ux, vy, 0) * 1.3);\n  mat *= rotZ(snd * 15. * sign(ux));\n  mat *= uniformScale(0.03 * sc);\n  \n  gl_Position = mat * pos;\n  \n  float soff = 0.; //sin(time + x * y * 0.02) * 5.;\n  \n  float pump = step(0.8, snd);\n  float hue = u * .1 + snd * .2 + time * .2 + sliceId * 0.01;//sin(time + v * 20.) * .05;\n  float sat = mix(0.8, 1.0, pump);//mix(1., 0., av);\n  float val = mix(.4, pow(snd + .2, 5.), pump);//sin(time + v * u * 20.0) * .5 + .5;\n  hue = hue + pump * oddSlice * 0.5 + pump * 0.33;\n  val += oddSlice * pump;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n}\n"
  },
  "screenshotURL": "data/images/images-u2hg2lpfskrmwt5yi-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "5"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "sGcyCWQGi6xv8XvWn"
}