{
  "_id": "vsfaoEsuvT3yZrCRB",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1612795378172"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1612795715707"
    }
  },
  "origId": null,
  "name": "spectrum?",
  "notes": "",
  "rank": {
    "$numberDouble": "1.4304884898857817"
  },
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"mic\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,1,1,1],\"shader\":\"// move your mouse off the code or click UI to hide it\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvoid main() {\\n  float aspect = resolution.x / resolution.y;\\n  float across = floor(sqrt(vertexCount) * aspect);\\n  float down = (vertexCount / across);\\n  \\n  float xId = mod(vertexId, across);\\n  float yId = floor(vertexId / across);\\n  \\n  float u = xId / (across - 1.0);\\n  float v = yId / (down - 1.0);\\n  \\n  float x = u * 2.0 - 1.0;\\n  float y = v * 2.0 - 1.0;\\n  \\n  gl_Position = vec4(x, y, 0, 1);\\n\\n  float s = texture2D(sound, vec2(v * 0.5, 1.0 - u)).a;\\n  \\n  float hue = 0.8 + s * 0.4;\\n  float sat = 1.0;\\n  float val = s;\\n  \\n  gl_PointSize = max(resolution.x / across, resolution.y / down) * 2.;\\n  \\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\\n}\"}",
  "screenshotURL": "data/images/images-5i98d2degr23c0d5x-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "74"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "9Kj2pPSEtaKNKTNx9"
}