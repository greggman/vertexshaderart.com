{
  "_id": "yPDzQv2JwJ9p4NCgQ",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": "1445777397953"
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1449850301598"
  },
  "modifiedAt": {
    "$date": "1499942723993"
  },
  "origId": "WARdzeaiQZaiSy6Hj",
  "name": "wtr",
  "notes": "2017-07-13: Replaced missing music",
  "rank": "1.636014881679679",
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "LINES",
    "sound": "https://soundcloud.com/alvaro-macip/kiss-the-rain-yiruma",
    "lineSize": "CSS",
    "backgroundColor": [
      0.00784313725490196,
      0.18823529411764706,
      0.8431372549019608,
      1
    ],
    "shader": "#define PI radians(180.0)\n#define NUM_SEGMENTS 200.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 1.0\n\nvoid main() {\n  float point = mod(floor(vertexId / 2.0) + mod(vertexId, 2.0) * STEP, NUM_SEGMENTS);\n  float count = floor(vertexId / NUM_POINTS);\n  float offset = count * sin(time * 0.01) + 5.0;\n  float angle = point * PI * 2.0 / NUM_SEGMENTS + offset;\n  float radius = pow(count * 0.00014, 1.0);\n  float c = cos(angle + time) * radius;\n  float s = sin(angle + time) * radius;\n  float v = count / (vertexCount / NUM_SEGMENTS);\n  vec2 m = texture2D(touch, vec2(0, v)).xy;\n  float snd = texture2D(sound, vec2(0.05, v * 1.)).a;\n  float orbitAngle =  snd * PI * 2.;//pow(time + count * 0.25, 0.8);\n  float innerRadius = pow(count * 0.00007, 1.2);\n  float oC = cos(orbitAngle + count * 0.003 + time) * innerRadius;\n  float oS = sin(orbitAngle + count * 0.004 + time * 0.01) * innerRadius;\n\n  vec2 aspect = vec2(1, resolution.x / resolution.y);\n  vec2 xy = vec2(\n      oC + c,\n      oS + s);\n  gl_Position = vec4(xy * aspect * 40. * mix(0.9, 1.1, snd), 0, 1);\n\n  v_color = vec4(0.3, 0.6, 1, 1. - v);\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\n}"
  },
  "screenshotURL": "data/images/images-k4u64p7tdpveznjs6-thumbnail.jpg",
  "hasSound": true,
  "views": "252",
  "likes": "1",
  "revisionId": "RS2sMZGXPe25artKY"
}