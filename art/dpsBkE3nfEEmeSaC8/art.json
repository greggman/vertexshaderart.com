{
  "_id": "dpsBkE3nfEEmeSaC8",
  "owner": {
    "_id": "we8EQkA9drPxGjXJe",
    "createdAt": {
      "$date": {
        "$numberLong": "1634527131008"
      }
    },
    "profile": {
      "first_name": "dumpster",
      "last_name": "synth",
      "avatarUrl": "https://lh3.googleusercontent.com/a/AATXAJySGGmgPbDAoycXt3iXyhYrzMSM8CvuNCRqg0ay=s96-c"
    },
    "username": "dumpster"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1634579513388"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1634593128404"
    }
  },
  "origId": null,
  "name": "triangles - tutorial 5",
  "notes": "",
  "rank": {
    "$numberDouble": "1.2598002806485225"
  },
  "private": false,
  "unlisted": true,
  "username": "dumpster",
  "avatarUrl": "https://lh3.googleusercontent.com/a/AATXAJySGGmgPbDAoycXt3iXyhYrzMSM8CvuNCRqg0ay=s96-c",
  "settings": "{\"num\":4958,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/auvicmusic/tell-the-world-feat-samantha-montenero\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"  \\nvec3 hsv2rgb(vec3 c) {\\n    c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n#define PI radians(180.0)\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\n\\nvec2 getCirclePoint(float id, float numCircleSegments) {\\n  \\n  // float id = vertexId;\\n  \\n  // float ux = floor(id / 6.) + mod(id, 2.);\\n  // float vy = mod(floor(id + 2.) + floor(id + 3.), 2.);\\n  \\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\\n\\n  \\n  float angle = ux / numCircleSegments * PI * 2.;\\n  \\n  float c = cos(angle);\\n  float s = sin(angle);\\n  \\n  float radius = vy + 1.;\\n  \\n  float x = c * radius;\\n  float y = s * radius;\\n  \\n  return vec2(x, y);\\n\\n}\\n\\n// #if 0 \\n\\n  void main() {\\n  \\n  float numCircleSegments = 6.;\\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\\n    \\n  float numPointsPerCircle = numCircleSegments * 6.;\\n  float circleId = floor(vertexId / numPointsPerCircle);\\n  float numCircles = floor(vertexCount / numPointsPerCircle);\\n    \\n  float sliceId = floor(vertexId / 6.0);\\n  float oddSlice = mod(sliceId, 2.);\\n  float down = floor(sqrt(numCircles));\\n  float across = floor(numCircles / down);\\n  \\n  // float pointSize = 5.;\\n  \\n  float x = mod(circleId, across);\\n  float y = floor(circleId / across);\\n  \\n  float u = x/(across-1.);\\n  float v = y/(across-1.);\\n  \\n  float xoff = 0.; // sin(time + y * 0.2) * .1;\\n  float yoff = 0.; // sin(time + x * 0.3) * .2;\\n\\n  float ux = u * 2. - 1. + xoff;\\n  float vy = v * 2. - 1. + yoff;\\n    \\n  float su = abs(u-0.5) * 2.; \\n  float sv = abs(v-0.5) * 2.; \\n  float au = abs(atan(su,sv)) / PI;\\n  float av = length(vec2(su, sv));\\n  float snd = texture2D(sound, vec2(au * 0.05, av * 0.25)).a;\\n   \\n  float aspect = resolution.x / resolution.y; \\n    \\n  float sc = pow(snd + .2, 5.) * mix(1., 1.1, oddSlice);\\n    \\n  vec4 pos = vec4(circleXY, 0, 1);\\n  mat4 mat = ident();\\n  mat *= scale(vec3(1,aspect,1));\\n  mat *= rotZ(time * .1);\\n  mat *= trans(vec3(ux,vy,0) * 1.3);\\n  mat *= rotZ(snd * 20. * sign(ux));\\n  mat *= uniformScale(0.05 * sc);\\n    \\n  // vec2 xy = circleXY * 0.1 * sc + vec2(ux, vy) * 1.3; \\n  // gl_Position = vec4(xy,0,1) * vec4(1,aspect,1,1);\\n   \\n  gl_Position = mat * pos;\\n\\n  float soff = .0; // sin(time + x * y * 0.02) * 5.;\\n   \\n  //  gl_PointSize = pow(snd + .2, 5.) * 30.0 + soff;\\n  //  gl_PointSize *= 20. / across;\\n  //  gl_PointSize *= resolution.x / 600.;\\n  \\n  float pump = step(0.8, snd);\\n  float hue = u * .1 + snd *.2 + time * 0.1;\\n  float sat = 1.; mix(0.3, 1., pump); // mix(28., -8., av);\\n  float val = .1; // mix(1., pow(snd + .2, 5.), pump); //sin(time + v * u * 20.0) * .5 + .5;\\n\\n  hue = hue + pump * oddSlice * .5 + pump * 0.33;\\n  val += oddSlice;\\n   \\n  v_color = vec4(hsv2rgb(vec3(hue,sat,val)),1);\\n \\n}\\n\\n// #endif\"}",
  "screenshotURL": "data/images/images-dc9hcsvj9ngotx6f7-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "5"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "oRyBWSYy6gwQHnbzX"
}