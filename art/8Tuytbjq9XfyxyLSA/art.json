{
  "_id": "8Tuytbjq9XfyxyLSA",
  "owner": {
    "_id": "oCanjNxeHcQ7gDPmW",
    "createdAt": {
      "$date": {
        "$numberLong": "1505499213122"
      }
    },
    "profile": {
      "name": "Zug Zwang",
      "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg"
    },
    "username": "zug"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1565904585795"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1565904585795"
    }
  },
  "origId": "SMeHXTzP7e6vTniKx",
  "name": "escnyc",
  "notes": "Needs lots of camera work but hey, fake hidden line removal 😁",
  "rank": {
    "$numberDouble": "1.7675763507979272"
  },
  "private": false,
  "unlisted": true,
  "username": "zug",
  "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg",
  "settings": "{\"num\":84379,\"mode\":\"TRI_STRIP\",\"sound\":\"https://soundcloud.com/nilbog-the-band/escape-from-new-york-live-at\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n#define parameter0 0.2 //KParameter0 -1.>>1.\\n#define parameter1 0.2 //KParameter1 -1.>>1.\\n//KDrawmode=GL_TRIANGLE_STRIP\\n\\n\\n\\n\\n\\n#define PI radians( 180.0 )\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\nvoid GetQuadInfo( const float vertexIndex, out vec2 quadVertId, out float quadId )\\n{\\n    float twoTriVertexIndex = mod( vertexIndex, 6.0 );\\n    float triVertexIndex = mod( vertexIndex, 3.0 );\\n  \\n    if \\t\\t( twoTriVertexIndex < 0.5 ) quadVertId = vec2( 0.0, 0.0 );\\n    else if\\t( twoTriVertexIndex < 1.5 )\\tquadVertId = vec2( 1.0, 0.0 );\\n    else if ( twoTriVertexIndex < 2.5 )\\tquadVertId = vec2( 0.0, 1.0 );\\n    else if ( twoTriVertexIndex < 3.5 )\\tquadVertId = vec2( 1.0, 0.0 );\\n    else if ( twoTriVertexIndex < 4.5 )\\tquadVertId = vec2( 1.0, 1.0 );\\n    else \\t\\t\\t\\t\\t\\t\\t\\tquadVertId = vec2( 0.0, 1.0 );\\n\\n    quadId = floor( vertexIndex / 6.0 );\\n}\\n\\n\\nvoid GetQuadTileInfo( const vec2 quadVertId, const float quadId, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\\n{\\n    vQuadTileIndex.x = floor( mod( quadId, vDim.x ) );\\n    vQuadTileIndex.y = floor( quadId / vDim.x );\\n\\n  \\tvQuadUV.x = floor(quadVertId.x + vQuadTileIndex.x);\\n    vQuadUV.y = floor(quadVertId.y + vQuadTileIndex.y);\\n\\n    vQuadUV = vQuadUV * (1.0 / vDim);\\n}\\n\\n\\nvoid GetQuadTileInfo( const float vertexIndex, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\\n{\\n  \\tvec2 quadVertId;\\n  \\tfloat quadId;\\n\\tGetQuadInfo( vertexIndex, quadVertId, quadId );  \\n  \\tGetQuadTileInfo( quadVertId, quadId, vDim, vQuadTileIndex, vQuadUV );   \\n}\\n\\n\\nvoid GetMatrixFromZY( const vec3 vZ, const vec3 vY, out mat3 m )\\n{\\n   vec3 vX = normalize( cross( vY, vZ ) );\\n   vec3 vOrthoY = normalize( cross( vZ, vX ) );\\n   m[0] = vX;\\n   m[1] = vOrthoY;\\n   m[2] = vZ;\\n}\\n\\n\\nvoid GetMatrixFromZ( vec3 vZAxis, out mat3 m )\\n{\\n  \\tvec3 vZ = normalize(vZAxis);\\n   \\tvec3 vY = vec3( 0.0, 1.0, 0.0 );\\n  \\tif ( abs(vZ.y) > 0.99 )\\n    {\\n       vY = vec3( 1.0, 0.0, 0.0 );\\n    }\\n  \\tGetMatrixFromZY( vZ, vY, m );\\n}\\n\\n\\n#define g_cubeFaces\\t\\t\\t\\t\\t6.0\\n#define g_cubeVerticesPerFace\\t\\t( 2.0 * 3.0 )\\n#define g_cubeVertexCount \\t\\t\\t( g_cubeVerticesPerFace * g_cubeFaces )\\n\\n//                   6          7\\n//                    +----------+\\n//                   /|         /|\\n//                2 / |       3/ |\\n//                 +----------+  |\\n//                 |  |       |  |\\n//      Y   Z      | 4|       | 5|\\n//                 |  +-------|--+\\n//      ^ /        | /        | /\\n//      |/        0|/        1|/\\n//      +--> X     +----------+\\n  \\nvec3 GetCubeVertex( float fVertexIndex )\\n{\\n\\tvec3 fResult = vec3( 1.0 );\\n  \\n  \\tfloat f = fVertexIndex / 8.0;\\n  \\tif ( fract( f * 4.0 ) < 0.5 )\\n    {\\n    \\tfResult.x = -fResult.x;\\n    }\\n  \\n  \\tif ( fract( f * 2.0 ) < 0.5 )\\n    {\\n    \\tfResult.y = -fResult.y;\\n    }\\n\\n  \\tif ( fract( f ) < 0.5 )\\n    {\\n    \\tfResult.z = -fResult.z;\\n    }\\n  \\n  \\treturn fResult;\\n}\\n\\n\\nvoid GetCubeVertex( const float vertexIndex, out vec3 vWorldPos )\\n{\\n  \\tfloat fFaceIndex = floor( vertexIndex / g_cubeFaces );\\n\\n  \\tvec3 v0, v1, v2, v3;\\n  \\n  \\tif ( fFaceIndex < 0.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 0.0 );\\n      \\tv1 = GetCubeVertex( 2.0 );\\n      \\tv2 = GetCubeVertex( 3.0 );\\n      \\tv3 = GetCubeVertex( 1.0 );\\n    }\\n  \\telse if ( fFaceIndex < 1.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 5.0 );\\n      \\tv1 = GetCubeVertex( 7.0 );\\n      \\tv2 = GetCubeVertex( 6.0 );\\n      \\tv3 = GetCubeVertex( 4.0 );\\n    }\\n  \\telse if ( fFaceIndex < 2.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 1.0 );\\n      \\tv1 = GetCubeVertex( 3.0 );\\n      \\tv2 = GetCubeVertex( 7.0 );\\n      \\tv3 = GetCubeVertex( 5.0 );\\n    }\\n  \\telse if ( fFaceIndex < 3.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 4.0 );\\n      \\tv1 = GetCubeVertex( 6.0 );\\n      \\tv2 = GetCubeVertex( 2.0 );\\n      \\tv3 = GetCubeVertex( 0.0 );\\n    }\\n  \\telse if ( fFaceIndex < 4.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 2.0 );\\n      \\tv1 = GetCubeVertex( 6.0 );\\n      \\tv2 = GetCubeVertex( 7.0 );\\n      \\tv3 = GetCubeVertex( 3.0 );\\n    }\\n  \\telse\\n    {\\n      \\tv0 = GetCubeVertex( 1.0 );\\n      \\tv1 = GetCubeVertex( 5.0 );\\n      \\tv2 = GetCubeVertex( 4.0 );\\n      \\tv3 = GetCubeVertex( 0.0 );\\n    }\\n  \\tfloat fFaceVertexIndex = mod( vertexIndex, 6.0 );\\n  \\n  \\tif ( fFaceVertexIndex < 0.5 )\\n    {\\n\\t  \\tvWorldPos = v0;\\n    }\\n  \\telse if ( fFaceVertexIndex < 1.5 )\\n    {\\n\\t  \\tvWorldPos = v1;\\n    }\\n  \\telse if ( fFaceVertexIndex < 2.5 )\\n    {\\n\\t  \\tvWorldPos = v2;\\n    }\\n  \\telse if ( fFaceVertexIndex < 3.5 )\\n    {\\n\\t  \\tvWorldPos = v0;\\n    }\\n  \\telse if ( fFaceVertexIndex < 4.5 )\\n    {\\n\\t  \\tvWorldPos = v2;\\n    }\\n  \\telse\\n    {\\n\\t  \\tvWorldPos = v3;\\n    }\\n}\\n\\n\\nvoid GenerateCubeVertex( \\n  const float fCubeId, \\n  const float vertexIndex, \\n  const vec4 vCubeCol, \\n  const vec3 vCameraPos, \\n  out vec3 outSceneVertex )\\n{  \\n  GetCubeVertex( vertexIndex, outSceneVertex);\\n}\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p)\\n{\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nmat4 rotX(float angle) {\\n\\n    float s = sin( angle );\\n    float c = cos( angle );\\n\\n    return mat4(\\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0,-s, c, 0,\\n      0, 0, 0, 1);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  #if 0\\n  return mat4(\\n    1, 0, 0, trans[0],\\n    0, 1, 0, trans[1],\\n    0, 0, 1, trans[2],\\n    0, 0, 0, 1);\\n  #else\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n  #endif\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0.,\\n    yAxis, 0.,\\n    zAxis, 0.,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat p1m1(float v) {\\n  return v * .5 + .5;\\n}\\n\\nfloat inRange(float v, float minV, float maxV) {\\n  return step(minV, v) * step(v, maxV);\\n}\\n\\nfloat at(float v, float target) {\\n  return inRange(v, target - 0.1, target + 0.1);\\n}\\n\\n\\nvoid GetCubePosition(\\n  float fVertexId, \\n  float fCubeId, \\n  out mat4 mat, \\n  out vec4 vCubeCol, \\n  out float snd)\\n{  \\n  \\tfloat fSeed = fCubeId;\\n  \\tfloat fPositionBase = fCubeId;\\n  \\tfloat fSize = 1.50;\\n\\n  \\tvec3 vCubeOrigin = vec3( -1.0, 0.0, 0.0);\\n\\n    float posId = floor(fCubeId / 2.);\\n    float across = 32.;\\n    float down = 40.;\\n    float u2 = mod(posId, across);\\n    float v2 = floor(posId / across);\\n    float u = u2 / across;\\n    float v = v2 / down;\\n    float lng = u * PI * 2.;\\n    float lat = v * PI;\\n  \\n    float uBlock = floor(u2 / 4.);\\n    float vBlock = floor(v2 / 4.);\\n\\n    float uu = abs(m1p1(u));\\n    float ur = uu; cos(PI * -0.25) * u + sin(PI * -0.25) * v;\\n    float vr = v; sin(PI * 0.25) * v  - cos(PI * -0.25) * u;\\n    snd = texture2D(sound, vec2(mix(0.05, 0.25, ur), vr * 0.5)).a;\\n    float glow = mod(fCubeId, 2.);\\n    float glowScale = glow * 2.;\\n    //vCubeOrigin.z += pow(snd, 10.0) * 10.0;\\n    float fScale = 1. + glowScale * 0.01;\\n    float height = mix(1.0, 8.0, pow(hash(posId), 3.0));\\n  \\n    vCubeOrigin.x = m1p1(u) * across * 1.2 + uBlock * 3.;\\n    vCubeOrigin.y = height;\\n    vCubeOrigin.z = m1p1(v) * down * 1.2 + vBlock * 3.;\\n  \\n    float axisId = floor(fVertexId / 12.);\\n    vec3 glowOff = vec3(0.999, 0.92, 0.98);\\n    \\n    mat  = ident();\\n // \\tmat *= rotZ(lng);\\n // \\tmat *= rotY(lat);\\n    mat *= trans(vCubeOrigin);\\n    mat *= scale(vec3(\\n      fScale * mix(1., glowOff.x, glow * at(axisId, 1.)), \\n      height * fScale + mix(1., glowOff.y, glow * at(axisId, 2.)),\\n      fScale * mix(1., glowOff.z, glow * at(axisId, 0.))));\\n  \\n  \\tvec3 vRandCol;\\n\\n    float s2 = texture2D(sound, vec2(mix(0.015, 0.015, u), v * 0.1)).a;\\n  \\n    vCubeCol.xyz = mix(vec3(0.0), vec3(1,1,1), pow(s2, 40.0));  \\n    vCubeCol.xyz = mix(vCubeCol.xyz, vec3(1,0,0), step(0.95,s2));\\n    vCubeCol.xyz = vec3(0,0,0);\\n\\n}\\n\\nvec3 getCameraPointLow(float t) {\\n  t = mod(t, 4.);\\n  if (t < 1.) return vec3( -28,  9,-26);  // red\\n  if (t < 2.) return vec3( -28,  9, 25);  // yellow\\n  if (t < 3.) return vec3(  22,  9, 25);  // lime\\n  if (t < 4.) return vec3(  33,  9,-26);  // aqua-green\\n  return vec3(0.0);\\n}\\n\\nvec3 getCameraPoint(float t) {\\n  vec3 p0 = getCameraPointLow(t);\\n  vec3 p1 = getCameraPointLow(t + 1.);\\n  return mix(p0, p1, fract(t));\\n}\\n\\n/*\\nconst float tension = 1.;\\nvec3 getCameraPos(float t) {\\n  vec3 p0 = getCameraPointLow(t);\\n  vec3 p1 = getCameraPointLow(t + 1.);\\n  vec3 p2 = getCameraPointLow(t + 2.);\\n  vec3 p3 = getCameraPointLow(t + 3.);\\n  \\n  float subV = fract(t);\\n  float s2 = pow(subV, 2.);\\n  float s3 = pow(subV, 3.);\\n  \\n  float c1 =   2. * s3  - 3. * s2 + 1.;\\n  float c2 = -(2. * s3) + 3. * s2; \\n  float c3 =        s3  - 2. * s2 + subV; \\n  float c4 =        s3  -      s2;  \\n\\n  vec3 t1 = (p2 - p0) * tension;\\n  vec3 t2 = (p3 - p1) * tension;\\n  return c1 * p1 + c2 * p2 + c3 * t1 + c4 * t2; \\n}\\n\\n*/\\nvec3 getCameraPos(float t) {\\n  return getCameraPoint(t);\\n}\\n\\n\\nvoid main()\\n{ \\n  \\tvec2 vMouse = mouse;\\n  \\n  \\tfloat fov = 1.5;\\n  \\n  \\tfloat animTime = time * 0.01+(parameter0);\\n  \\n    float cameraTime = time * 0.5*parameter1;\\n    vec3 vCameraPos = getCameraPos(cameraTime);\\n    vCameraPos.y = mix(2., 22., p1m1(sin(cameraTime * 3.73)));\\n  \\n    vec3 vCameraTarget = getCameraPos(cameraTime + 0.2);\\n    vec3 vT2 = getCameraPos(cameraTime + 0.4);\\n    vCameraTarget.y = mix(2., 22., p1m1(sin(cameraTime * 3.73 + 0.2)));\\n  \\tvec3 vCameraUp = vec3( 0.0, 1, 0);\\n    float slide = 1. - p1m1(dot(\\n      normalize(vCameraTarget.xz - vCameraPos.xz), \\n      normalize(vT2.xz - vCameraTarget.xz)));\\n  \\n    mat4 matC = trans(vCameraPos);\\n    matC *= rotY(atan(\\n      vCameraPos.x - vCameraTarget.x, \\n      vCameraPos.z - vCameraTarget.z));\\n    matC *= rotZ(-0.6 * slide);\\n    matC *= rotX((vCameraPos.y - vCameraTarget.y) * -0.2);\\n  \\n  \\tfloat vertexIndex = vertexId;\\n    float fCubeId = floor( vertexIndex / g_cubeVertexCount );\\n    float fCubeVertex = mod( vertexIndex, g_cubeVertexCount );\\n\\n    mat4 mCube;\\n    vec4 vCubeCol;\\n    vec3 vCubePos;\\n    float snd;\\n\\n    GetCubePosition( fCubeVertex, fCubeId, mCube, vCubeCol, snd );\\n\\n    GenerateCubeVertex( fCubeId, fCubeVertex, vCubeCol, vCameraPos, vCubePos );\\n  \\n  \\n    mat4 mat = persp(radians(65.), resolution.x / resolution.y, 0.1, 1000.);\\n    mat *= inverse(matC);\\n  cameraLookAt(vCameraPos, vCameraTarget, vCameraUp);\\n    mat *= mCube;\\n  \\n    gl_Position = mat * vec4(vCubePos, 1);\\n\\n    \\n    float glow = mod(fCubeId, 2.);\\n  \\n    vec4 color = vec4(0,1,0,0.9);\\n    color = vec4(hsv2rgb(vec3(floor(mod(cameraTime, 4.)) / 8., 1, 1)), 1);\\n  \\tvec4 vFinalColor = mix(vec4(0,0,0,1), color, glow);\\n  \\n  \\n  \\tv_color = vec4(vFinalColor.xyz * vFinalColor.a, vFinalColor.a);\\n}\"}",
  "screenshotURL": "data/images/images-g9heg3i7jn504abqx-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "5fAEd5oFm4Jck2h4o"
}