{
  "_id": "HoXN7xPc28sQKFiCZ",
  "owner": {
    "_id": "RMhdQhPbrnDH4xXJ8",
    "createdAt": {
      "$date": 1684321868058
    },
    "username": "minseok.kim",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/9dbf6d7b52812c1307f1a8c8f4872756?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1685467912038
  },
  "modifiedAt": {
    "$date": 1685467912038
  },
  "origId": null,
  "name": "Circles from Triangles",
  "notes": "",
  "rank": 1.0347495547150758,
  "private": false,
  "unlisted": true,
  "username": "minseok.kim",
  "avatarUrl": "https://secure.gravatar.com/avatar/9dbf6d7b52812c1307f1a8c8f4872756?default=retro&size=200",
  "settings": {
    "num": 18956,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/spinninrecords/alok-alan-walker-headlights-feat-kiddo-listen-link",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.01568627450980392,
      0,
      1,
      1
    ],
    "shader": "//Name : minseok kim\n//Assignment : Exercise - Vertexshaderart : Circles from Triangles\n//Course : CS250\n//Term : Spring 2023\n\nvec3 hsv2rgb(vec3 c)\n{\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 P = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(P - K.xxx, 0.0, 1.0), c.y);\n}\n\n#define PI radians(180.0)\n\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nvec2 getCirclePoint(float id, float numCircleSegments)\n{\n  \n  float ux = floor(id / 6.) + mod(id, 2.);\n  \n  \n  float vy = mod(floor(id/2.) + floor(id / 3.), 2.);\n  \n  \n  \n  \n  \n  \n  \n  \n  float angle = ux / numCircleSegments* PI * 2.;\n  float c = cos(angle);\n  float s = sin(angle);\n  \n  float radius = vy + 1.;\n  \n  float x = c * radius;\n  float y = s * radius;\n  \n  return vec2(x,y);\n}\n\n\n\n\nvoid main()\n{\n  float numCircleSegments = 12.;\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\n  \n  \n  \n  float numPointsPerCircle = numCircleSegments * 6.;\n  \n  float circleId = floor(vertexId / numPointsPerCircle);\n  float numCircles = floor(vertexCount / numPointsPerCircle);\n  \n  \n  float sliceId = floor(vertexId / 6.0);\n  float oddSlice = mod(sliceId, 2.);\n  \n  \n  \n  \n  float down = floor(sqrt(numCircles));\n  float across = floor(numCircles / down);\n  \n  float x = mod(circleId, across);\n  float y = floor(circleId / across);\n  \n  float u = x / (across - 1.);\n  float v = y / (across - 1.);\n  \n  float xoff = 0.;//sin(time + y * 0.2) * 0.1;\n  float yoff = 0.;//sin(time + x * 0.3) * 0.2;\n  \n  \n  \n  float ux = u * 2. - 1. + xoff;\n  \n  float vy = v * 2. - 1. + yoff;\n  \n  \n\n  \n  \n  \n  \n  float su = abs(u - 0.5) * 2.;\n  float sv = abs(v - 0.5) * 2.;\n  float au = abs(atan(su, sv)) / PI;\n  float av = length(vec2(su, sv));\n  float snd = texture2D(sound, vec2(au*.05, av*.25)).a;\n  \n  \n  float aspect = resolution.x / resolution.y;\n  float sc = pow(snd + 0.2, 5.) * mix(1., 1.1, oddSlice);\n  \n  \n  sc *= 20. / across;\n  \n  vec4 pos = vec4(circleXY, 0, 1);\n  mat4 mat = ident();\n  mat *= scale(vec3(1, aspect, 1));\n  mat *= rotZ(time * 0.1);\n  mat *= trans(vec3(ux, vy, 0) * 1.3);\n  mat *= rotZ(snd * 20. * sign(ux));\n  mat *= uniformScale(0.03 * sc);\n  \n  \n  \n  //vec2 xy = circleXY * 0.1 * sc + vec2(ux, vy) * 1.3;\n  //gl_Position = vec4(xy, 0, 1) * vec4(1, aspect, 1,1);\n  gl_Position = mat * pos;\n  float soff = 0.;//sin(time + 1.2 + x * y * 0.02) * 5.;\n  \n  \n  \n  float pump = step(0.8, snd);\n  float hue = u * .1 + snd*0.2+time * .1 + sliceId * 0.01;//sin(time * 1.3 + v * 20.) * 0.05;\n  float sat = 1.;//mix(0.5, 1., pump);//mix(1., -10., av);\n  float val = mix(.5, pow(snd+0.2,5.), pump);//sin(time * 1.4 + v * u * 20.0) * .5 + .5;\n  \n  \n  hue = hue + pump * oddSlice * 0.5 + pump * 0.33;\n  val += oddSlice;\n  \n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n}\n"
  },
  "screenshotURL": "data/images/images-h1c4w4nb2qc6ktppz-thumbnail.jpg",
  "hasSound": true,
  "views": 2,
  "likes": 0,
  "revisionId": "xwBMpu9aK7s8ywJFd"
}