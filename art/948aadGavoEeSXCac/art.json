{
  "_id": "948aadGavoEeSXCac",
  "owner": {
    "_id": "8zztH8K59zQaKjuQX",
    "createdAt": {
      "$date": {
        "$numberLong": "1677359387406"
      }
    },
    "profile": {
      "first_name": "James",
      "last_name": "Andrew",
      "avatarUrl": "https://lh3.googleusercontent.com/a/AGNmyxa3JZWJm88yunQiCwAfn9zM-tkF1s8O-hJsYEynRw=s96-c"
    },
    "username": "james2"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1677794832414"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1677794832414"
    }
  },
  "origId": "MLaWwDHo66XjxhwCc",
  "name": "Amoeba V2 [No Sound]",
  "notes": "Amoeba V2",
  "rank": {
    "$numberDouble": "1.178979967945851"
  },
  "private": false,
  "unlisted": true,
  "username": "james2",
  "avatarUrl": "https://lh3.googleusercontent.com/a/AGNmyxa3JZWJm88yunQiCwAfn9zM-tkF1s8O-hJsYEynRw=s96-c",
  "settings": {
    "num": 50000,
    "mode": "LINE_LOOP",
    "sound": "https://soundcloud.com/globalliquidity/20230302-deep-blue-amoeba",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.01568627450980392,
      0.01568627450980392,
      0.10588235294117647,
      1
    ],
    "shader": "//KDrawmode=GL_LINE_LOOP\n//KVerticesNumber=20000\n\n#define turning 1.4//KParameter0 1.4>>100.\n#define rotateXcos 1.//KParameter1 1.>>5.\n#define rotateYcos 1.//KParameter2 1.>>5.\n#define rotateZcos 1.//KParameter3 1.>>5.\n#define spikeFactor 4. //KParameter4 1.>>10.\n#define spikeFactor2 4. //KParameter5 1.>>100.\n\n#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nstruct point {\n  vec3 position;\n  float a;\n  float b;\n  float rad;\n  float snd;\n};\n\npoint getPoint(float i) {\n\n  float pointsPerTurn = floor(sqrt(vertexCount) * 2.);\n  pointsPerTurn -= mod(pointsPerTurn, 16.);\n  pointsPerTurn++;\n  float turns = vertexCount / pointsPerTurn;\n  \n  float a = (PI + PI / turns) * i; //(acos(1.0 - 2.0 * i) / PI);\n  float b = 2. * PI * i * turns;\n  \n\n  a -= mod(vertexId, 2.) * PI / (turns - 1.);\n  a = clamp(a, 0., PI);\n\n  \n  float spike = pow(cos(a * spikeFactor), 4.);\n  bool middle = a > PI / 8. && a < PI * 7. / 8.;\n  if (middle) {\n\t  spike *= pow(sin(b * spikeFactor2), 4.);\n  }\n  \n  float snd = 0.; //pow(texture2D(sound, vec2(0.005, spike*0.025)).a, 4.);\n\n  float rad = 0.35;    \n  rad += spike * 0.350;\n  rad += snd * 0.2;  \n\n  \n  float x = sin(a);\n  float y = cos(a);  \n  float z = sin(b) * x;\n  x *= cos(b);\n      \n  return point(vec3(x,  y, z) * rad, a, b, rad, snd);  \t\n}\n\nvoid main() {\n  \n  point p1 = getPoint(vertexId / vertexCount);\n//  point p2 = getPoint((vertexId - 1.) / vertexCount);\n//  point p3 = getPoint((vertexId - 2.) / vertexCount);\n//  vec3 normal = normalize(cross(p2.position - p1.position, p3.position - p1.position));\n  \n  \n  float mx = sin(time - p1.rad) * turning;\n//  float mx = PI * -mouse.y;\n  float my = time - p1.rad;\n//  float my = PI * -mouse.x;\n  float mz = sin(time * 0.44 - p1.rad);\n  mat2 rotateX = mat2(cos(mx)*rotateXcos, -sin(mx), sin(mx), cos(mx));\n  mat2 rotateY = mat2(cos(my)*rotateYcos, -sin(my), sin(my), cos(my));\n  mat2 rotateZ = mat2(cos(mz)*rotateZcos, -sin(mz), sin(mz), cos(mz));\n\n  p1.position.yz *= rotateX;\n  p1.position.xz *= rotateY;\n  p1.position.xy *= rotateZ;  \n\n  \n  float screenZ = -0.;\n  float eyeZ = -4.5;\n  float perspective = (eyeZ - screenZ) / (p1.position.z - eyeZ);\n  p1.position.xy *= perspective;\n  \n  float aspect = resolution.x / resolution.y;\n  p1.position.x /= aspect;\n  \n  gl_Position = vec4(p1.position, 1);\n  \n  gl_PointSize = 2. - p1.position.z * 5.;\n\n\n  float h = fract(p1.b / (2. * PI));\n  float s = (p1.rad - 0.5 * p1.snd) * 3.;\n  \n  if (p1.a < PI / 8.) {\n  \ts = mix(s, 0., 1. - p1.a / (PI / 8.));\n  } else if (p1.a > PI * 7. / 8.) {\n  \ts = mix(s, 0., 1. - (PI - p1.a) / (PI / 8.));  \n  }\n  float v = 0.4 - p1.position.z * 2.;\n//  float v = normal.z * 0.5 + 0.5; \n  \n  v_color = vec4(hsv2rgb(vec3(h, s, v)), 1);\n}"
  },
  "screenshotURL": "data/images/images-83qkjl0slgbybwxms-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "7"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "xSKBSeKKLgB6hKHcp"
}