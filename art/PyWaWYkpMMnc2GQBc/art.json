{
  "_id": "PyWaWYkpMMnc2GQBc",
  "owner": {
    "_id": "Bs4vwFBoeN6Lx3is5",
    "createdAt": {
      "$date": {
        "$numberLong": "1528672219472"
      }
    },
    "profile": {
      "name": "Justin Shrake",
      "avatarUrl": "https://avatars.githubusercontent.com/jshrake?s=200",
      "info": "Contact me @ https://twitter.com/j2rgb"
    },
    "username": "jshrake"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1636465470472"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1636465470472"
    }
  },
  "origId": null,
  "name": "hexagon tile strings",
  "notes": "",
  "rank": {
    "$numberDouble": "1.1281837841910658"
  },
  "private": false,
  "unlisted": true,
  "username": "jshrake",
  "avatarUrl": "https://avatars.githubusercontent.com/jshrake?s=200",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// Hash without Sine\\n// MIT License...\\n/* Copyright (c)2014 David Hoskins.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.*/\\n\\n//----------------------------------------------------------------------------------------\\n//  1 out, 1 in...\\nfloat hash11(float p) {\\n  p = fract(p * .1031);\\n  p *= p + 33.33;\\n  p *= p + p;\\n  return fract(p);\\n}\\n\\n\\n// Raskolnikov (https://math.stackexchange.com/users/3567/raskolnikov), Is there\\n// an equation to describe regular polygons?, URL (version: 2016-06-18):\\n// https://math.stackexchange.com/q/41954 https://math.stackexchange.com/a/41954\\n// Licensed under CC BY-SA 3.0\\n\\n#ifndef TAU\\n#define TAU 6.28318530718\\n#endif\\n#ifndef PI\\n#define PI 3.14159265359\\n#endif\\n\\nfloat mmod(float x, float m) { return mod(mod(x, m) + m, m); }\\n\\nvec2 parametric_ngon(float n, float theta) {\\n  theta = mod(TAU * theta, TAU);\\n  float r = cos(PI / n) / cos(mmod(theta, 2.0 * PI / n) - PI / n);\\n  float x = r * cos(theta);\\n  float y = r * sin(theta);\\n  return vec2(x, y);\\n}\\n\\nvec4 grid2(float id, float w, float h) {\\n  float ux = w == 1.0 ? 0.0 : mod(id, w);\\n  float uy = h == 1.0 ? 0.0 : mod(floor(id / w), h);\\n  float x = w == 1.0 ? 0.0 : 2.0 * ux / (w - 1.0) - 1.0;\\n  float y = h == 1.0 ? 0.0 : 2.0 * uy / (h - 1.0) - 1.0;\\n  return vec4(x, y, ux, uy);\\n}\\n\\nmat2 rot2(float t) {\\n  float ct = cos(t);\\n  float st = sin(t);\\n  return mat2(ct, -st, st, ct);\\n}\\n\\n\\nvoid main() {\\n  float gridw = 10.;\\n  float gridh = 10.;\\n  float particles_per_tile = 1000.0;\\n  float i = vertexId;\\n  float pct = i / (vertexCount - 1.0);\\n\\n  float tile_i = floor(i / particles_per_tile);\\n  float tile_count = gridw * gridh;\\n\\n  float tile_pi = mod(i, particles_per_tile);\\n  float tile_ppct = tile_pi / particles_per_tile;\\n\\n  float row = floor(tile_i/gridw);\\n  float col = mod(tile_i, gridw);\\n\\n  float size = 2.0/(gridw - 1.0);\\n  vec2 grid_scale = 1.3*vec2(1.0*sqrt(3.0)*size, 1.5*size);\\n  vec2 tile_scale = vec2(size);\\n  vec2 center = grid_scale*(grid2(tile_i, gridw, gridh).zw - 0.5*vec2(gridw, gridh));\\n  float loop_len = 4.0;\\n  float time_off = 0.0;\\n  float loop_pct = mod(time + time_off, loop_len) / (loop_len - 1.0);\\n\\n  float ngon = 6.0;\\n  vec2 shape_a = parametric_ngon(ngon, tile_ppct);\\n  vec2 shape_b = parametric_ngon(ngon, tile_ppct + 0.5);\\n  float anim_delay = mix(0.0, 0.6, length(center + 0.0001)/(0.93*sqrt(2.0))) + mix(0.0, 0.2, tile_ppct);\\n  float anim_len = 0.2;\\n  float m = smoothstep(0.0 + anim_delay, 0.0 + anim_delay + anim_len, loop_pct);\\n  vec2 shape = mix(shape_a, shape_b, m);\\n  float eo = mod(row, 2.0);\\n  float rotoff = 0.0*(max(abs(center.x), abs(center.y)));\\n  shape = rot2(0.25*TAU)*shape;\\n  shape *= tile_scale;\\n  shape.x += 1.0 * eo * tile_scale.x;\\n  shape.y += 1.0*size;\\n  gl_Position.xy = center + shape;\\n  gl_Position.zw = vec2(0.0, 1.0);\\n\\n  float scale = 0.006;\\n  gl_PointSize = 1000.0*scale;\\n\\n  v_color = vec4(1.0);\\n}\"}",
  "screenshotURL": "data/images/images-yhmdeti00zvf5ywj4-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "3"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "vHCix3dHmYRmgowJP"
}