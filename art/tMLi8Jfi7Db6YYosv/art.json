{
  "_id": "tMLi8Jfi7Db6YYosv",
  "owner": {
    "_id": "Q5T8njsEaGYsK34dZ",
    "createdAt": {
      "$date": "1448898157107"
    },
    "profile": {
      "name": null,
      "avatarUrl": "https://avatars.githubusercontent.com/8BitRick?s=200"
    },
    "username": "8bitrick"
  },
  "createdAt": {
    "$date": "1449294170223"
  },
  "modifiedAt": {
    "$date": "1449294170223"
  },
  "origId": "cgHCLAi7mKznjvENd",
  "name": "PulsingFuzzySpheres",
  "rank": "1.82119771683332",
  "private": false,
  "unlisted": true,
  "username": "8bitrick",
  "settings": {
    "num": 5000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/queroxmusic/querox-phaxe-tripical-moon",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n#define PI 3.14159\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat m1p1(float v) { return v * 2. - 1.; }\n\nvoid main()\n{\n  float ROWS = 3.;\n  float cur_time = mod(time, 4.);\n  float verts_per_row = vertexCount / ROWS;\n  float vert_per = vertexId / (vertexCount - 1.);\n  float row = floor(vertexId / verts_per_row);\n  float row_per = row / (ROWS-1.);\n  //float freq = vert_per * 0.8 + 0.1;\n  float hash_row = hash(hash(row_per)+0.10);\n  vec2 center = vec2(m1p1(hash_row), m1p1(hash(hash_row)))* 0.5;\n  vec2 aspect = vec2(1, resolution.x / resolution.y);\n  \n  float vertex_per = mod(vertexId, verts_per_row) / verts_per_row;\n  float x = vertex_per;\n  //float y = texture2D(sound,vec2(vertex_per*0.90+0.1,0.)).a;// + (row_per) - 1. + hash(row_per);\n  \n  //vec2 vel = vec2(m1p1(hash(vert_per))*0.25 * amp, amp);\n  float hash_vert = hash(vert_per);\n  float angle = hash(hash_vert) * PI * 2.;\n  //float radius = hash_vert;\n  //float radius = (-exp2(-hash_vert)+1.) * 2.;\n  float radius = (-pow(hash_vert-1.,2.)+1.);\n  \n  float freq = radius * 0.6 + 0.1;\n  float amp = texture2D(sound,vec2(freq, 0.)).a;// + (row_per) - 1. + hash(row_per);\n  \n  //float angle = hash(hash_vert) * PI * 0.333 + (PI * 0.333);\n  vec2 offset = vec2(cos(angle), sin(angle)) * (radius + amp * 0.4);\n  //vec2 offset = vec2(cos(angle), sin(angle)) * hash_vert*hash_vert*(3.-2.*hash_vert);\n  //vec2 xy = (center + offset * vec2(cos(time*offset.x), 1.) * 0.25) * aspect;\n  vec2 xy = (center + offset * vec2(cos(time*offset.x), 1.) * 0.25) * aspect;\n  \n  gl_PointSize = 5.0;\n  gl_Position = vec4(xy,0,1);\n  v_color = vec4(1.0);\n//  v_color = mix(vec4(hsv2rgb(vec3(y*0.21, 1.-y, 1.)), 1.-row_per), background, row_per - 0.2);\n}\n"
  },
  "screenshotURL": "data/images/images-ig33262iqx9bhrayf-thumbnail.jpg",
  "hasSound": true,
  "views": "3",
  "likes": "0",
  "revisionId": "P9beDPb97DnSR65s2",
  "avatarUrl": "https://avatars.githubusercontent.com/8BitRick?s=200"
}