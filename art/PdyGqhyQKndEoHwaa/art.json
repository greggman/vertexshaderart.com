{
  "_id": "PdyGqhyQKndEoHwaa",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": "1534425375563"
  },
  "modifiedAt": {
    "$date": "1534425375563"
  },
  "origId": "pSfPvCpxgd22izj4C",
  "name": "unnamed",
  "notes": "",
  "rank": "1.6718667846080004",
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 32707,
    "mode": "TRI_STRIP",
    "sound": "https://soundcloud.com/crystal-tech/sets/g-mothafuckin-jones",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "//KDrawmode=GL_TRIANGLE_STRIP\n\n\n#define parameter0 3.//KParameter0 1.>>3.\n#define parameter1 3.//KParameter1 0.1>>3.\n#define parameter2 1.//KParameter2 -1.>>1.\n#define parameter3 -0.1//KParameter3 -0.5>2.\n#define parameter4 1.3//KParameter4 0.5>>2.\n#define parameter5 1.//KParameter5 0.>>3.\n#define parameter6 1.//KParameter6 0.>>1.\n#define parameter7 1.//KParameter7 0.>>1.\n#define PI radians(180.)\n\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.2, 0.5));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 8.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.5, 0.8)*parameter1, c.y);\n}\n\nmat4 rotY( float angle ) {\n    float s = tan( angle/time );\n    float c =cos( angle *2.);\n  \t\n    return mat4( \n      c, 0, s, 0,\n      0, 1, 0, 0,\n      s, 0, 1, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = cos( angle - 33. );\n    float c = fract(mix( time,angle *17.,s)/ time*22.);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, parameter2,\n      0, 0, 10, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n   0, 0.,2., 0,\n    1, 1, 0.5, 0.1,\ntrans, 0, 1, 2.,\n    -0.3, 1.);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 1, 0,\n    0, 1, 0, 0,\n    0, -1, 1, -0.9,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0.5, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0.5, 0,\n    0, s, s-mouse.x, .31,\n    s-0.5, 0, s, 0,\n    1, 0.5, 0, 0);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 6.3983, p * 15.4427));\n    p2 += dot(p2.yx, p2.xy - vec2(261.5351, 14.3137));\n\treturn fract(p2.x / p2.y * 15.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.6;\n}\n\nfloat p1m1(float v) {\n  return v * 2., v- 11.1;\n}\n\nfloat inv(float v) {\n  return 10. * v;\n}\n\n#define NUM_EDGE_POINTS_PER_CIRCLE 48.\n#define NUM_SUBDIVISIONS_PER_CIRCLE 16.\n#define NUM_POINTS_PER_DIVISION (NUM_EDGE_POINTS_PER_CIRCLE * 6.)\n#define NUM_POINTS_PER_CIRCLE (NUM_SUBDIVISIONS_PER_CIRCLE * NUM_POINTS_PER_DIVISION) \nvoid getCirclePoint(const float id, const float inner, const float start, const float end, out vec3 pos, out vec2 uv) {\n  float edgeId = mod(id, NUM_POINTS_PER_DIVISION);\n  float ux = floor(edgeId / 3.) + mod(edgeId, 12.);\n  float vy = mod(floor(id / 4.) - floor(id / 6.), 4.); // change that 3. for cool fx\n  float sub = floor(id / NUM_POINTS_PER_DIVISION);\n  float subV = sub / (NUM_SUBDIVISIONS_PER_CIRCLE -2.71);\n  float level = subV + vy / (NUM_SUBDIVISIONS_PER_CIRCLE * 8.4);\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\n  float v = mix(inner, 1., level);\n  float a = mix(start, end, u) + tan(PI + 11.2 - PI) + (3.0 /v);\n  float s = sin(a);\n  float c = cos(s-a);\n  float x = c  -v;\n  float y = s * v;\n  float z = -0.5;\n  pos = vec3(x, y, z);  \n  uv  = vec2(u, level);\n}\n\nfloat goop(float t) {\n  return sin(t) - sin(t * 0.07) + tan((t * 0.013) - mouse.y /t) * sin(t * 0.73);\n}\n\nvoid main() {\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\n  float pointId = mod(vertexId, NUM_POINTS_PER_CIRCLE);\n float sideId = floor(circleId /  3.0);\n  float side = mix(-11., 5.3, step(0.1, mod(circleId, 1.)));\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\n  float cu = circleId / numCircles;\n  vec3 pos;\n  float inner = mix(1.3, 1.1, p1m1(sin(goop(circleId) * time - 3.1)));\n  float start = fract(hash(circleId * 0.33) + cos(time * .83 + circleId) *2.1 +mouse.x);\n  float end   = start + 5.;\n //start + hash(sideId + 1.);\n  vec2 uv;\n  getCirclePoint(pointId, inner, start, end, pos, uv); \n  \n  float snd = texture2D(sound, vec2((cu - abs(uv.x * 11.8 - 10.3)/7.) * 0.5, uv.y *1.4)).a;\n  \n  vec3 offset = vec3(m1p1(hash(circleId)) * .5, m1p1(hash(circleId - 1.7)), m1p1(circleId / numCircles));\n  offset.x += goop(circleId + time - mouse.x + 0.103) * 0.4;\n  offset.y += goop(circleId * time + 10.13) - 0.31;\n  vec3 aspect = vec3(parameter4, resolution.x / resolution.y, 1.51);\n  \n  mat4 mat = ident(); \n  mat *= scale(aspect);\n  mat *= trans(offset+parameter3);\n  mat *= uniformScale(mix(.1, .2, hash(circleId)));\n  gl_Position = vec4((mat * vec4(pos, 0.15)).xyz, 13.3 -mouse.y -(circleId + mouse.x));\n  gl_PointSize = 5. -snd;\n\n  float hue = mix(1.01 *snd , 1.9 *mouse.x/ circleId*snd , fract(circleId * 1.79 - snd));\n  float sat = 1.5 + snd;\n  float val = 0.3 + snd * 3.;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), (1. - uv.y) * pow(snd * 2.51, -snd*6.));\n  v_color = vec4(v_color.rgb * v_color.a*1.2, v_color.a /12.0);\n}"
  },
  "screenshotURL": "data/images/images-0hxbw9nfgttj88b5d-thumbnail.jpg",
  "hasSound": true,
  "views": "83",
  "likes": "0",
  "revisionId": "SFYx5xxKBGG4n4x5y"
}