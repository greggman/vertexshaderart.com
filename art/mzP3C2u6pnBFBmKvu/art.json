{
  "_id": "mzP3C2u6pnBFBmKvu",
  "owner": {
    "_id": "vkPwAHM8PnAebFPxW",
    "createdAt": {
      "$date": "1501857924166"
    },
    "profile": {
      "name": "Macro Machines",
      "avatarUrl": "https://lh3.googleusercontent.com/-hZKcNaW8AT0/AAAAAAAAAAI/AAAAAAAAEGM/geaXegN2s9U/photo.jpg",
      "info": "axiom-crux.net macromachines.net"
    },
    "username": "macro"
  },
  "createdAt": {
    "$date": "1600427060118"
  },
  "modifiedAt": {
    "$date": "1600427060118"
  },
  "origId": "qZCxqkkWDsfd8gqGS",
  "name": "dncrs",
  "notes": "",
  "rank": "1.8506665184900608",
  "private": false,
  "unlisted": true,
  "username": "macro",
  "avatarUrl": "https://lh3.googleusercontent.com/-hZKcNaW8AT0/AAAAAAAAAAI/AAAAAAAAEGM/geaXegN2s9U/photo.jpg",
  "settings": {
    "num": 4608,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/sayyida-ghazia-sartaj/yeh-kia-jaga-hai-asha-bhosle",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.8392156862745098,
      0.9450980392156862,
      1,
      1
    ],
    "shader": "/*frrrrrr\neee\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n// times 2 minus 1\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// times .5 plus .5\nfloat t5p5(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\n\n// adapted from http://stackoverflow.com/a/26127012/128511\n\nvec3 fibonacciSphere(float samples, float i) {\n  float rnd = 1.;\n  float offset = 2. / samples;\n  float increment = PI * (3. - sqrt(5.));\n\n  //  for i in range(samples):\n  float y = ((i * offset) - 1.) + (offset / 2.);\n  float r = sqrt(1. - pow(y ,2.));\n\n  float phi = mod(i + rnd, samples) * increment;\n\n  float x = cos(phi) * r;\n  float z = sin(phi) * r;\n\n  return vec3(x, y, z);\n}\n\n\nfloat easeInOutPow(float pos, float pw) {\n  if ((pos /= 0.5) < 1.) {\n    return 0.5 * pow(pos, pw);\n  }\n  return 0.5 * (pow((pos - 2.), pw) + 2.);\n}\n\n#define CUBE_POINTS_PER_FACE 6.\n#define FACES_PER_CUBE 6.\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\n  float sideId = mod(quadId, 3.);\n  float flip   = mix(1., -1., step(2.5, quadId));\n  // 0 1 2  1 2 3\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\n  float a = pointId * PI * 2. / 4. + PI * 0.25;\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\n  vec3 n = vec3(0, 1, 0) * flip;\n  float lr = mod(sideId, 2.);\n  float ud = step(2., sideId);\n  mat4 mat = rotX(lr * PI * 0.5);\n  mat *= rotZ(ud * PI * 0.5);\n  position = (mat * vec4(p, 1)).xyz;\n  normal = (mat * vec4(n, 0)).xyz;\n}\n\nvoid main() {\n  float vId = mod(vertexId, 36.);\n  vec3 qpos;\n  vec3 qnrm;\n  getCubePoint(vId, qpos, qnrm);\n  \n  float ux = floor(vId / 6.) + mod(vId, 2.);\n  float vy = mod(floor(vId / 2.) + floor(vId / 3.), 2.);   \n  \n  float quadsPerArea = 4.;\n  float pointsPerArea = quadsPerArea * 36.;\n  float areaId = floor(vertexId / pointsPerArea);\n  float numAreas = floor(vertexCount / pointsPerArea);\n  float areaV = areaId / numAreas;\n  float areaVertId = mod(vertexId, pointsPerArea);\n  float rowId = floor(areaVertId / 36.);\n  \n  float maxBarHeight = 0.025;\n  const int numSamples = 20;        // number of history samples to read. So 30 = 1/2 second\n  const int samplesPerArea = 64;    // samples across a row. There are 4096 samples I think\n                                    // 128 would be 32 area\n  \n  \n  float sampleRangePerArea = soundRes.x / float(samplesPerArea);\n  float sampleRangeMult = sampleRangePerArea / float(samplesPerArea) / soundRes.x;     \n  \n  float timeMaxS = 0.0;\n  float instMaxS = 0.0;\n  float avgS = 0.0;\n  float timeAvgS = 0.0;\n  for (int j = 0; j < samplesPerArea; ++j) {\n    float su = mix(0., 0.6, pow(areaV, 1.0) + float(j) * sampleRangeMult);\n    float s = texture2D(sound, vec2(su, 0)).a;\n    avgS += s;\n    timeAvgS += s;\n    instMaxS = max(s, instMaxS);\n    timeMaxS = max(s, timeMaxS);\n    for (int i = 1; i < numSamples; ++i) {\n      s = texture2D(sound, vec2(su, (float(i) + .5) / soundRes.y)).a;\n      timeAvgS += s;\n      timeMaxS = max(s, timeMaxS);\n    }\n  }  \n  \n  avgS /= float(samplesPerArea);\n  timeAvgS /= float(samplesPerArea * numSamples);\n  \n  float isRow2 = step(1.5, rowId);\n  float isRow3 = step(2.5, rowId);\n  \n  float radius = numAreas * .5;\n  mat4 pmat = persp(radians(60.), resolution.x / resolution.y, 0.1, 1000.0);\n  vec3 eye = vec3(0, numAreas * .3, radius);\n  vec3 target = vec3(0, 3, 0);\n  vec3 up = vec3(0, 1, 0);\n  \n  mat4 vmat = cameraLookAt(eye, target, up);\n  mat4 wmat = ident();\n  \n  float height = 10.;\n  float row0 = 0.;\n  float row1 = timeMaxS - maxBarHeight * .9;\n  float row2 = avgS - maxBarHeight * .9;\n  wmat *= scale(\n      mix(vec3(1), vec3(1, 0.001, 1.1), isRow3));\n  wmat *= rotY(areaV * PI * 2. + time * -.1);\n  wmat *= rotZ(mix(-.3, .3, timeAvgS * .7 + sin(time + areaV * PI * 2.) * .1));\n  wmat *= trans(vec3(\n      numAreas / 4.5, //(areaId - numAreas * .5) * 1.9, \n      mix(mix(row0, row1, step(0.5, rowId)), row2, isRow2) * height * step(rowId, 2.5),\n      mix(0., 0., step(2.5,rowId))));\n  float scaleFudge = mix(0.75, 1.0, step(0.5, rowId));\n  wmat *= scale(vec3(\n      scaleFudge, \n      mix(instMaxS, maxBarHeight, step(0.5, rowId)) * height, \n      scaleFudge));\n  wmat *= trans(vec3(0., .5, 0));\n  wmat *= uniformScale(.5 / .7);\n  \n  gl_Position = pmat * vmat * wmat * vec4(qpos, 1);\n  \n  float l = dot(mat3(wmat) * qnrm, normalize(vec3(1,1,3))) * .5 + .5;\n\n  float hue = mix(.3, 0., instMaxS) /* ;areaV * .2 */ + rowId * .8 + step(1.5, rowId) * .0;\n  float sat = mix(0.5, 1., instMaxS);\n  float val = mix(mix(0.8, 1.0, pow(instMaxS, 3.)), mix(0.2, 2.0, pow(timeMaxS + .2, 5.0)), rowId);\n  val = mix(val, mix(0.4, 1.0, avgS), isRow2);\n  sat = mix(1., 0., isRow3);\n  \n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)) * l, 1);\n}//"
  },
  "screenshotURL": "data/images/images-fyc3sujwzfffrya2g-thumbnail.jpg",
  "hasSound": true,
  "views": "1",
  "likes": "0",
  "revisionId": "sa5eSaH4uMzMnESjg"
}