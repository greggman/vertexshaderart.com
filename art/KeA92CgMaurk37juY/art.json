{
  "_id": "KeA92CgMaurk37juY",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1449084425104"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1451041535850"
    }
  },
  "origId": "D2qJoBWBE7X8yWh5D",
  "name": "octaves",
  "rank": {
    "$numberDouble": "1.2854035119864915"
  },
  "private": true,
  "unlisted": false,
  "username": "gman",
  "settings": "{\"num\":400,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/dr-doug/06-log-sweep-20-to-20k-0db-to\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// octaves\\n\\n#define PI radians(180.)\\n\\nfloat at(float v, float target) {\\n  return step(target - 0.95, v) * step(v, target + 0.95);\\n}\\n\\nfloat sample(float u) {\\n  return (floor(u * soundRes.x) + 0.5) / soundRes.x;\\n}\\n\\nvoid main() {\\n  float numVerts = floor((vertexCount + 3.) / 4.);\\n  float lineId = mod(vertexId, 4.);\\n  float id = floor(vertexId / 4.);\\n  float u = id / numVerts;\\n  float u2 = (1. - pow(1. - u, 2.)) * 0.5;   \\n  \\n  /*\\n\\n  1   -> 0.5   -> 0.5\\n  0.9 -> 0.25  -> 0.25\\n  0.8 -> 0.125 -> 0.25\\n\\n  */\\n    \\n  const int numSamples = 32;\\n  float s = 0.;\\n  for (int ii = 0; ii < numSamples; ++ii) {\\n    float u3 = u2 + u2 * (float(ii) / float(numSamples));\\n    s += texture2D(sound, vec2(sample(u3), 0.)).a;\\n  }\\n  float v = s / float(numSamples);\\n  float x = u * 2. - 1.;\\n  \\n  float vs = texture2D(sound, vec2(sample(u), 0.)).a;\\n  float vl = log(texture2D(sound, vec2(sample(u), 0.)).a);\\n  \\n  v = v * (u * 4.);\\n  v = mix(v, vs, step(0.5, lineId));\\n  v = mix(v, vl, at(2., lineId));\\n  \\n  gl_Position = vec4(x, v, 0, 1);\\n  v_color = vec4(1, u2, 0, 1);\\n  v_color = mix(v_color, vec4(0,0,1,1), step(0.5, lineId));\\n  v_color = mix(v_color, vec4(0,1,0,1), at(2., lineId));\\n  gl_PointSize = 10. * resolution.x / 1680.;\\n  \\n}\"}",
  "screenshotURL": "data/images/images-0bptmxah6g8q00jbs-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "3"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "n739nsGMNjAyZpr6A",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "notes": ""
}