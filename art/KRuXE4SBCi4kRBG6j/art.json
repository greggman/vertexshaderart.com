{
  "_id": "KRuXE4SBCi4kRBG6j",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1634167929043
  },
  "modifiedAt": {
    "$date": 1634168426037
  },
  "origId": "GKbc4tXKXpku2WT84",
  "name": "seaworms",
  "notes": "",
  "rank": 1.38086940047267,
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/jutste/fresh-water-original",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.050980392156862744,
      0.050980392156862744,
      0.18823529411764706,
      1
    ],
    "shader": "/*\n                                                                                                                     \n                         ,--.                          ,--.                ,--.                               ,--.   \n,--.  ,--.,---. ,--.--.,-'  '-. ,---. ,--.  ,--. ,---. |  ,---.  ,--,--. ,-|  | ,---. ,--.--. ,--,--.,--.--.,-'  '-. \n \\  `'  /| .-. :|  .--''-.  .-'| .-. : \\  `'  / (  .-' |  .-.  |' ,-.  |' .-. || .-. :|  .--'' ,-.  ||  .--''-.  .-' \n  \\    / \\   --.|  |     |  |  \\   --. /  /.  \\ .-'  `)|  | |  |\\ '-'  |\\ `-' |\\   --.|  |   \\ '-'  ||  |     |  |   \n   `--'   `----'`--'     `--'   `----''--'  '--'`----' `--' `--' `--`--' `---'  `----'`--'    `--`--'`--'     `--'   \n\n*/\n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n// times 2 minus 1\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// times .5 plus .5\nfloat t5p5(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\n\nfloat goop(float t) {\n  return sin(t) + sin(t * 0.27) + sin(t * 0.13) + sin(t * 0.73);\n}\n\nfloat Hash( vec2 p) {\n     vec3 p2 = vec3(p.xy,1.0);\n    return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*3758.5453123);\n}\n\n\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n     vec2 f = fract(p);\n     f *= f * (3.0-2.0*f);\n\n    return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),\n               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),\n               f.y);\n}\n\nfloat fbm(vec2 p) {\n     float v = 0.0;\n     v += noise(p*1.0)*.5;\n     v += noise(p*2.)*.25;\n     v += noise(p*4.)*.125;\n     return v;\n}\n\nfloat crv(float v) {\n  return fbm(vec2(v, v * 1.23));\n  //float o = sin(v) + sin(v * 2.1) + sin(v * 4.2) + sin(v * 8.9); \n  //return o / 4.;\n}\n\n\nvec3 getCenterPoint(const float id, vec2 seed) {\n  float a0 = id + seed.x;\n  float a1 = id + seed.y;\n  return vec3(crv(a0), crv(a1), 0);\n  return vec3(crv(a0), crv(a1), crv(a0 + a1 * 0.134));\n//  return vec3(\n//    (sin(a0 * 0.39) + sin(a0 * 0.73) + sin(a0 * 1.27)) / 3.,\n//    (sin(a1 * 0.43) + sin(a1 * 0.37) + cos(a1 * 1.73)) / 3.,\n//    0);\n}\n\nvoid getQuadPoint(const float quadId, const float mult, const float pointId, float thickness, vec2 seed, out vec3 pos, out vec2 uv) {\n  vec3 p0 = getCenterPoint(quadId + mult * 0., seed);\n  vec3 p1 = getCenterPoint(quadId + mult * 1., seed);\n  vec3 p2 = getCenterPoint(quadId + mult * 2., seed);\n  vec3 p3 = getCenterPoint(quadId + mult * 3., seed);\n  vec3 perp0 = normalize(p2 - p0).yxz * vec3(-1, 1, 0) * thickness;\n  vec3 perp1 = normalize(p3 - p1).yxz * vec3(-1, 1, 0) * thickness;\n  \n  float id = pointId;\n  float ux = mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  \n  pos = vec3(mix(p1, p2, vy) + mix(-1., 1., ux) * mix(perp0, perp1, vy)); \n  uv  = vec2(ux, vy);\n}\n\n#define POINTS_PER_LINE 3000.\n#define QUADS_PER_LINE (POINTS_PER_LINE / 6.)\nvoid main() {\n  float lineId = floor(vertexId / POINTS_PER_LINE);\n  float numLines = floor(vertexCount / POINTS_PER_LINE);\n  float quadCount = POINTS_PER_LINE / 6.; \n  float pointId = mod(vertexId, 6.);\n  float quadId = floor(mod(vertexId, POINTS_PER_LINE) / 6.);\n  vec3 pos;\n  vec2 uv;\n  \n  float qn = quadId / quadCount;\n  float ln = lineId / numLines * 50.;\n  float pn = (quadId + mod(pointId, 2.)) / quadCount;\n  float snd0 = texture2D(sound, vec2(mix(0.1, 0.3, pn), mix(0.0, 0.3, pn))).a;\n  float snd1 = texture2D(sound, vec2(mix(0.1, 0.3, pn), mix(0.5, 0.12, pn))).a;\n  \n  \n  float mult = .002;\n  getQuadPoint(\n    //pn + time * 0.5 + ln * .2, \n    (quadId + mod(pointId, 2.)) * mult + time * 0.1 + ln * .42,\n    mult,\n    pointId, \n    0.002 + pow(snd0 + 0.15, 5.0) * 0.05, \n    vec2(\n      pow(0.6 + 0.2, 2.), \n      pow(0.7 + 0.2, 2.)), \n    pos, \n    uv); \n  \n  float across = floor(sqrt(numLines));\n  float down = floor(numLines / across);\n  float xx = mod(lineId, across);\n  float yy = floor(lineId / across);\n  float ux = xx / (across - 1.);\n  float vy = yy / (down - 1.);\n  \n  float aspect = resolution.x / resolution.y;\n \n  mat4 mat = scale(vec3(1, aspect, 1) * .15);\n  mat *= rotZ(time * 0.01);\n  mat *= trans((vec3(ux, vy, 0) * 2. - 1.) * 2.);\n  gl_Position = mat * vec4((pos * 2. - 1.) * mix(5., 15., sin(time * 0.1 + qn) * .5 + .5), 1);\n  gl_Position.xyz /= gl_Position.w;\n  gl_Position.z = -pn;\n  gl_Position.w = 1.;\n\n  float hue = mix(0.95, 1.5, ln * 0.005 + qn * 00.) + time * 0.01;\n  float sat = 1. + sin(time) * .5 - snd1 * 0.3;\n  float val = pow(snd0 + 0.8, 5.) + snd1;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), (pow(snd0 + 0.4, 5.0) + snd1 * 0.5) * pn);\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\n}"
  },
  "screenshotURL": "data/images/images-51wh6l8cue4tx7wk0-thumbnail.jpg",
  "hasSound": true,
  "views": 302,
  "likes": 1,
  "revisionId": "5DGngkh6cpci6Lpks"
}