{
  "_id": "Yg9JRZQhtaWe3dpis",
  "owner": {
    "_id": "F5if23dnvCEmcMssC",
    "createdAt": {
      "$date": {
        "$numberLong": "1446316652572"
      }
    },
    "profile": {
      "first_name": "Mark",
      "last_name": "Pattle",
      "avatarUrl": "https://lh3.googleusercontent.com/-Lca4UGau1OU/AAAAAAAAAAI/AAAAAAAAAI4/dSttspxaINs/photo.jpg"
    },
    "username": "mark"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1446817273538"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1447355790000"
    }
  },
  "origId": null,
  "name": "sphere",
  "private": true,
  "username": "mark",
  "settings": "{\"num\":13503,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/fionabechmann/debussy-clair-de-lune\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0.9058823529411765,0.9058823529411765,0.9058823529411765,1],\"shader\":\"#define PI 3.14159\\n#define N_SAMPLES 10000.\\n\\nbool in_triangle(vec2 p, vec2 a, vec2 b, vec2 c) {\\n  // Compute vectors        \\n  vec2 v0 = c - a;\\n  vec2 v1 = b - a;\\n  vec2 v2 = p - a;\\n\\n  // Compute dot products\\n  float dot00 = dot(v0, v0);\\n  float dot01 = dot(v0, v1);\\n  float dot02 = dot(v0, v2);\\n  float dot11 = dot(v1, v1);\\n  float dot12 = dot(v1, v2);\\n\\n  // Compute barycentric coordinates\\n  float invDenom = 1. / (dot00 * dot11 - dot01 * dot01);\\n  float u = (dot11 * dot02 - dot01 * dot12) * invDenom;\\n  float v = (dot00 * dot12 - dot01 * dot02) * invDenom;\\n\\n  // Check if point is in triangle\\n  return (u >= 0.) && (v >= 0.) && (u + v < 1.);\\n}\\nvec3 lla2xyz(vec2 latlon, float rad) {\\n  float rxz = rad * cos(latlon.y);\\n  \\n  return vec3(\\n    rxz * cos(latlon.x),\\n    rad * sin(latlon.y),\\n    rxz * sin(latlon.x)\\n  );\\n}\\n\\nvec3 aspect(vec3 p) {\\n  float ratio = resolution.y / resolution.x;\\n  if (ratio < 1.)\\n    return vec3(p.x * ratio, p.yz);\\n  else if (ratio > 1.)\\n    return vec3(p.x, p.y / ratio, p.z);\\n  return p;\\n}\\nvec3 project(vec3 p) { return aspect(vec3(p.xy/p.z, -p.z)); }\\n\\nfloat rand(vec2 co){\\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\nvec2 sphere_point(float i) {\\n  // golden ratio\\n  float phi = (sqrt(5.) + 1.) / 2. - 1.;\\n  // golden angle\\n  float ga = phi * 2. * PI;\\n  \\n  \\n  vec2 p = vec2(0.);\\n  if (i > N_SAMPLES + 50.)\\n    return p;\\n  \\n  p.x = ga * i;\\n  p.x /= 2. * PI;\\n  p.x = fract(p.x);\\n  p.x *= 2. * PI;\\n  \\n  p.y = asin(-1. + 2. * i / N_SAMPLES);\\n  return p;\\n}\\n\\nvoid main () {\\n  \\n  gl_PointSize = 20.;\\n  \\n  vec2 latlon = sphere_point(vertexId);\\n  //float f = sin(abs(latlon.y)) / 32.;\\n  //float t = fract(abs(latlon.x - PI) / PI);\\n  float t = sqrt(pow((latlon.x - PI) / PI, 2.) +\\n                 pow((latlon.y) / PI, 2.));\\n  \\n\\n  float max_f = 0.;\\n  float snd = 0.;\\n  for (int i = 0; i < 100; i++) {\\n    float f = float(i)/soundRes.x;\\n  \\tvec2 sp = vec2(.2 * f, t);\\n    float new_snd = pow(texture2D(sound, sp).a, 5.);\\n    if (new_snd > snd) {\\n      snd = new_snd;\\n      max_f = f;\\n    }\\n  }\\n  v_color = vec4(\\n    .5, .5 + sin(max_f * PI), cos(max_f * PI), 1.\\n  );\\n  v_color.rgb *= 1. - snd;\\n  \\n  float rad = .3 + .025 * snd;\\n  latlon.x += mouse.x * PI;\\n  \\n  vec3 pos = lla2xyz(latlon, rad);\\n  float near = .5 + .5 * (pos.z / .325);\\n  v_color *= near;\\n  gl_PointSize = 20.;\\n  \\n  pos -= vec3(0., 0., .6);\\n  pos = project(pos);\\n  \\n  gl_Position = vec4(pos, 1.);\\n}\"}",
  "screenshotURL": "data/images/images-8btn52nmxvoubdi31-thumbnail.jpg",
  "views": {
    "$numberInt": "45"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "qmeBZQvWu3vE7PqQW",
  "hasSound": true,
  "rank": {
    "$numberDouble": "1.8529578487704674"
  },
  "avatarUrl": "https://lh3.googleusercontent.com/-Lca4UGau1OU/AAAAAAAAAAI/AAAAAAAAAI4/dSttspxaINs/photo.jpg"
}