{
  "_id": "eh4QC67q3gssnkYYv",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": 1493741221077
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": 1516102797953
  },
  "modifiedAt": {
    "$date": 1594510026577
  },
  "origId": "PcKwWKK2nMJ7TjaaT",
  "name": "noise tormented structure",
  "notes": "",
  "rank": 10.347064500791365,
  "private": false,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/merzbow/pulse-vegan-part-1",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "//In progress. Based on http://glslsandbox.com/e#42523.0\n\n#define ITERS 40\n#define M_PI 3.1415926535897932384626433832795\n\n#define DEBUG 1\n#define TAU 6.28318530718\n\n//KDrawmode=GL_POINTS\n//KVerticesNumber=100000\n\n#define soundFactor 1.0//KParameter 1.0>>5.\n#define screenSizeRation 1.0//KParameter 0.5>>1.\n\nfloat pattern(vec2 p){p.x*=.866;p.x-=p.y*.5;p=mod(p,1.);return p.x+p.y<1.?0.:1.;}\n\nvoid main ()\n{\n  \n  //float finalVertexCount =  vertexCount;//max((0.5*snd)*vertexCount,5000.);\n  \n  float ratioXforY = resolution.x/resolution.y;\n  \n  float finalVertexCount = floor(vertexCount*ratioXforY);\n  \n  vec2 finalResolution = vec2(sqrt(ratioXforY * finalVertexCount), sqrt(ratioXforY * finalVertexCount)/ratioXforY);\n  \n  //float numAcrossDown = floor(sqrt(finalVertexCount));\n  \n  //float ratio = resolution.y/numAcrossDown;\n  \n  //float maxVertexCount =   numAcrossDown* numAcrossDown;\n  \n  float finalVertexId = mod(vertexId, finalVertexCount);\n  \n  float x = mod(finalVertexId,  finalResolution.x);\n  float y = floor(finalVertexId /  finalResolution.y);\n  \n  float u = (x / finalResolution.x);// * (resolution.y/resolution.x);\n  float v = (y / finalResolution.y);\n  \n  float snd = texture2D(sound, vec2(0.2,  u)).a;\n  snd = soundFactor*pow(0.1+snd,2.);\n  \n  float ux = ( u  * 2.0 - 1.0) * (finalResolution.x/resolution.x);\n  \n  float sndOffset = snd;\n  if(v>0.5)\n    sndOffset = -snd;\n  float vy = sndOffset+( v * 2.0 - 1.0)* (finalResolution.y/resolution.y);\n  \n  \n  \n  \n  //apply fragment logic\n\n  vec2 surfacePosition = vec2(0.,0.);\n  \n\n\tvec2 p = vec2(x,y);\n \n  \n\tvec2 uv1=(p.xy*2.-finalResolution.xy)/min(finalResolution.x,finalResolution.y); \n\tuv1 += surfacePosition;\n\tfloat dp = dot(uv1,uv1);\n\tuv1 /= 1.-dp*dp;\n  \n\tfloat a=0.,d=dot(uv1,uv1),s=0.,t=fract(time*.3),v1=0.;\n\tfor(int i=0;i<8;i++){s=fract(t+a);v+=pattern(uv1*(pow(2.,(1.-s)*8.))*.5)*sin(fract(t+a)*3.14);a+=.125;}\n\t\n \n  \n  \n  gl_PointSize =  (resolution.y/finalResolution.y)*2.-1.;\n\n  v_color = vec4(mix(vec3(.7,.8,1),vec3(.8,.8,.9),d)*v*.25,1);;\n    \n    gl_Position = vec4(ux-distance(v_color.x,v_color.y )/2., vy, 0, 1);\n  \n\n}"
  },
  "screenshotURL": "data/images/images-8t8i8w63y4p16c9b6-thumbnail.jpg",
  "hasSound": true,
  "views": 379,
  "likes": 2,
  "revisionId": "qqAG7DYcpo49YWeGu"
}