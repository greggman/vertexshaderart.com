{
  "_id": "HFcjWasxbbQroZZt3",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1551742745319"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1551742745319"
    }
  },
  "origId": "LHZYGPs7pPvxmLMbm",
  "name": "cube trajectory2 success cubes moving web",
  "notes": "",
  "rank": {
    "$numberDouble": "1.4088862248224194"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "LINE_STRIP",
    "sound": "https://soundcloud.com/djapsara/apsara-afterdark-031-on-frisky-radio-may-2017",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n#define PI radians(180.0)\n \nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n// times 2 minus 1\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// times .5 plus .5\nfloat t5p5(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\nvec3 getQuadStripPoint(const float id) {\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\n  return vec3(ux, vy, 0);\n}\n\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float u = ux / numEdgePointsPerCircle;\n  float v = mix(inner, 1., vy);\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float s = sin(a);\n  float c = cos(a);\n  float x = c * v;\n  float y = s * v;\n  float z = 0.;\n  pos = vec3(x, y, z);  \n}\n\n\n#define CUBE_POINTS_PER_FACE 6.\n#define FACES_PER_CUBE 6.\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\n  float sideId = mod(quadId, 3.);\n  float flip   = mix(1., -1., step(2.5, quadId));\n  // 0 1 2  1 2 3\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\n  float a = pointId * PI * 2. / 4. + PI * 0.25;\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\n  vec3 n = vec3(0, 1, 0) * flip;\n  float lr = mod(sideId, 2.);\n  float ud = step(2., sideId);\n  mat4 mat = rotX(lr * PI * 0.5);\n  mat *= rotZ(ud * PI * 0.5);\n  position = (mat * vec4(p, 1)).xyz;\n  normal = (mat * vec4(n, 0)).xyz;\n}\n\nfloat Hash( vec2 p) {\n     vec3 p2 = vec3(p.xy,1.0);\n    return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*3758.5453123);\n}\n\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n     vec2 f = fract(p);\n     f *= f * (3.0-2.0*f);\n\n    return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),\n               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),\n               f.y);\n}\n\nfloat fbm(vec2 p) {\n     float v = 0.0;\n     v += noise(p*1.0)*.5;\n//     v += noise(p*2.)*.25;\n//     v += noise(p*4.)*.125;\n     return v;\n}\n\nfloat crv(float v) {\n  return fbm(vec2(v, v * 1.23));\n  //float o = sin(v) + sin(v * 2.1) + sin(v * 4.2) + sin(v * 8.9); \n  //return o / 4.;\n}\n\nvec3 fgetCurvePoint(float t) {\n//  return vec3(sin(-t), sin(t * 0.8), sin(t * 0.6));\n//  return vec3( mod(t, 1.) * 0.01, 0, mod(t, 1.));\n  return vec3(\n    crv(t),\n    crv(t + .3),\n    crv(t + .6)\n  ) * 2. - 1.;\n}  \n\n/*\nvec3 getCurvePoint(const float id) {\n  return vec3(\n    sin(id *1.55),\n    cos(id *0.43),\n    sin(id*0.22));\n}\n*/\nvec3 getCurvePoint(const float id) {\n  return vec3(\n    sin(id * 0.99),\n    sin(id * 2.43),\n    sin(id * 1.57));\n}\n\nconst float travelSpeed = -150.;\nconst float expand = 120.;\nconst float off = 0.1;\n\nvoid track(float vertexId, float vertexCount, float base, out vec3 pos, out vec4 color, out mat4 _wmat, out mat4 _emat) {\n  \n  float sv = mod(vertexId+time*travelSpeed,vertexCount) / vertexCount;\n  float v = sv + base;\n  \n  //float off = 0.1;\n  \n  vec3 r0 = getCurvePoint(v + off * 0.);\n  vec3 r1 = getCurvePoint(v + off * 1.);\n  vec3 r2 = getCurvePoint(v + off * 2.);\n  \n  vec3 s0 = normalize(r1 - r0);\n  vec3 s1 = normalize(r2 - r1);\n  \n  vec3 zaxis = normalize(s1 - s0);\n  vec3 xaxis = normalize(cross(s0, s1));\n  vec3 yaxis = normalize(cross(zaxis, xaxis));\n  \n  \n  mat4 wmat = mat4(\n    vec4(xaxis, 0),\n    vec4(yaxis, 0),\n    vec4(zaxis, 0),\n    vec4(r0 * expand, 1)); \n  \n  _wmat = wmat;//mat4(\n  \n  vec3 eye    = r0 * expand + zaxis * 1.;\n  vec3 target = r1 * expand + zaxis;\n  vec3 up     = yaxis;\n  \n  \n  mat4 cmat = lookAt(eye, target, up);\n  _emat = inverse(cmat);\n  \n  \n  pos = (wmat * vec4(1.,1.,1., 1)).xyz;\n  //_cubep =  (wmat * vec4(_cubep, 1)).xyz;\n  color = vec4(1.,1.,1., 1);\n\n}\n\n\n#define kShapeVertexCount 36.0\n#define kVertexPerShape 6.0\n\nvec3 shapeVertex(float _vId, out vec4 _nI)\n{\n    float faceId = floor(_vId / kVertexPerShape);\n    float vtxId = mod(_vId, kVertexPerShape);\n    vec2 fp;\n    vec3 v;\n    \n    if(vtxId <= 1.0) {\n        fp = vec2(1.0, 1.0);\n    }\n    else if(vtxId == 2.0) {\n        fp = vec2(-1.0, 1.0);\n    }\n    else if(vtxId == 3.0) {\n        fp = vec2(1.0, -1.0);\n    }\n    else {\n        fp = vec2(-1.0, -1.0);\n    }\n    \n    if(faceId == 0.0) {\n        \n        v = vec3(fp.x, fp.y, 1.0);\n        _nI = vec4(0.0, 0.0, 1.0, faceId);\n    }\n    else if(faceId == 1.0) {\n        \n        v = vec3(-fp.x, fp.y, -1.0);\n        _nI = vec4(0.0, 0.0, -1.0, faceId);\n    }\n    else if(faceId == 2.0) {\n        \n        v = vec3(fp.x, 1.0, -fp.y);\n        _nI = vec4(0.0, 1.0, 0.0, faceId);\n    }\n    else if(faceId == 3.0) {\n        \n        v = vec3(fp.x, -1.0, fp.y);\n        _nI = vec4(0.0, -1.0, 0.0, faceId);\n    }\n    else if(faceId == 4.0) {\n        \n        v = vec3(-1.0, fp.y, -fp.x);\n        _nI = vec4(-1.0, 0.0, 0.0, faceId);\n    }\n    else {\n        \n        v = vec3(1.0, fp.y, fp.x);\n        _nI = vec4(1.0, 0.0, 0.0, faceId);\n    }\n    \n    return v;\n}\n\n\n\nvec3 shade(vec3 _eye, vec3 _p, vec3 _n, vec3 _dfscol, float _amb, vec2 _spec)\n{\n    vec3 rgb;\n    vec3 lit = normalize(vec3(1.0, 1.0, 4.0));\n    \n    float diffuse = max(0.0, dot(_n, lit)) * (1.0 - _amb) + _amb;\n    \n    vec3 h = normalize(normalize(_eye - _p) + lit);\n    float specular = 1.0;\n    if(diffuse > 0.0) {\n        specular = max(0.,dot(_n, h));\n    }\n    \n    rgb = diffuse * _dfscol + specular * _spec.y;\n    \n    return rgb;\n}\n\n\n\nvoid main() {\n  const float numTrackPoints = 30000.0;\n  const float numFunkPoints = 3600.0;     // must be multiple of 3\n    \n//\n    float sizeFactor = 1./4.;\n    \n    float shapeCount = floor(vertexCount / 36.);\n    float shapeId = floor(vertexId / 36.);\n    float shapeVertexId = mod(vertexId, 36.);\n \n    float shapeRelId = shapeId/shapeCount;\n    \n      \n    float numberOfElementPerGroup = 10.;\n    float groupId = floor(shapeId/numberOfElementPerGroup);\n    float groupCount = floor(shapeCount/numberOfElementPerGroup);\n    float shapeIdInGroup = mod(shapeId,numberOfElementPerGroup);\n    float relGroupId = shapeIdInGroup/numberOfElementPerGroup;\n    float snd = 2.*texture2D(sound, vec2(shapeRelId, 0.)).a;\n  \n  \n  float base = 14.5;  // good place to adjust\n  base = time * 1.0;\n\n  /*\n  vec3 b0 = getCurvePoint(base + off * 0.);\n  vec3 b1 = getCurvePoint(base + off * 1.);\n  vec3 b2 = getCurvePoint(base + off * 2.);\n  \n  vec3 c0 = normalize(b1 - b0);\n  vec3 c1 = normalize(b2 - b1);\n  \n  vec3 czaxis = normalize(c1 - c0);\n  vec3 cxaxis = normalize(cross(c0, c1));\n  vec3 cyaxis = normalize(cross(czaxis, cxaxis));\n  \n \n  vec3 eye    = b0 * expand + czaxis * 1.;\n  vec3 target = b1 * expand + czaxis;\n  vec3 up     = cyaxis;\n  */\n  \n  /*\n//Static eye\n  vec3 eye = vec3(0.5, 0.5, 2.5)*expand;\n  vec3 target = vec3(0.5, 0.5, 0.)*expand;\n  vec3 up     = vec3(0.5, 0.5, 1.5);\n  */\n  //Following eye\n  float sv = mod( (0. /2.)+time*0.,groupCount) / 1.;\n  float v = sv + base;\n  \n  vec3 r0 = getCurvePoint(v + off * 0.);\n  vec3 r1 = getCurvePoint(v + off * 1.);\n  vec3 r2 = getCurvePoint(v + off * 2.);\n  \n  vec3 s0 = normalize(r1 - r0);\n  vec3 s1 = normalize(r2 - r1);\n  \n  vec3 zaxis = normalize(s1 - s0);\n  vec3 xaxis = normalize(cross(s0, s1));\n  vec3 yaxis = normalize(cross(zaxis, xaxis));\n  \n \n  vec3 eye    = r1 * expand + zaxis * 1.;\n  vec3 target = r2 * expand + zaxis;\n  vec3 up     = yaxis;\n  \n  \n  mat4 cmat = lookAt(eye, target, up);\n  mat4 vmat = inverse(cmat);\n  \n \n \n    \n   \n    vec4 cbNi;\n  \n    vec3 cubep = shapeVertex(shapeVertexId, cbNi);;\n      \n    //cubep*= sizeFactor;\n    mat4 scaleMat = scale(vec3(sizeFactor,(3.+snd*snd)*sizeFactor,sizeFactor));\n    \n    cubep = (scaleMat*vec4(cubep,1.)).xyz;\n    mat4 zrot = rotZ(relGroupId*2.*PI);\n    cubep = (zrot*vec4(cubep,1.)).xyz;\n  //cbNi*=scaleMat;\n  \n     //create the circle group\n    \n  \n    \n    float radius = 100.*sizeFactor;\n    cubep.x+= radius*sin(2.*PI*shapeIdInGroup/numberOfElementPerGroup);\n    cubep.y+= radius*cos(2.*PI*shapeIdInGroup/numberOfElementPerGroup);\n  //cubep.z = mod(time*2.,3.);\n  //cubep = vec3(cubep.x , cubep.y+sndFactor*snd, cubep.z+lineId*patternSize +mod(time*speedFactor,patternSize));//position\n    \n       vec3 pos;\n  vec4 color;\n  \n   \n   //shapeId = mod(shapeId+time, shapeCount);\n  //base+= mod(time,2.);\n  mat4 wmat;\n  mat4 emat;\n  \n  //shapeId = mod(shapeId+time, shapeCount);\n  track(shapeId, shapeCount, base, pos, color, wmat, emat);\n   \n  //mat4 invmat = inverse(wmat);\n  //wmat.z = vec4(0.,0.,0.,1.);\n  \n  vec3 posi = (wmat * vec4(0.,0.,0., 1)).xyz;\n  \n  \n  cubep = (vec4(cubep.xyz,1.)*emat).xyz;\n  \n  cbNi = cbNi*wmat;\n  cubep+= posi;\n  //float rotx = atan( wmat.y, wmat.z );\n  //float roty = Math.atan2( x * Math.cos(rotx), z )\n  //float rotz = Math.atan2( Math.cos(rotx), Math.sin(rotx) * Math.sin(roty) \n                  \n  \n  //cbNi.xyz+= posi;\n  \n  vec3 finalcolor = shade(eye, cubep, cbNi.xyz, vec3(1.), 0.6, vec2(64.0, .8));\n  gl_PointSize = 2.;\n  mat4 pmat = persp(radians(60.0), resolution.x / resolution.y, .1, 1000.0);\n  gl_Position = pmat * vmat * vec4(cubep, 1);\n  v_color = vec4(finalcolor,1.);\n}\n"
  },
  "screenshotURL": "data/images/images-ak12h6rwllvxwrt26-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "12"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "PdMyL6sCe3M5JHYob"
}