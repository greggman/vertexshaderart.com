{
  "_id": "6koiJAeZMvqyq7fpb",
  "owner": {
    "_id": "8YazjgbR8FtHJgYgR",
    "createdAt": {
      "$date": {
        "$numberLong": "1689266555980"
      }
    },
    "username": "ersh",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/a55f941068214979f79e0d64d5062a5d?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1689315025688"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1689315025688"
    }
  },
  "origId": "dMsa7ScyoyExY3Cxk",
  "name": "reakt",
  "notes": "",
  "rank": {
    "$numberDouble": "1.5532026507393375"
  },
  "private": false,
  "unlisted": true,
  "username": "ersh",
  "avatarUrl": "https://secure.gravatar.com/avatar/a55f941068214979f79e0d64d5062a5d?default=retro&size=200",
  "settings": "{\"num\":21600,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/lazerhawk/skull-and-shark\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"//                         _                _               _                     _   \\n//         __   _____ _ __| |_ _____  _____| |__   __ _  __| | ___ _ __ __ _ _ __| |_ \\n//         \\\\ \\\\ / / _ \\\\ '__| __/ _ \\\\ \\\\/ / __| '_ \\\\ / _` |/ _` |/ _ \\\\ '__/ _` | '__| __|\\n//          \\\\ V /  __/ |  | ||  __/>  <\\\\__ \\\\ | | | (_| | (_| |  __/ | | (_| | |  | |_ \\n//           \\\\_/ \\\\___|_|   \\\\__\\\\___/_/\\\\_\\\\___/_| |_|\\\\__,_|\\\\__,_|\\\\___|_|  \\\\__,_|_|   \\\\__|\\n//\\n//\\n\\n\\n\\nvec3 gSunColor = vec3(1.0, 1.0, 1.0) * 10.0;  \\n\\nvec3 gSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\\nvec3 gSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\\n\\nvec3 gCubeColor = vec3(1.0, 1.0, 1.0);\\nfloat gExposure = 1.0;\\n\\nfloat gCubeColorRandom = 0.0;\\n\\n#define MOVE_OUTWARDS\\n\\nfloat fAOAmount = 0.8;\\nfloat gFloorHeight = -1.0;\\nfloat g_cameraFar = 1000.0;\\n\\n#define PI radians( 180.0 )\\n\\n\\nvec3 GetSunDir()\\n{\\n  \\treturn normalize( vec3( 1.0, 0.3, -0.5 ) );\\n}\\n\\n\\nvoid GetQuadInfo( const float vertexIndex, out vec2 quadVertId, out float quadId )\\n{\\n    float twoTriVertexIndex = mod( vertexIndex, 6.0 );\\n    float triVertexIndex = mod( vertexIndex, 3.0 );\\n  \\n    if \\t\\t( twoTriVertexIndex < 0.5 ) quadVertId = vec2( 0.0, 0.0 );\\n    else if\\t( twoTriVertexIndex < 1.5 )\\tquadVertId = vec2( 1.0, 0.0 );\\n    else if ( twoTriVertexIndex < 2.5 )\\tquadVertId = vec2( 0.0, 1.0 );\\n    else if ( twoTriVertexIndex < 3.5 )\\tquadVertId = vec2( 1.0, 0.0 );\\n    else if ( twoTriVertexIndex < 4.5 )\\tquadVertId = vec2( 1.0, 1.0 );\\n    else \\t\\t\\t\\t\\t\\t\\t\\tquadVertId = vec2( 0.0, 1.0 );\\n\\n    quadId = floor( vertexIndex / 6.0 );\\n}\\n\\n\\nvoid GetQuadTileInfo( const vec2 quadVertId, const float quadId, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\\n{\\n    vQuadTileIndex.x = floor( mod( quadId, vDim.x ) );\\n    vQuadTileIndex.y = floor( quadId / vDim.x );\\n\\n  \\tvQuadUV.x = floor(quadVertId.x + vQuadTileIndex.x);\\n    vQuadUV.y = floor(quadVertId.y + vQuadTileIndex.y);\\n\\n    vQuadUV = vQuadUV * (1.0 / vDim);\\n}\\n\\n\\nvoid GetQuadTileInfo( const float vertexIndex, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\\n{\\n  \\tvec2 quadVertId;\\n  \\tfloat quadId;\\n\\tGetQuadInfo( vertexIndex, quadVertId, quadId );  \\n  \\tGetQuadTileInfo( quadVertId, quadId, vDim, vQuadTileIndex, vQuadUV );   \\n}\\n\\n\\nvoid GetMatrixFromZY( const vec3 vZ, const vec3 vY, out mat3 m )\\n{\\n   vec3 vX = normalize( cross( vY, vZ ) );\\n   vec3 vOrthoY = normalize( cross( vZ, vX ) );\\n   m[0] = vX;\\n   m[1] = vOrthoY;\\n   m[2] = vZ;\\n}\\n\\n\\nvoid GetMatrixFromZ( vec3 vZAxis, out mat3 m )\\n{\\n  \\tvec3 vZ = normalize(vZAxis);\\n   \\tvec3 vY = vec3( 0.0, 1.0, 0.0 );\\n  \\tif ( abs(vZ.y) > 0.99 )\\n    {\\n       vY = vec3( 1.0, 0.0, 0.0 );\\n    }\\n  \\tGetMatrixFromZY( vZ, vY, m );\\n}\\n\\n\\nstruct SceneVertex\\n{\\n  \\tvec3 vWorldPos;\\n  \\tvec3 vColor;\\n  \\tfloat fAlpha;\\n};\\n\\n\\nfloat GetCosSunRadius()\\n{\\n  return 0.01;\\n}\\n\\n\\nfloat GetSunIntensity()\\n{  \\t\\n  \\treturn 0.001;\\n}\\n\\n\\nvec3 GetSkyColor( vec3 vViewDir )\\n{\\n\\treturn mix( gSkyBottom, gSkyTop, max( 0.0, vViewDir.y ) );\\n}\\n#define g_cubeFaces\\t\\t\\t\\t\\t6.0\\n#define g_cubeVerticesPerFace\\t\\t( 2.0 * 3.0 )\\n#define g_cubeVertexCount \\t\\t\\t( g_cubeVerticesPerFace * g_cubeFaces )\\n\\n//                   6          7\\n//                    +----------+\\n//                   /|         /|\\n//                2 / |       3/ |\\n//                 +----------+  |\\n//                 |  |       |  |\\n//      Y   Z      | 4|       | 5|\\n//                 |  +-------|--+\\n//      ^ /        | /        | /\\n//      |/        0|/        1|/\\n//      +--> X     +----------+\\n  \\nvec3 GetCubeVertex( float fVertexIndex )\\n{\\n\\tvec3 fResult = vec3( 1.0 );\\n  \\n  \\tfloat f = fVertexIndex / 8.0;\\n  \\tif ( fract( f * 4.0 ) < 0.5 )\\n    {\\n    \\tfResult.x = -fResult.x;\\n    }\\n  \\n  \\tif ( fract( f * 2.0 ) < 0.5 )\\n    {\\n    \\tfResult.y = -fResult.y;\\n    }\\n\\n  \\tif ( fract( f ) < 0.5 )\\n    {\\n    \\tfResult.z = -fResult.z;\\n    }\\n  \\n  \\treturn fResult;\\n}\\n\\n\\nvoid GetCubeVertex( const float vertexIndex, const mat4 mat, out vec3 vWorldPos, out vec3 vWorldNormal )\\n{\\n  \\tfloat fFaceIndex = floor( vertexIndex / g_cubeFaces );\\n\\n  \\tvec3 v0, v1, v2, v3;\\n  \\n  \\tif ( fFaceIndex < 0.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 0.0 );\\n      \\tv1 = GetCubeVertex( 2.0 );\\n      \\tv2 = GetCubeVertex( 3.0 );\\n      \\tv3 = GetCubeVertex( 1.0 );\\n    }\\n  \\telse if ( fFaceIndex < 1.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 5.0 );\\n      \\tv1 = GetCubeVertex( 7.0 );\\n      \\tv2 = GetCubeVertex( 6.0 );\\n      \\tv3 = GetCubeVertex( 4.0 );\\n    }\\n  \\telse if ( fFaceIndex < 2.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 1.0 );\\n      \\tv1 = GetCubeVertex( 3.0 );\\n      \\tv2 = GetCubeVertex( 7.0 );\\n      \\tv3 = GetCubeVertex( 5.0 );\\n    }\\n  \\telse if ( fFaceIndex < 3.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 4.0 );\\n      \\tv1 = GetCubeVertex( 6.0 );\\n      \\tv2 = GetCubeVertex( 2.0 );\\n      \\tv3 = GetCubeVertex( 0.0 );\\n    }\\n  \\telse if ( fFaceIndex < 4.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 2.0 );\\n      \\tv1 = GetCubeVertex( 6.0 );\\n      \\tv2 = GetCubeVertex( 7.0 );\\n      \\tv3 = GetCubeVertex( 3.0 );\\n    }\\n  \\telse\\n    {\\n      \\tv0 = GetCubeVertex( 1.0 );\\n      \\tv1 = GetCubeVertex( 5.0 );\\n      \\tv2 = GetCubeVertex( 4.0 );\\n      \\tv3 = GetCubeVertex( 0.0 );\\n    }\\n  #if 0\\n  \\tv0 = (vec4(v0, 1) * mat).xyz;\\n  \\tv1 = (vec4(v1, 1) * mat).xyz;\\n  \\tv2 = (vec4(v2, 1) * mat).xyz;\\n  \\tv3 = (vec4(v3, 1) * mat).xyz;\\n  #else\\n  \\tv0 = (mat * vec4(v0, 1)).xyz;\\n  \\tv1 = (mat * vec4(v1, 1)).xyz;\\n  \\tv2 = (mat * vec4(v2, 1)).xyz;\\n  \\tv3 = (mat * vec4(v3, 1)).xyz;\\n  #endif\\n  \\tfloat fFaceVertexIndex = mod( vertexIndex, 6.0 );\\n  \\n  \\tif ( fFaceVertexIndex < 0.5 )\\n    {\\n\\t  \\tvWorldPos = v0;\\n    }\\n  \\telse if ( fFaceVertexIndex < 1.5 )\\n    {\\n\\t  \\tvWorldPos = v1;\\n    }\\n  \\telse if ( fFaceVertexIndex < 2.5 )\\n    {\\n\\t  \\tvWorldPos = v2;\\n    }\\n  \\telse if ( fFaceVertexIndex < 3.5 )\\n    {\\n\\t  \\tvWorldPos = v0;\\n    }\\n  \\telse if ( fFaceVertexIndex < 4.5 )\\n    {\\n\\t  \\tvWorldPos = v2;\\n    }\\n  \\telse\\n    {\\n\\t  \\tvWorldPos = v3;\\n    }\\n  \\n  \\tvWorldNormal = normalize( cross( v1 - v0, v2 - v0 ) );  \\n}\\n\\n\\nvec3 GetSunLighting( const vec3 vNormal )\\n{\\n  \\tvec3 vLight = -GetSunDir();\\n  \\n  \\tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\\n \\t  \\n  \\treturn gSunColor * NdotL;\\n}\\n\\n\\nvec3 GetSunSpec( const vec3 vPos, const vec3 vNormal, const vec3 vCameraPos )\\n{\\n  \\tvec3 vLight = -GetSunDir();\\n\\n  \\tvec3 vView = normalize( vCameraPos - vPos );\\n  \\n  \\tvec3 vH = normalize( vView - vLight );\\n  \\n  \\tfloat NdotH = max( 0.0, dot( vNormal, vH ) );\\n  \\tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\\n \\n  \\tfloat f = mix( 0.01, 1.0, pow( 1.0 - NdotL, 5.0 ) );\\n  \\n  \\treturn gSunColor * pow( NdotH, 20.0 ) * NdotL * f * 4.0;\\n}\\n\\n\\nvec3 GetSkyLighting( const vec3 vNormal )\\n{\\n  \\tvec3 vSkyLight = normalize( vec3( -1.0, -2.0, -0.5 ) );\\n  \\n  \\tfloat fSkyBlend = vNormal.y * 0.5 + 0.5;\\n \\n  \\treturn mix( gSkyBottom, gSkyTop, fSkyBlend );\\n}\\n\\n\\nvoid GenerateCubeVertex( const float vertexIndex, const mat4 mat, const vec3 vCubeCol, const vec3 vCameraPos, out SceneVertex outSceneVertex )\\n{  \\n  vec3 vNormal;\\n\\n  GetCubeVertex( vertexIndex, mat, outSceneVertex.vWorldPos, vNormal );\\n\\n  outSceneVertex.vColor = vec3( 0.0 );\\n\\n  outSceneVertex.fAlpha = 1.0;  \\n\\n  float h = outSceneVertex.vWorldPos.y - gFloorHeight;\\n  outSceneVertex.vColor += GetSkyLighting( vNormal );\\n  outSceneVertex.vColor *= mix( 1.0, fAOAmount, clamp( h, 0.0, 1.0 ) );\\n\\n  outSceneVertex.vColor += GetSunLighting( vNormal );\\n\\n  outSceneVertex.vColor *= vCubeCol;      \\n\\n  outSceneVertex.vColor += GetSunSpec( outSceneVertex.vWorldPos, vNormal, vCameraPos );\\n}\\n\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p)\\n{\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  #if 0\\n  return mat4(\\n    1, 0, 0, trans[0],\\n    0, 1, 0, trans[1],\\n    0, 0, 1, trans[2],\\n    0, 0, 0, 1);\\n  #else\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n  #endif\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nvoid GetCubePosition( float fCubeId, out mat4 mat, out vec3 vCubeCol )\\n{  \\n  \\tfloat fSeed = fCubeId;\\n  \\tfloat fPositionBase = fCubeId;\\n  \\tfloat fSize = 1.0;\\n\\n  \\tvec3 vCubeOrigin = vec3( 0.0, 0.0, 4.0 );\\n  \\n    float across = 32.;\\n    float down = 20.;\\n    float u = mod(fCubeId, across) / across;\\n    float v = floor(fCubeId / across) / down;\\n    float lng = u * PI * 2.;\\n    float lat = v * PI;\\n\\n    float snd = texture2D(sound, vec2(mix(0.015, 0.015, u), abs(v  - 0.5) * 0.5)).a;\\n  \\n    vCubeOrigin.z += pow(snd, 10.0) * 10.0;\\n    float fScale = mix(0.1, 0.6, sin(lat)) * snd * 1.32;\\n  \\n    mat  = ident();\\n  \\tmat *= rotZ(lng);\\n  \\tmat *= rotY(lat);\\n    mat *= trans(vCubeOrigin);\\n    mat *= uniformScale(fScale);\\n  \\n  \\tvec3 vRandCol;\\n\\n    float s2 = texture2D(sound, vec2(mix(0.015, 0.015, u), v * 0.1)).a;\\n  \\n    float s3 = pow(snd + 0.1, 50.);\\n    vCubeCol = mix(hsv2rgb(vec3(1,s3,s3)), vec3(0,0,0), pow(s2, 40.0));  \\n    vCubeCol = mix(vCubeCol, vec3(1,1,1), step(0.95,s2));\\n}\\n\\n\\nvoid main()\\n{ \\n  \\tSceneVertex sceneVertex;\\n  \\n  \\tvec2 vMouse = mouse;\\n  \\n  \\tfloat fov = 1.5;\\n  \\n  \\tfloat animTime = time;\\n  \\n  \\tfloat orbitAngle = animTime * 0.3456 + 4.0;\\n  \\tfloat elevation = -2.2 + (sin(animTime * 0.223 - PI * 0.5) * 0.5 + 0.5) * 0.5;\\n  \\tfloat fOrbitDistance = 25.0 + (cos(animTime * 0.2345) * 0.5 + 0.5 ) * 10.0;\\n  \\n  \\tvec3 vCameraTarget = vec3( 0.0, 1.0, 0.0 );\\n  \\tvec3 vCameraPos = vCameraTarget + vec3( sin(orbitAngle) * cos(elevation), sin(elevation * 1.11), cos(orbitAngle * 0.97) * cos(elevation) ) * fOrbitDistance;\\n  \\tvec3 vCameraUp = vec3( 0.1, 1.0, 0.0 );\\n  \\n  \\tvec3 vCameraForwards = normalize(vCameraTarget - vCameraPos);\\n  \\n  \\tmat3 mCamera;\\n    GetMatrixFromZY( vCameraForwards, normalize(vCameraUp), mCamera );\\n  \\n  \\tfloat vertexIndex = vertexId;\\n  \\n  \\n    float fCubeId = floor( vertexIndex / g_cubeVertexCount );\\n    float fCubeVertex = mod( vertexIndex, g_cubeVertexCount );\\n\\n    {\\n      mat4 mCube;\\n      vec3 vCubeCol;\\n\\n      GetCubePosition( fCubeId, mCube, vCubeCol );\\n\\n      GenerateCubeVertex( fCubeVertex, mCube, vCubeCol, vCameraPos, sceneVertex );\\n    }\\n\\n\\n    // Fianl output position\\n\\tvec3 vViewPos = sceneVertex.vWorldPos;\\n    vViewPos -= vCameraPos;\\n  \\tvViewPos =  vViewPos * mCamera;\\n  \\t\\n  \\tvec2 vFov = vec2( 1.0, resolution.x / resolution.y ) * fov;\\n  \\tvec2 vScreenPos = vViewPos.xy * vFov;\\n\\n\\tgl_Position = vec4( vScreenPos.xy, -1.0, vViewPos.z );\\n    \\n  \\t// Final output color\\n  \\tfloat fExposure = min( gExposure, time * 0.1 );\\n  \\tvec3 vFinalColor = sqrt( vec3(1.0) - exp2( sceneVertex.vColor * -fExposure ) );\\n  \\n  \\tv_color = vec4(vFinalColor * sceneVertex.fAlpha, 1.);//sceneVertex.fAlpha);    \\n}\"}",
  "screenshotURL": "data/images/images-cktdl62s7v2cwradt-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "WTGLTLNHKQHoL4PdX"
}