{
  "_id": "EhoHuSv6ou8bp9o66",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1466379641311
  },
  "modifiedAt": {
    "$date": 1466722328033
  },
  "origId": "PHjEAtNPJWshykNWj",
  "name": "sploot",
  "notes": "",
  "rank": 10.845431726393716,
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/quakemusic/major7-d-addiction-drugs-chapeleiro-quake-remix",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "#define PI radians(180.)\n#define NUM_POINTS_PER_GROUP 16.0\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  float groupId = floor(vertexId / NUM_POINTS_PER_GROUP);\n  float pointId = mod(vertexId, NUM_POINTS_PER_GROUP);\n  float ps = pointId / NUM_POINTS_PER_GROUP;\n  float numGroups = floor(vertexCount / NUM_POINTS_PER_GROUP);\n  float down = floor(sqrt(numGroups));\n  float across = floor(numGroups / down);\n\n  float px = mod(groupId, across);\n  float py = floor(groupId / across);\n  float pu = px / across;\n  float pv = py / down;\n  \n  float sv = abs(atan(pv * 2. - 1., pu * 2. - 1.) / PI);\n  float sy = abs((pu * 2. - 1.) * (pv * 2. - 1.));\n  float snd = texture2D(sound, vec2(mix(0.002, 0.008, sv), sy * 0.5)).a;\n  float sn2 = texture2D(sound, vec2(mix(0.01, 0.3, sy), sv * 0.5)).a;\n   \n  float t = time + 1000.;\n  float tm = t * 0.5 - ps * 0.4 * (sin(t + pu * 3. * pv * 4.) * 0.5 + 0.5);\n  vec2 xy = vec2(\n    pu * 2. - 1. + sin(tm + px * 0.1) * 0.1 + cos(tm * px * py *  0.000009) * 0.1,\n    pv * 2. - 1. + sin(tm * 0.77 + py * 0.1) * cos(tm + px * 0.011) * 0.1\n  );\n  gl_Position = vec4(xy * 1.2, ps, 1);\n  gl_PointSize = 12.0 + sin(time * px * py * 0.000001) * 10.;\n  gl_PointSize *= resolution.x / 1600. * .5;\n\n  float hue = 0.5 + pow(sn2, 3.0)* 0.3; //(time * 0.01 + pu * 0.2);\n  v_color = vec4(hsv2rgb(vec3(hue, 1., pow(sn2 + 0.4, 6.))), mix(0.9, 0., ps));\n  float pump = step(0.9, snd);\n  float pumps = (snd - 0.9) * 10.;\n  v_color.rgb = mix(v_color.rgb, vec3(mix(0.5, 1., pumps),0,0), pump);\n  gl_PointSize *= mix(1., 2., pump);\n  v_color.rgb *= v_color.a;\n}"
  },
  "screenshotURL": "data/images/images-qmjglkdlpkhcujrw6-thumbnail.jpg",
  "hasSound": true,
  "views": 288,
  "likes": 6,
  "revisionId": "t6NXePpvRrZevYnjG"
}