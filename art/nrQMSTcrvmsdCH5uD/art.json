{
  "_id": "nrQMSTcrvmsdCH5uD",
  "owner": {
    "_id": "8gFDpMkijwvE2RW9h",
    "createdAt": {
      "$date": {
        "$numberLong": "1624633833286"
      }
    },
    "profile": {
      "name": "hinga",
      "avatarUrl": "https://avatars.githubusercontent.com/hinga-?s=200"
    },
    "username": "hinga-"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1624633854111"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1624633854111"
    }
  },
  "origId": "CTzsP7M5MfkwZGXy2",
  "name": "spiderweb spheres every day",
  "notes": "test",
  "rank": {
    "$numberDouble": "1.9424387958451077"
  },
  "private": true,
  "unlisted": false,
  "username": "hinga-",
  "avatarUrl": "https://avatars.githubusercontent.com/hinga-?s=200",
  "settings": "{\"num\":10433,\"mode\":\"TRI_STRIP\",\"sound\":\"https://soundcloud.com/mogueheart/contact-part-2\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"/*\\n   point cloud vs spheres by Kabuto\\n\\n   Recreated this well-known demo effect. A bit tricky without being able to store history for points, so it's just computed again and again for each render pass\\n*/\\n\\nvec3 posf2(float t, float i) {\\n\\treturn vec3(\\n      sin(t+i*.9553) +\\n      sin(t*1.311+i) +\\n      sin(t*1.4+i*1.53) +\\n      sin(t*1.84+i*.76),\\n      sin(t+i*.79553+2.1) +\\n      sin(t*1.311+i*1.1311+2.1) +\\n      sin(t*1.4+i*1.353-2.1) +\\n      sin(t*1.84+i*.476-2.1),\\n      sin(t+i*.5553-2.1) +\\n      sin(t*1.311+i*1.1-2.1) +\\n      sin(t*1.4+i*1.23+2.1) +\\n      sin(t*1.84+i*.36+2.1)\\n\\t)*.2;\\n}\\n\\nvec3 posf0(float t) {\\n  return posf2(t,-1.)*3.5;\\n}\\n\\nvec3 posf(float t, float i) {\\n  return posf2(t*.3,i) + posf0(t);\\n}\\n\\nvec3 push(float t, float i, vec3 ofs, float lerpEnd) {\\n  vec3 pos = posf(t,i)+ofs;\\n  \\n  vec3 posf = (fract(pos+.5)-.5);\\n  \\n  float l = length(posf)*2.;\\n  return (- posf + posf/l)*(1.-smoothstep(lerpEnd,1.,l));\\n}\\n\\nvoid main() {\\n  // more or less random movement\\n  float t = time*.2;\\n  float i = vertexId*.13;\\n\\n//  vec3 pos = posf(t,i);\\n  vec3 pos = posf(0.6, 0.5);\\n  vec3 ofs = vec3(0.);\\n  //for (float f = -1.; f < 0.; f++) {\\n\\t  //ofs += push(t+f*.05,i,ofs,2.-exp(-f*.1));\\n  //}\\n  ofs += push(t,i,ofs,0.5);\\n  \\n  //pos -= posf0(t);\\n  \\n  pos += ofs;\\n  \\n  \\n  //pos.yz *= mat2(.8,.6,-.6,.8);\\n  //pos.xz *= mat2(.8,.6,-.6,.8);\\n  \\n  pos *= 0.5;\\n  \\n\\n  pos.z += 1.7;\\n  \\n  //pos.xy *= (3.-pos.z)*.7;\\n  \\n  gl_Position = vec4(pos.x, pos.y*resolution.x/resolution.y, 1.-vertexId*0.000001, 1);\\n  gl_PointSize = 1./pos.z*(1.+10.*pow(sin(time*0.3+vertexId)*.5+.5,8000.))*(1.+30.*pow(sin(time*0.03+vertexId*0.4352)*.5+.5,400000.))*3.;\\n\\n  v_color = vec4(abs(ofs/max(length(ofs),1e-9))*.3+.7,1)*.1;\\n}\"}",
  "screenshotURL": "data/images/images-1qyedcizd6prarsg1-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "2"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "6i3qAEaSyPgCchHPi"
}