{
  "_id": "NfQPZoWHTBFY7AKy5",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": 1493741221077
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": 1493741405271
  },
  "modifiedAt": {
    "$date": 1493746559094
  },
  "origId": "zQMGMroYDChPD5qbu",
  "name": "K Machine exposed shader2 ",
  "notes": "K Machine exposed shader2, not so smiling",
  "rank": 10.20538568786383,
  "private": false,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/drumcomplex/torsten-kanzler-overdog-drumcomplex-remix-tkr",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n//KDrawmode=GL_TRIANGLES\n#define parameter0 1.//KParameter0 0.>>5.\n#define parameter1 0.4//KParameter1 0.>>5.\n#define parameter2 1.//KParameter2 0.>>1.\n#define parameter3 1.//KParameter3 -0.5>>1.\n#define parameter4 1.//KParameter4 0.>>2.\n#define parameter5 1.//KParameter5 0.>>2.\n#define parameter6 0.3//KParameter6 0.1>>0.4\n#define parameter7 1.//KParameter7 0.>>1.\n\n\n\n#define HPI 1.570796326795\n#define PI   3.1415926535898\n\nvec3 hashv3(vec3 _v) {\n    return fract(sin(_v * vec3(43758.5453123, 12345.6789012,76543.2109876)));\n}\n\nvec3 rotX(vec3 _v, float _rad) {\n    vec2 f = sin(vec2(_rad, _rad + HPI));\n    vec3 r = _v;\n    r.y = _v.y * f.y + _v.z * -f.x;\n    r.z = _v.y * f.x + _v.z *  f.y;\n    return r;\n}\n\nvec3 rotY(vec3 _v, float _rad) {\n    vec2 f = sin(vec2(_rad, _rad + HPI));\n    vec3 r = _v;\n    r.x =  _v.x *  f.y + _v.z *  f.x;\n    r.z =  _v.x * -f.x + _v.z *  f.y;\n    return r;\n}\n\nvec3 rotZ(vec3 _v, float _rad) {\n    vec2 f = sin(vec2(_rad, _rad + HPI));\n    vec3 r = _v;\n    r.x =  _v.x *  f.x + _v.y * f.y;\n    r.y =  _v.x * -f.y + _v.y * f.x;\n    return r;\n}\n\n\nvec4 perspective(vec3 _v, float _fov, float _near, float _far, vec2 _res) {\n    vec4 r = vec4(_v, -_v.z);\n    r.xy *= vec2(_res.y / _res.x, 1.0) / tan(radians(_fov * 0.5));\n    r.z = (-_v.z * (_far + _near) - 2.0 * _far * _near) / (_far - _near);\n    return r;\n}\n\nvec3 lookAt(vec3 _v, vec3 _eye, vec3 _look, vec3 _up) {\n    vec3 z = normalize(_eye - _look);\n    vec3 x = normalize(cross(_up, z));\n    vec3 y = cross(z, x);\n    vec4 r = mat4(x.x, y.x, z.x, 0.0, x.y, y.y, z.y, 0.0, x.z, y.z, z.z, 0.0, 0.0, 0.0, 0.0, 1.0) *mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -_eye.x, -_eye.y, -_eye.z, 1.0)* vec4(_v, 1.0);\n    return r.xyz;\n}\n\n\n#define kCubeVertexCount 36.0\n\nvec3 shapeVertex(float _vid, out vec4 _ni, float _factor) {\n    float faceId = floor(_vid / 6.0);\n    float vtxId = mod(_vid, 6.0);\n    vec2 fp;\n    vec3 p;\n    \n    if(vtxId <= 1.0) {\n        fp = vec2(1.0, 1.0);\n    }\n    else if(vtxId == 2.0) {\n        fp = vec2(-1.0, 1.0);\n    }\n    else if(vtxId == 3.0) {\n        fp = vec2(1.0, -1.0);\n    }\n    else {\n        fp = vec2(-1.0, -1.0);\n    }\n    \n    if(faceId == 0.0) {\n        // front\n        p = vec3(fp.x, fp.y, _factor);\n        _ni = vec4(0.0, 0.0, 1.0, faceId);\n    }\n    else if(faceId == 1.0) {\n        // back\n        p = vec3(-fp.x, fp.y, -1.0);\n        _ni = vec4(0.0, 0.0, -1.0, faceId);\n    }\n    else if(faceId == 2.0) {\n        // top\n        p = vec3(fp.x, 1.0, -fp.y);\n        _ni = vec4(0.0, 1.0, 0.0, faceId);\n    }\n    else if(faceId == 3.0) {\n        // bottom\n        p = vec3(fp.x, -1.0, fp.y);\n        _ni = vec4(0.0, 0.0, -1.0, faceId);\n    }\n    else if(faceId == 4.0) {\n        // right\n        p = vec3(-1.0, fp.y, -fp.x);\n        _ni = vec4(-1.0, 0.0, 0.0, faceId);\n    }\n    else {\n        // left\n        p = vec3(1.0, fp.y, fp.x);\n        _ni = vec4(1.0, 0.0, 0.0, faceId);\n    }\n    \n    return p;\n}\n\n\n\nvec3 shade(vec3 _eye, vec3 _p, vec3 _n, vec3 _dfscol, float _amb, vec2 _spec)\n{\n    vec3 rgb;\n    vec3 lit = normalize(vec3(1.0, 1.0, 4.0));\n    \n    float diffuse = max(0.0, dot(_n, lit)) * (1.0 - _amb) + _amb;\n    \n    vec3 h = normalize(normalize(_eye - _p) + lit);\n    float specular = 1.0;\n    if(diffuse > 0.0) {\n        specular = max(0.1,dot(_n, h));//specular = max(0.0, pow(dot(_n, h), _spec.x));\n    }\n    \n    rgb = diffuse * _dfscol + specular * _spec.y;\n    \n    return rgb;\n}\n\n\n\n#define elementPerShape 12.\n\n\nvec3 getShapeKVector(float _vertexId, float _junctionY, float _secondVertY, float _barWidth)\n{\n    vec3 result = vec3(0., 0.,-1.);\n    \n    if(_vertexId<1.)\n    {\n        result.xy = vec2(0.,0.);\n    }\n    else\n        \n        if(_vertexId<2.)\n        {\n            result.xy = vec2(0.,1.);\n        }\n    \n        else\n            if(_vertexId<3.)\n            {\n                result.xy = vec2(_barWidth,1.);\n            }\n            else //2nd triangle\n                if(vertexId<4.)\n                {\n                    result.xy = vec2(0.,0.0);\n                }\n                else\n                    if(_vertexId<5.)\n                    {\n                        result.xy = vec2(_barWidth,1.);\n                    }\n                    else\n                        if(_vertexId<6.)\n                        {\n                            result.xy = vec2(_barWidth,0.);//PROBLEM !!\n                        }\n                        else\n                            if(_vertexId<7.)//3 eme triangle\n                            {\n                                result.xy = vec2(_barWidth,_junctionY);\n                            }\n                            else\n                                if(_vertexId<8.)\n                                {\n                                    result.xy = vec2((_secondVertY+_barWidth),1.);\n                                }\n                                else\n                                    if(_vertexId<9.)\n                                    {\n                                        result.xy = vec2(_secondVertY,1.);\n                                        \n                                    }\n    \n                                    else\n                                        if(_vertexId<10.)//4eme triangle\n                                        {\n                                            result.xy = vec2(_barWidth,_junctionY);\n                                            \n                                        }\n                                        else\n                                            if(_vertexId<11.)\n                                            {\n                                                result.xy = vec2((_secondVertY+_barWidth),0.);\n                                                \n                                            }\n    \n                                            else\n                                                if(_vertexId<12.)\n                                                {\n                                                    result.xy = vec2(_secondVertY,0.);\n                                                    \n                                                }\n    \n    return result;\n}\n\n#define elementPerTriangleShape 3.\nvec3 getTriangle(float _vertexId, vec2 _center, float _radius, float _angle)\n{\n    vec3 result = vec3(0., 0.,-1.);\n    \n    \n    float localVertexId = mod(_vertexId, elementPerTriangleShape);\n    \n    \n    float localAngle = localVertexId*2.*PI/elementPerTriangleShape;\n    //result.xy = _center+_radius*vec2(cos(localAngle),sin(localAngle));\n    result.xy = _radius*vec2(cos(localAngle),sin(localAngle));\n    result = rotZ(result,_angle);\n    result.xy+=_center.xy;\n    return result;\n}\n\nvec3 getTriangleCircle(float _vertexId, vec2 _center, float _radius, float _numberOfElements, float _triangleSize, float _rotationAngleRad, float _cosFactor, float _sinFactor)\n{\n    vec3 result = vec3(0., 0.,-1.);\n    \n    //triangle index\n    float shapeId = floor(_vertexId/elementPerTriangleShape);\n    \n    \n    //index of the vertex in the triangle\n    float localVertexId = mod(_vertexId, elementPerTriangleShape);\n    \n    float relShapeId = shapeId/_numberOfElements;\n    \n    float trianglePosAngle = relShapeId*(2.*PI)+_rotationAngleRad;\n    \n    vec2 trianglePos = vec2(_center.x+_radius*_cosFactor*cos(trianglePosAngle), _center.y+_radius*_sinFactor*sin(trianglePosAngle));\n    \n     result = getTriangle(localVertexId, trianglePos, _triangleSize, trianglePosAngle);\n    \n    return result;\n}\n\n\nvec3 getTriangleLimitedCircle(float _vertexId, vec2 _center, float _radius, float _numberOfElements, float _triangleSize, float _rotationAngleRad, float _startAngle, float _endAngle, float _cosFactor, float _sinFactor)\n{\n    vec3 result = vec3(0., 0.,-1.);\n    \n    //triangle index\n    float shapeId = floor(_vertexId/elementPerTriangleShape);\n    \n    \n    //index of the vertex in the triangle\n    float localVertexId = mod(_vertexId, elementPerTriangleShape);\n    \n    float relShapeId = shapeId/_numberOfElements;\n    \n    //float trianglePosAngle = relShapeId*(2.*PI)+_rotationAngleRad;\n    \n    //angle must be between _startAngle and _endAngle\n    float trianglePosAngle = _startAngle+relShapeId*(_endAngle-_startAngle)+_rotationAngleRad;\n    \n    vec2 trianglePos = vec2(_center.x+_radius*_cosFactor*cos(trianglePosAngle), _center.y+_radius*_sinFactor*1.*sin(trianglePosAngle));\n    \n    //vec2 trianglePos = vec2(relShapeId*10.,0.);\n    //result.xy = trianglePos;//getTriangle(localVertexId, trianglePos, 0.02, trianglePosAngle);\n    result = getTriangle(localVertexId, trianglePos, _triangleSize, trianglePosAngle+PI/2.);\n    \n    return result;\n}\n\n#define shapeNumForEye 20.\n#define shapeNumForMouth 20.\n#define shapeNumForHead 40.\n#define shapeNumForPupil 1.\n#define shapeNumForEar 30.\n\nvoid main() {\n    \n    vec3 color = vec3(1.);\n    float vertu = (vertexId/vertexCount);\n    \n    float sndFactor = texture2D(sound, vec2(0.01, 0.)).r;\n    \n    float eyesY = 0.3;\n    float eye1X = 0.35;\n    \n    float earsY = 0.4;\n    float ear1X = 0.85;\n    \n    float mouthY = -0.3;\n    vec2 center = vec2(-0.5,eyesY);\n   \n    vec3 _v = vec3(0.,0.,0.);\n    \n    \n    float vertexCount = 0.;\n    \n    float stopVerticesForEye1 = shapeNumForEye*elementPerTriangleShape;\n    float stopVerticesForEye2 = stopVerticesForEye1+shapeNumForEye*elementPerTriangleShape;\n    float stopVerticesForMouth = stopVerticesForEye2+shapeNumForMouth*elementPerTriangleShape;\n    float stopVerticesForHead = stopVerticesForMouth+shapeNumForHead*elementPerTriangleShape;\n    float stopVerticesForPupil1 = stopVerticesForHead+shapeNumForPupil*elementPerTriangleShape;\n    float stopVerticesForPupil2 = stopVerticesForPupil1+shapeNumForPupil*elementPerTriangleShape;\n    \n    float stopVerticesForEar1 = stopVerticesForPupil2+shapeNumForEar*elementPerTriangleShape;\n    float stopVerticesForEar2 = stopVerticesForEar1+shapeNumForEar*elementPerTriangleShape;\n    \n    float numberOfTriangles = 20.;\n    if(vertexId< stopVerticesForEye1)//1 eye\n    {\n        center = vec2(-eye1X,eyesY);\n        _v = getTriangleCircle(vertexId, center, 0.15, shapeNumForEye, 0.05+sndFactor/50., time, parameter4*cos(time), parameter4*cos(time));\n        \n    }\n    else//2nd eye\n        if(vertexId< stopVerticesForEye2)\n        {\n            center = vec2(eye1X,eyesY);\n            _v = getTriangleCircle(vertexId, center, 0.15, shapeNumForEye, 0.05+sndFactor/50., -time, parameter5*sin(time), parameter5*sin(time));\n            \n        }\n        else//mouth\n            if(vertexId< stopVerticesForMouth)\n            {\n                //mouth\n                center = vec2(0.,mouthY);\n                //numberOfTriangles = 20.;\n                //_v = getTriangleLimitedCircle(vertexId-stopVerticesForEye2, center, 0.4, shapeNumForMouth, 0.02+sndFactor/10., 0., PI, 2.*PI, parameter2, parameter3);\n                _v = getTriangleCircle(vertexId, center, 0.25, shapeNumForMouth, 0.05+sndFactor/50., 7.*time, parameter0, parameter1*cos(time));\n            }\n    \n            else\n                if(vertexId< stopVerticesForHead)\n                {\n                    \n                    center = vec2(0.,0.);\n                    //numberOfTriangles = 100.;\n                    _v = getTriangleLimitedCircle(vertexId, center, 0.8, shapeNumForEye, 0.01+sndFactor/10., time, PI, 2.*PI, 1.,1.);\n                }\n                else\n                    if(vertexId< stopVerticesForPupil1)\n                    {\n                        \n                        center = vec2(eye1X,eyesY);\n                        //numberOfTriangles = 100.;\n                        //_v = getTriangleLimitedCircle(vertexId, center, 0., shapeNumForPupil, 0.02, time, PI, 2.*PI, parameter6, parameter7);\n                        _v = getTriangleCircle(vertexId, center, 0.0, shapeNumForEye, 0.03+sndFactor/50., 7.*time, 1., parameter5);\n                    }\n                    else\n                        if(vertexId< stopVerticesForPupil2)\n                        {\n                            \n                            center = vec2(-eye1X,eyesY);\n                            //numberOfTriangles = 100.;\n                            //_v = getTriangleLimitedCircle(vertexId, center, 0., shapeNumForPupil, 0.02, time, PI, 2.*PI, parameter6, parameter7);\n                            _v = getTriangleCircle(vertexId, center, 0.0, shapeNumForEye, 0.03+sndFactor/50., -5.*time, 1., parameter5);\n                        }\n                        else\n                            if(vertexId< stopVerticesForEar1)\n                            {\n                                \n                                center = vec2(ear1X+parameter6/2.,earsY);\n                                _v = getTriangleCircle(vertexId, center, parameter6, shapeNumForEar, 0.05+sndFactor/50., 5.*time, 1., parameter7);\n                            }\n                            else\n                                if(vertexId< stopVerticesForEar2)\n                                {\n                                    \n                                    center = vec2(-ear1X-parameter6/2.,earsY);\n                                    _v = getTriangleCircle(vertexId, center, parameter6, shapeNumForEar, 0.05+sndFactor/50., -5.*time, 1., parameter7);\n                                }\n    _v.x*=resolution.y/resolution.x;\n    gl_Position = vec4(_v, 1.);\n    gl_PointSize = 10.;\n    v_color = vec4(color, 1.);\n    \n}\n\n\n\n"
  },
  "screenshotURL": "data/images/images-6097xa50kdr0vu9b4-thumbnail.jpg",
  "hasSound": true,
  "views": 490,
  "likes": 2,
  "revisionId": "Txo8XdzMZ5Fs3synK"
}