{
  "_id": "TCDXMAgg5629wT79d",
  "owner": {
    "_id": "AKayQxJZqd5z7boy2",
    "createdAt": {
      "$date": {
        "$numberLong": "1550038451574"
      }
    },
    "profile": {
      "first_name": "Archer",
      "last_name": "Wann",
      "avatarUrl": "https://lh5.googleusercontent.com/-yNdyToHV35U/AAAAAAAAAAI/AAAAAAAABxw/qQAHdzq4gr8/photo.jpg",
      "info": "CS student at UVU"
    },
    "username": "archer"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1550085587591"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1550086417716"
    }
  },
  "origId": null,
  "name": "egg",
  "notes": "",
  "rank": {
    "$numberDouble": "1.1788316537188557"
  },
  "private": false,
  "unlisted": true,
  "username": "archer",
  "avatarUrl": "https://lh5.googleusercontent.com/-yNdyToHV35U/AAAAAAAAAAI/AAAAAAAABxw/qQAHdzq4gr8/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/home-2001/resonance",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI radians(180.)\n#define MAX_RAY_STEPS 30\n#define MIN_DISTANCE 0.0001\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 distanceEstimator(vec3 p) {\n  //float sx = mod(floor(p.y / 2.0) / 320.0, 1.0);\n  //float sy = mod(floor(p.z / 2.0) / 160.0, 1.0);\n  //float snd = texture2D(sound, vec2(sx, sy)).a;\n  \n  vec3 sphereCenter = vec3(4.0, 0.0, 0.0);\n  float radius = 1.0;\n  \n  vec3 pNew = vec3(p.x, mod(abs(p.y), 2.0) - 1.0, mod(abs(p.z), 2.0) - 1.0);\n  \n  float distance = length(pNew - sphereCenter) - radius;\n  \n  int eggi = int(p.z / (radius * 2.0)) * 2;\n  int eggj = int(p.y / (radius * 2.0)) * 2;\n  \n  return vec2(abs(distance), float(eggi + eggj) / 40.0 + time / 10.0);\n}\n\nvec3 trace(vec3 from, vec3 direction) {\n\tfloat totalDistance = 0.0;\n\tint steps;\n    vec2 result;\n\tfor (int i=0; i < MAX_RAY_STEPS; i++) {\n        steps++;\n\t\tvec3 p = from + totalDistance * direction;\n        result = distanceEstimator(p);\n\t\tfloat distance = result.x;\n\t\ttotalDistance += distance;\n\t\tif (distance < MIN_DISTANCE) break;\n\t}\n\treturn vec3(result.y, 1.0, 1.0-float(steps)/float(MAX_RAY_STEPS));\n}\n\nvoid main() {\n  \n  float wh = floor(sqrt(vertexCount));\n  gl_PointSize = max(resolution.x, resolution.y) / wh;\n  \n  float sx = (mod(vertexId, wh) / wh) * 2.0 - 1.0;\n  float sy = (ceil(vertexId / wh) / wh) * 2.0 - 1.0;\n  \n  gl_Position = vec4(sx, sy, 0.0, 1.0);\n  \n  float trueX = sx * resolution.x / 500.0;\n  float trueY = sy * resolution.y / 500.0;\n  \n  vec3 camera = vec3(-1.0, 0.0, 0.0);\n  vec3 direction = normalize(vec3(1.0, trueX, trueY));\n  vec3 pixelColor = trace(camera, direction);\n  \n  v_color = vec4(hsv2rgb(pixelColor), 1.0);\n}"
  },
  "screenshotURL": "data/images/images-9nf4nyg6x9n40501j-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "11"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "mp6HPZPkc2DdaraSb"
}