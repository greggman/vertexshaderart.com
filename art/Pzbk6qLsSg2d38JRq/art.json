{
  "_id": "Pzbk6qLsSg2d38JRq",
  "owner": {
    "_id": "RfHaub5KYDRmJTzBN",
    "createdAt": {
      "$date": {
        "$numberLong": "1629553450441"
      }
    },
    "username": "przemyslawzaworski",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/3a3abcfa29dc9b0fa9fd2fb25ff10892?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1648065752246"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1648065752246"
    }
  },
  "origId": null,
  "name": "Procedural Sphere With Tessellation",
  "notes": "",
  "rank": {
    "$numberDouble": "1.171298086457843"
  },
  "private": false,
  "unlisted": false,
  "username": "przemyslawzaworski",
  "avatarUrl": "https://secure.gravatar.com/avatar/3a3abcfa29dc9b0fa9fd2fb25ff10892?default=retro&size=200",
  "settings": {
    "num": 24576,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "const mat4 ModelViewProjection = mat4(\n\t0.974278,  0.000000,  0.000000,  0.000000,\n\t0.000000,  1.705737, -0.173752, -0.173648,\n\t0.000000,  0.300767,  0.985398,  0.984807,\n\t0.000000,  1.301937,  9.427560,  10.021725\n);\n\nvec3 Hash(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx+33.33);\n\treturn fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nvoid main() \n{\n\tint tessellationFactor = 64; // vertex count = _TessellationFactor * _TessellationFactor * 6\n\tint instance = int(floor(vertexId / 6.0));\n\tfloat x = sign(mod(20.0, mod(float(vertexId), 6.0) + 2.0));\n\tfloat y = sign(mod(18.0, mod(float(vertexId), 6.0) + 2.0));\n\tfloat u = (float(instance / tessellationFactor) + x) / float(tessellationFactor);\n\tfloat v = (mod(float(instance), float(tessellationFactor)) + y) / float(tessellationFactor);\n\tfloat pi = 3.14159265359;\n\tfloat radius = 4.0;\n\tfloat a = sin(pi * u) * cos(2.0 * pi * v);\n\tfloat b = cos(pi * u);\n\tfloat c = sin(pi * u) * sin(2.0 * pi * v);\n\tvec3 position = vec3(a, b, c) * radius;\n\tgl_Position = ModelViewProjection * vec4(position, 1.0);\n\tvec3 normalDir = normalize(position);\n\tvec3 lightDir = normalize(vec3(0, 0, -10));\n\tfloat diffusion = max(dot(lightDir, normalDir), 0.0);\n\tv_color = vec4(Hash(float(instance + 123)), 1.0) * vec4(vec3(diffusion), 1.0);\n}"
  },
  "screenshotURL": "data/images/images-gzyo53tr1ng52yz76-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "203"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "DTfDrp6Zkac8YH3rD"
}