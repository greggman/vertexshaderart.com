{
  "_id": "S24QeFuvJgsKJ3gdB",
  "owner": {
    "_id": "QbQ2gsZew9NYBL5Qp",
    "createdAt": {
      "$date": {
        "$numberLong": "1540073755569"
      }
    },
    "profile": {
      "first_name": "Pöstpöp",
      "last_name": "Tart",
      "avatarUrl": "https://lh3.googleusercontent.com/-JUIeC9mYGbM/AAAAAAAAAAI/AAAAAAAAACE/f6C0Rr97fYs/photo.jpg"
    },
    "username": "pöstpöp"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1540075906885"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1540075906885"
    }
  },
  "origId": "EjE5NRrJcWgx7nqze",
  "name": "deliver04",
  "notes": "",
  "rank": {
    "$numberDouble": "1.7942923721809099"
  },
  "private": false,
  "unlisted": true,
  "username": "pöstpöp",
  "avatarUrl": "https://lh3.googleusercontent.com/-JUIeC9mYGbM/AAAAAAAAAAI/AAAAAAAAACE/f6C0Rr97fYs/photo.jpg",
  "settings": "{\"num\":25000,\"mode\":\"POINTS\",\"sound\":\"mic\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"/*\\n             _           \\n _ _ ___ ___| |_ ___ _ _ \\n| | | -_|  _|  _| -_|_'_|\\n \\\\_/|___|_| |_| |___|_,_|\\n     _         _         \\n ___| |_ ___ _| |___ ___ \\n|_ -|   | .'| . | -_|  _|\\n|___|_|_|__,|___|___|_|  \\n         _               \\n ___ ___| |_             \\n| .'|  _|  _|            \\n|__,|_| |_|              \\n                         \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n*/\\n\\n#define PI radians(180.)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nmat4 rotX(float angle) {\\n\\n    float s = sin( angle );\\n    float c = cos( angle );\\n\\n    return mat4(\\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0,-s, c, 0,\\n      0, 0, 0, 1);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  #if 0\\n  return mat4(\\n    1, 0, 0, trans[0],\\n    0, 1, 0, trans[1],\\n    0, 0, 1, trans[2],\\n    0, 0, 0, 1);\\n  #else\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n  #endif\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat p1m1(float v) {\\n  return v * .5 + .5;\\n}\\n\\nfloat inRange(float v, float minV, float maxV) {\\n  return step(minV, v) * step(v, maxV);\\n}\\n\\nfloat at(float v, float target) {\\n  return inRange(v, target - 0.1, target + 0.1);\\n}\\n\\n\\n\\nvec3 getRandomCubePoint(float seed) {\\n  vec3 p = vec3(\\n    m1p1(hash(seed)), \\n    m1p1(hash(seed * 0.731)),\\n    m1p1(hash(seed * 1.319)));\\n  float axis = hash(seed * 0.911) * 3.;\\n  if (axis < 1.) {\\n    p[0] = mix(-1., 1., step(0., p[0]));\\n  } else if (axis < 2.) {\\n    p[1] = mix(-1., 1., step(0., p[1]));\\n  } else {\\n    p[2] = mix(-1., 1., step(0., p[2]));\\n  }\\n  return p;\\n}\\n\\nvec3 getRandomBoxPoint(float seed) {\\n  vec3 p = vec3(\\n    m1p1(hash(seed)), \\n    m1p1(hash(seed * 0.731)),\\n    m1p1(hash(seed * 1.319)));\\n  float axis = hash(seed * 0.911) * 3.;\\n  if (axis < 1.) {\\n    p[0] = mix(-1., 1., step(0., p[0]));\\n    p[1] = mix(-1., 1., step(0., p[1]));\\n  } else if (axis < 2.) {\\n    p[1] = mix(-1., 1., step(0., p[1]));\\n    p[2] = mix(-1., 1., step(0., p[2]));\\n  } else {\\n    p[2] = mix(-1., 1., step(0., p[2]));\\n    p[0] = mix(-1., 1., step(0., p[0]));\\n  }\\n  return p;\\n}\\n\\nvec3 getRandomSpherePoint(float seed) {\\n  return normalize(vec3(\\n    m1p1(hash(seed)), \\n    m1p1(hash(seed * 0.731)),\\n    m1p1(hash(seed * 1.319))));\\n}\\n\\nvec3 getRandomSphereVolumePoint(float seed) {\\n  return normalize(vec3(\\n    m1p1(hash(seed)), \\n    m1p1(hash(seed * 0.731)),\\n    m1p1(hash(seed * 1.319)))) * hash(seed * 2.117);\\n}\\n\\nvec3 getRandomCubeVolumePoint(float seed) {\\n  return vec3(\\n    m1p1(hash(seed)), \\n    m1p1(hash(seed * 0.731)),\\n    m1p1(hash(seed * 1.319)));\\n}\\n\\nvec3 getRandomFunkPoint(float seed, float xDivs, float yDivs) {\\n  mat4 m = rotX(PI * 2.0 * floor(hash(seed) * xDivs) / xDivs);\\n  m *= rotY(PI * 2.0 * floor(hash(seed * 0.731) * yDivs) / yDivs);\\n  m *= rotZ(hash(seed * 0.311) * PI * 2.);\\n  return (m * vec4(vec2(hash(seed * 2.117), 0) * 0.5, 1, 1)).xyz;\\n}\\n\\nvec3 getRandomFunkOutPoint(float seed, float xDivs, float yDivs) {\\n  mat4 m = rotX(PI * 2.0 * floor(hash(seed) * xDivs) / xDivs);\\n  m *= rotY(PI * 2.0 * floor(hash(seed * 0.731) * yDivs) / yDivs);\\n  m *= rotZ(hash(seed * 0.311) * PI * 2.);\\n  return (m * vec4(vec2(1, 0) * 0.5, 1, 1)).xyz;\\n}\\n\\nvec3 getPoint(float set, float seed) {\\n  set = mod(set, 7.);\\n  if (set < 1.) \\n  {\\n    return getRandomCubePoint(seed);\\n  }\\n  if (set < 2.) \\n  {\\n    return getRandomSphereVolumePoint(seed);\\n  }\\n  if (set < 3.) \\n  {\\n    return getRandomFunkPoint(seed, 3., 3.);\\n  }\\n  if (set < 4.) \\n  {\\n    return getRandomSpherePoint(seed);\\n  }\\n  if (set < 5.) \\n  {\\n    return getRandomBoxPoint(seed);\\n  }\\n  if (set < 6.)\\n  {\\n    return getRandomCubeVolumePoint(seed);\\n  }\\n  return getRandomFunkOutPoint(seed, 4., 3.);\\n}\\n\\nfloat easeInOutCubic(float pos) {\\n  if ((pos /= 0.5) < 1.) {\\n    return 0.5 * pow(pos, 3.);\\n  }\\n  return 0.5 * (pow((pos - 2.), 3.) + 2.);\\n}\\n\\nvec3 getLerpedPoint(float time, float seed) {\\n  float set = mod(time, 7.);\\n  vec3 p0 = getPoint(set, seed);\\n  vec3 p1 = getPoint(set + 1., seed);\\n  return mix(p0, p1, easeInOutCubic(fract(time)));\\n}\\n\\n#define DOTS_PER 4000.\\n\\nvoid main() {\\n  float v = vertexId / vertexCount;\\n  float invV = 1.0 - v;\\n  float thingId = floor(vertexId / DOTS_PER);\\n  float numThings = floor(vertexCount / DOTS_PER);\\n  float thingV = thingId / numThings;\\n\\n//  float snd = texture2D(sound, vec2(thingV * 0.05 + 0.01, mod(time + thingV * 4., 4.) * 60. / 240.)).a;\\n  float snd = texture2D(sound, vec2(thingV * 0.05 + 0.01, 0.)).a;\\n  vec3 p = getLerpedPoint(time + thingV + hash(thingId) * 7., v * 4. + time * 0.01);\\n//  vec3 p = getLerpedPoint(snd * 6., v * 4. + time * 0.01);\\n  \\n  float cameraRadius = 13.;\\n  float camAngle = time * 0.3;\\n  vec3 eye = vec3(cos(camAngle) * cameraRadius, sin(time) * 3., sin(camAngle) * cameraRadius);\\n  vec3 target = vec3(0, 0, 0);\\n  vec3 up = vec3(0, 1, 0);\\n\\n  mat4 m = persp(radians(60.), resolution.x / resolution.y, 1., 29.);\\n  m *= cameraLookAt(eye, target, up);\\n  m *= trans(vec3(\\n    m1p1(hash(thingId * 0.179)) * 6., \\n    m1p1(hash(thingId * 0.317)) * 6., \\n    m1p1(hash(thingId * 0.251)) * 6.));\\n  m *= uniformScale(mix(1.0, 1.5, hash(thingId * 0.799)));\\n  gl_Position = m * vec4(p, 1);\\n  float clipZ = p1m1(gl_Position.z / gl_Position.w);\\n  float invClipZ = 1. - clipZ;\\n\\n  float hue = 0.8+ v * 0.1;\\n  hue = mix(hue, 0.5, mod(floor(time * 60.0), 2.));\\n  hue = mix(hue, .3, step(0.9, snd));\\n  float sat = 1.;\\n  float val = invClipZ * 150.;\\n  v_color = vec4(mix(background.rgb, hsv2rgb(vec3(hue, sat, val)), pow(snd, 3.0)), 1);\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), mix(0., 2.5, pow(snd, 4.0)));\\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\\n  gl_PointSize = 18. / gl_Position.z;\\n}\"}",
  "screenshotURL": "data/images/images-4qmrm3k6bm7q94bfb-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "psJx9Jt3QeKkhzZu9"
}