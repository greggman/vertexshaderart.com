{
  "_id": "cYSbbDEEERcyLekzE",
  "owner": {
    "_id": "ppYg9yMRSssfA5Fed",
    "createdAt": {
      "$date": 1684322328046
    },
    "profile": {
      "name": null,
      "avatarUrl": "https://avatars.githubusercontent.com/ChaerinPark?s=200"
    },
    "username": "chaerinpark"
  },
  "createdAt": {
    "$date": 1685512296926
  },
  "modifiedAt": {
    "$date": 1685512533762
  },
  "origId": null,
  "name": "Circles from Triangles_Own variation",
  "notes": "",
  "rank": 1.3852704260402253,
  "private": false,
  "unlisted": true,
  "username": "chaerinpark",
  "avatarUrl": "https://avatars.githubusercontent.com/ChaerinPark?s=200",
  "settings": {
    "num": 50742,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/user-698140890/limbus-company-chapter-3?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "//Name : Chaerin Park\n//Assignment : Exercise - Vertexshaderart : Circles from Triangles\n//Course : CS250\n//Spring 2023\n\nvec3 hsv2rgb(vec3 c)\n{\n\tc = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  \tvec4 k = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  \tvec3 p = abs(fract(c.xxx + k.xyz) * 6.0 - k.www);\n  \treturn c.z * mix(k.xxx, clamp(p - k.xxx, 0.0, 1.0), c.y);\n}\n\n#define PI radians(180.0)\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\n\n\nvec2 getCirclePoint(float id, float numCircleSegments)\n{\n  float ux = floor(id / 6.0) + mod(id, 2.0);\n  float vy = mod(floor(id / 2.0) + floor(id / 3.0), 2.0);\n  \n  float angle = ux / 20.0 * PI * 2.0;\n  float c = cos(angle);\n  float s = sin(angle);\n  \n  float radius = vy + 1.0;\n  \n  float x = c * radius;\n  float y = s * radius;\n  \n  return vec2(x,y);\n}\n\nvoid main()\n{\n  \tfloat numCircleSegments = 5.0;\n  \tvec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\n  \n  \tfloat numPointsPerCircle = numCircleSegments * 6.0;\n  \tfloat circleId = floor(vertexId / numPointsPerCircle);\n  \tfloat numCircles = floor(vertexCount / numPointsPerCircle);\n  \t\n  \tfloat sliceId = floor(vertexId / 6.0);\n  \tfloat oddSlice = mod(sliceId, 2.0);\n  \n\tfloat down = floor(sqrt(numCircles));\n  \tfloat across = floor(numCircles / down);\n  \n  \tfloat x = mod(circleId, across);\n  \tfloat y = floor(circleId / across);\n  \n  \tfloat u = x / (across - 1.0);\n  \tfloat v = y / (across - 1.0);\n  \n  \tfloat xoff = 0.0; //sin(time + y * 0.2) * 0.1;\n  \tfloat yoff = 0.0; //sin(time * 1.1 + x * 0.3) * 0.2;\n  \n  \tfloat ux = u * 2.0 - 1.0 + xoff;\n  \tfloat vy = v * 2.0 - 1.0 + yoff;\n  \n  \tfloat su = abs(u - 0.5) * 2.0;\n  \tfloat sv = abs(v - 0.5) * 2.0;\n  \tfloat au = abs(atan(su, sv)) / PI;\n  \tfloat av = length(vec2(su, sv));\n  \tfloat snd = texture2D(sound, vec2(au * 0.05, av * 0.25)).a;\n  \n  \tfloat aspect = resolution.x / resolution.y;\n  \tfloat sc = pow(snd + 0.2, 5.0) * mix(1.0, -0.5, oddSlice);\n  \n  \tsc *= 20.0 / across;\n  \n  \tvec4 pos = vec4(circleXY, 0.0, 1.0);\n  \tmat4 mat = ident();\n  \tmat *= scale(vec3(1.0, aspect, 1.0));\n  \tmat *= rotZ(time * 0.3);\n  \tmat *= rotX(time * 2.0);\n  \tmat *= rotY(-time * 0.1);\n  \tmat *= trans(vec3(ux * 0.5, vy * 0.5, 0.0) * 1.3);\n \tmat *= rotZ(snd * sign(ux));\n  \tmat *= uniformScale(0.03 * sc);\n  \n  \t//vec2 xy = circleXY * 0.1 * sc + vec2(ux, vy) * 1.3;\n  \t\n  \tgl_Position = mat * pos;\n  \n  \tfloat soff = 0.0; //sin(time + x * y * 0.02) * 5.0;\n  \n  \tgl_PointSize = pow(snd + 0.2, 5.0) * 30.0 + soff;\n  \tgl_PointSize *= 20.0 / across;\n  \tgl_PointSize *= resolution.x / 600.0;\n  \n  \tfloat pump = step(0.8, snd);\n  \tfloat hue = u * 0.1 + snd * 0.2 + time * 0.1; //sin(time + v * 20.0) * 0.05;\n  \tfloat sat = mix(0.5, 1.0, pump) * 0.3;\n  \tfloat val = mix(0.1, pow(snd + 0.2, 5.0), pump);\n  \n  \thue = hue + pump * oddSlice * 0.5;\n  \tval += oddSlice * pump * 0.8;\n  \n  \tv_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n}"
  },
  "screenshotURL": "data/images/images-l8jnsq2iq43go4fa7-thumbnail.jpg",
  "hasSound": true,
  "views": 3,
  "likes": 0,
  "revisionId": "faWv8nMNn9mX9SDNk"
}