{
  "_id": "PSjv6ihn8226ALFCx",
  "owner": {
    "_id": "95683ZgBuRkukjtj7",
    "createdAt": {
      "$date": {
        "$numberLong": "1589922178477"
      }
    },
    "profile": {
      "first_name": "Markus",
      "last_name": "Q",
      "avatarUrl": "https://lh3.googleusercontent.com/a-/AOh14GifvlNvBe-lLi3fzBlpXK1QVVIW7V5Nwqq8cssCjA"
    },
    "username": "markus"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1598910207617"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1598910207617"
    }
  },
  "origId": "w39M6FR7PCQctz5bN",
  "name": "sockwaves",
  "notes": "",
  "rank": {
    "$numberDouble": "1.3590392327644878"
  },
  "private": false,
  "unlisted": true,
  "username": "markus",
  "avatarUrl": "https://lh3.googleusercontent.com/a-/AOh14GifvlNvBe-lLi3fzBlpXK1QVVIW7V5Nwqq8cssCjA",
  "settings": "{\"num\":100000,\"mode\":\"TRIANGLES\",\"sound\":\"mic\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// ðŸ’™ðŸ’™ðŸ’™ðŸ’™ðŸ’™\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// from: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\nvec3 rgb2hsv(vec3 c) {\\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n  vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\n  vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\n\\n  float d = q.x - min(q.w, q.y);\\n  float e = 1.0e-10;\\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\\n\\n#define PI radians(180.)\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nvec2 getCirclePoint(float id, float numCircleSegments) {\\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\\n  \\n  float angle = ux / numCircleSegments * PI * 2.;\\n  float c = cos(angle);\\n  float s = sin(angle);\\n  \\n  float radius = mix(0.5, 1.0, vy);\\n  float x = c * radius;\\n  float y = s * radius;\\n  \\n  return vec2(x, y);\\n}\\n\\n\\nvoid main() {\\n  float numCircleSegments = 4.0;\\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\\n  float numPointsPerCircle = numCircleSegments * 6.;\\n  \\n  float circleId = floor(vertexId / numPointsPerCircle);\\n  float numCircles = floor(vertexCount / numPointsPerCircle);\\n  \\n  float sliceId = floor(vertexId / 6.);\\n  float oddSlice = mod(sliceId, 2.);\\n  \\n  float down = sqrt(numCircles);\\n  float across = floor(numCircles / down);\\n  float x = mod(circleId, across);\\n  float y = floor(circleId / across);\\n  \\n  float u = x / (across - 1.);\\n  float v = y / (across - 1.);\\n  \\n  float su = abs(u - 0.5) * 2.;\\n  float sv = abs(v - 0.5) * 2.;\\n  \\n  float au = abs(atan(su, sv)) / PI;\\n  float av = length(vec2(su, sv));\\n  \\n  const int spots = 20;\\n  float snd = 0.;\\n  float totalSnd = 0.;\\n  vec3 color = vec3(0);\\n  for (int sp = 0; sp < spots; ++sp) {\\n    float spf = float(sp + 11);\\n    float spx = hash(spf * 7.123);\\n    float spy = hash(spf * 0.317);\\n    float sps = hash(spf * 3.411);\\n    \\n    float sds = distance(vec2(u, v), vec2(spx, spy));\\n    float invSds = pow(clamp(1. - sds, 0., 1.), 3.);\\n    totalSnd += invSds;\\n    snd += texture2D(sound, vec2(mix(0.01, 0.151, sps), sds * .9)).a *\\n      mix(0.95, 1.7, sps) * invSds;\\n    \\n    color = mix(color, hsv2rgb(vec3(sps, 1., 1.)), pow(invSds, 2.));\\n  }  \\n  snd /= totalSnd;\\n\\n  float xoff = 0.;//sin(time + y * 0.2) * 0.1;\\n  float yoff = 0.;//sin(time + x * 0.3) * 0.2;\\n  \\n  float ux = u * 2. - 1. + xoff;\\n  float vy = v * 2. - 1. + yoff;\\n\\n  float sc = pow(snd, 5.0) * 2.  + oddSlice * 0.;\\n  float aspect = resolution.x / resolution.y;\\n  \\n  vec4 pos = vec4(circleXY, 0, 1);\\n  mat4 mat = ident();\\n  mat *= scale(vec3(1, aspect, 1));\\n  //mat *= rotZ(time * 0.);\\n  mat *= trans(vec3(ux, vy, 0));\\n  mat *= uniformScale(0.1 * sc * 30. / across);\\n  //mat *= rotZ(snd * 10. * sign(ux));\\n  \\n  gl_Position = mat * pos;\\n  \\n  float soff = 1.;//sin(time + x * y * .02) * 5.;  \\n  \\n  float pump = step(0.7, snd);\\n  \\n  vec3 hsv = rgb2hsv(color);\\n  hsv.x = mix(0., 0.6, hsv.x) + time * 0.6 + pump * .33;\\n  hsv.z = mix(0.5, 1., pump);\\n  v_color = vec4(hsv2rgb(hsv), 1);;\\n  v_color.rgb *= v_color.a;\\n}\\n\\n\"}",
  "screenshotURL": "data/images/images-aqowvzjy4b44t7zez-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "e7eLpcbvnQfqgdQW2"
}