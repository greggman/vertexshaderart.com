{
  "_id": "mFr92RbhPmuJXKXWK",
  "owner": {
    "_id": "XZ9fGNm72T7MyEqAy",
    "createdAt": {
      "$date": {
        "$numberLong": "1612890971955"
      }
    },
    "username": "oneshade",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/f0d8718b5dc6efb4cf47453275108912?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1616519502747"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1616519590812"
    }
  },
  "origId": null,
  "name": "Bilinear Patch",
  "notes": "First attempt at creating a grid of connected triangles.",
  "rank": {
    "$numberDouble": "1.9246464980553872"
  },
  "private": false,
  "unlisted": false,
  "username": "oneshade",
  "avatarUrl": "https://secure.gravatar.com/avatar/f0d8718b5dc6efb4cf47453275108912?default=retro&size=200",
  "settings": {
    "num": 11610,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define EYE_DISTANCE 2.0\n#define Z_NEAR 2.5\n#define Z_FAR -2.5\n\n#define RESOLUTION vec2(45.0)\n\n#define PI 3.1415\n\nstruct VertexAndNormal {\n    vec3 pos;\n    vec3 nor;\n};\n\nVertexAndNormal getPos(in float id) {\n    float t1 = time * 0.5, t2 = time, t3 = time * 1.25;\n\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec3 a = vec3(c3, s2, s1) * 1.25;\n    vec3 b = vec3(s3 * s2, c1, s3) * 1.25;\n    vec3 c = vec3(c2, c1, s3) * 1.25;\n    vec3 d = vec3(s1, c2 * c3, s2) * 1.25;\n\n    float fid = floor(id / 6.0);\n    int cid = int(mod(id, 6.0));\n\n    vec2 edgeStep = 1.0 / RESOLUTION;\n\n    float x = mod(fid, RESOLUTION.x);\n    float y = (fid - x) / RESOLUTION.x;\n\n    float u = x / RESOLUTION.x;\n    float v = y / RESOLUTION.y;\n\n    vec3 v1 = mix(mix(a, b, u + edgeStep.x), mix(c, d, u + edgeStep.x), v);\n    vec3 v2 = mix(mix(a, b, u), mix(c, d, u), v);\n    vec3 v3 = mix(mix(a, b, u), mix(c, d, u), v + edgeStep.y);\n    vec3 nor = normalize(cross(v2 - v1, v3 - v1));\n\n    if (cid == 1) u += edgeStep.x;\n    if (cid == 2 || cid == 3) u += edgeStep.x, v += edgeStep.y;\n    if (cid == 4) v += edgeStep.y;\n\n    vec3 pos = mix(mix(a, b, u), mix(c, d, u), v);\n    return VertexAndNormal(pos, nor);\n}\n\nvoid main() {\n    //vec3 light = normalize(vec3(-1.0, 1.0, 1.0));\n\n    //vec2 mouseRot = mouse * PI;\n    //float cy = cos(mouseRot.x), sy = sin(mouseRot.x);\n    //float cp = cos(mouseRot.y), sp = sin(mouseRot.y);\n\n    VertexAndNormal vertex = getPos(vertexId);\n    //vertex.pos.xz *= mat2(cy, sy, -sy, cy);\n    //vertex.pos.yz *= mat2(cp, sp, -sp, cp);\n\n    vec2 screenCoords = vertex.pos.xy / (EYE_DISTANCE - vertex.pos.z);\n    screenCoords.x *= resolution.y / resolution.x;\n    float depth = (vertex.pos.z - Z_NEAR) / (Z_FAR - Z_NEAR);\n    gl_Position = vec4(screenCoords, depth, 1.0);\n    v_color = vec4(abs(vertex.nor), 1.0);\n}"
  },
  "screenshotURL": "data/images/images-cz9gbdzg0o72kd02f-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "156"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "NdyuYaW6ehEMR33tr"
}