{
  "_id": "JwR5ZvmH2Nkcr3Rnx",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1515859876621"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1515860124539"
    }
  },
  "origId": "SfWoZkJqAcdQ6baq5",
  "name": "mandelbulb",
  "notes": "http://glslsandbox.com/e#44354.1",
  "rank": {
    "$numberDouble": "1.5185050345729294"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/billx/tandava-billx-remix\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define ITERS 40\\n#define M_PI 3.1415926535897932384626433832795\\n\\n#define DEBUG 1\\n#define TAU 6.28318530718\\n\\nvec4 qmult(vec4 a, vec4 b) {\\n\\tvec4 r;\\n\\tr.x = a.x * b.x - dot(a.yzw, b.yzw);\\n\\tr.yzw = a.x * b.yzw + b.x * a.yzw + cross(a.yzw, b.yzw);\\n\\treturn r;\\n}\\n\\nvoid julia(inout vec4 z, inout vec4 dz, in vec4 c) {\\n\\tfor(int i = 0; i < 10; i++) {\\n\\t\\tdz = 2.0 * qmult(z, dz);\\n\\t\\tz = qmult(z, z) + c;\\n\\t\\t\\n\\t\\tif(dot(z, z) > 3.0) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n}\\n\\nvec3 transform(vec3 p) {\\n\\tfloat t = time * .03;\\n\\tp.xy *= mat2(cos(t), sin(t), -sin(t), cos(t));\\n\\tt = time * .07;\\n\\tp.zx *= mat2(cos(t), sin(t), -sin(t), cos(t));\\n\\treturn p;\\n}\\n\\nfloat dist(in vec3 p, float _factor) {\\n\\tp = transform(p);\\n\\tvec4 z = vec4(p, 0.0);\\n\\tvec4 dz = vec4(1.0, 0.0, 0.0, 0.0);\\n\\t\\n\\tvec2 m = vec2(cos(_factor),sin(_factor));//0.0;//mouse * 2.0 - 1.0;\\n\\tvec4 c = vec4(m.x, m.y, 0.0, 0.0);\\n\\t\\t\\n\\tjulia(z, dz, c);\\n\\t\\t\\n\\tfloat lz = length(z);\\n\\tfloat d = 0.5 * log(lz) * lz / length(dz) ; \\n\\t\\n\\treturn d;\\n}\\n\\n\\nvoid main ()\\n{\\n  \\n  //float finalVertexCount =  vertexCount;//max((0.5*snd)*vertexCount,5000.);\\n  \\n  float ratioXforY = resolution.y/resolution.x;\\n  float ratioXforX = resolution.x/resolution.y;\\n  float finalVertexCount = floor(vertexCount*ratioXforY);\\n  \\n  vec2 finalResolution = vec2(sqrt(ratioXforX * finalVertexCount), sqrt(ratioXforY * finalVertexCount)/ratioXforY);\\n  \\n  //float numAcrossDown = floor(sqrt(finalVertexCount));\\n  \\n  //float ratio = resolution.y/numAcrossDown;\\n  \\n  //float maxVertexCount =   numAcrossDown* numAcrossDown;\\n  \\n  float finalVertexId = mod(vertexId, finalVertexCount);\\n  \\n  float x = mod(finalVertexId,  finalResolution.x);\\n  float y = floor(finalVertexId /  finalResolution.y);\\n  \\n  float u = (x / finalResolution.x);// * (resolution.y/resolution.x);\\n  float v = (y / finalResolution.y);\\n  \\n  float ux = ( u  * 2.0 - 1.0) * (finalResolution.x/resolution.x);\\n  \\n  float vy = ( v * 2.0 - 1.0)* (finalResolution.y/resolution.y);\\n  \\n  float snd = texture2D(sound, vec2(0.,  u)).a;\\n  \\n  vec2 fragCoord = vec2(x, y);\\n  //apply fragment logic\\n\\n  vec2 st = (fragCoord.xy * 2.0 - finalResolution) / finalResolution.y;\\n\\t\\n\\tvec3 ori = vec3(0.0, 0.0, 2.0);\\n\\tvec3 tar = vec3(0.0, 0.0, 0.0);\\n\\tvec3 cz = normalize(tar - ori);\\n\\tvec3 cx = cross(cz, vec3(0.0, 1.0, 0.0));\\n\\tvec3 cy = cross(cx, cz);\\n\\tvec3 dir = normalize(cx * st.x + cy * st.y + cz * 1.0);\\n\\t\\n\\tfloat t = 0.0;\\n\\tint steps = 0;\\n\\tfor (int i = 0; i < 48; i++) {\\n\\t\\tsteps = i;\\n\\t\\tfloat d = dist( ori + t * dir, snd*10.);\\n\\t\\tif (d < 0.001 || t > 27.0) break;\\n\\t\\tt += d;\\n\\t}\\n\\t\\n\\tvec3 c = vec3(1.0);\\n\\tif (t < 10.0) {\\n\\t\\tc = vec3(vec3(1.0 - float(steps) / 64.0));\\n\\t}\\n\\t\\n\\t//gl_FragColor = vec4(c, 1.0);\\n  //end of fragment logic\\n  \\n  gl_Position = vec4(ux, vy, 0, 1);\\n  \\n  gl_PointSize = 1.;(resolution.y/finalResolution.y)*2.-1.;\\n\\n  v_color = vec4(c, 1.0);;\\n  \\n\\n}\"}",
  "screenshotURL": "data/images/images-cm1quyvl31lq29x3l-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "2"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "uguHcdBxzdjGWh3rD"
}