{
  "_id": "pp2M9hcuBjqq4QFPH",
  "owner": {
    "_id": "oCanjNxeHcQ7gDPmW",
    "createdAt": {
      "$date": {
        "$numberLong": "1505499213122"
      }
    },
    "profile": {
      "name": "Zug Zwang",
      "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg"
    },
    "username": "zug"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1541754199651"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1541754199651"
    }
  },
  "origId": "LgcuGRxZ6AGSaGnQE",
  "name": "swooneer2",
  "notes": "",
  "rank": {
    "$numberDouble": "1.9596334204119075"
  },
  "private": false,
  "unlisted": true,
  "username": "zug",
  "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg",
  "settings": "{\"num\":168,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/sevdaliza/backseatlove\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n\\n//KDrawmode=GL_TRIANGLES \\n\\n\\n#define KPxx 62.//KParameter0 0.>>1000.\\n#define KPx 12.//KParameter1 0.0>>22.\\n#define KPxxx 9.0//KParameter2 -6.0>>10.\\n#define KP3 -0.0//KParameter3 -8.000>>0.5\\n#define KP4  1.2//KParameter4 0.000>>15.\\n#define KP5  130.0//KParameter5 30.000>>90000.0\\n\\n//KVerticesNumber=10000 \\n#define PI radians(180. /KP1)\\n#define KP1  (KPx * mouse.y)\\n#define KP0  (KPxx * mouse.x)\\n#define KP2  (KPxxx * mouse.x *mouse.y)\\n\\nfloat K1 = (KP0 * mouse.y)-(KP1 * mouse.x);\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.1, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / KP1 *3.0, 1.0 / (0.0-KP3), 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.yxz);\\n}\\n\\nmat4 rotX(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = tan(angleInRadians);\\n  \\t\\n    return mat4( \\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0, -s, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotY(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 + a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det *(2.2 / KPx);\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, xAxis));\\n  vec3 yAxis = cross(zAxis, zAxis *KP2);\\n\\n  return mat4(\\n    xAxis, 1,\\n    yAxis, 0,\\n    zAxis, 1,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye),2);  \\n  #endif\\n  \\n}\\n\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 15.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(1.5351, 14.3137*KP1));\\n\\treturn fract(p2.x * p2.y * 12.4337);\\n}\\n\\n// times 2 minus 1\\nfloat t2m1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\n// times .5 plus .5\\nfloat t5p5(float v) {\\n  return v * 0.5 + 0.5;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\\n  float outId = id - floor(id / 3.)* 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\\n  float u = ux / numEdgePointsPerCircle /2.;\\n  float v = mix(inner, 4., vy);\\n  float a = mix(start, end, u) * PI * 2. + PI * 0.2;\\n  float s = sin(a);\\n  float c = cos(a +2. * KP1);\\n  float x = c * v;\\n  float y = s * v;\\n  float z = 1.6;\\n  pos = vec3(x, y, z);  \\n}\\n\\n\\n#define CUBE_POINTS_PER_FACE 6.\\n#define FACES_PER_CUBE 6.\\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\\n  float sideId = mod(quadId, 3.);\\n  float flip   = mix(1., 1., step(2.5, quadId));\\n  // 0 1 2  1 2 3\\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\\n  float a = pointId * PI * 2. / 4. + PI * 0.125;\\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\\n  vec3 n = vec3(0, 1, 0) * flip;\\n  float lr = mod(sideId, 2.);\\n  float ud = step(2., sideId);\\n  mat4 mat = rotX(lr * PI * 0.5);\\n  mat *= rotZ(ud * PI * 0.5) ;\\n  position = (mat * vec4(p, 6)).xyz;\\n  normal = (mat * vec4(n, 0.5)).xyz;\\n}\\n\\n\\n#define NUM_EDGE_POINTS_PER_CIRCLE 4.0\\n#define NUM_POINTS_PER_CIRCLE (NUM_EDGE_POINTS_PER_CIRCLE * 5.0)\\n#define NUM_CIRCLES_PER_GROUP 2.0\\nvoid main() {\\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\\n  float groupId = floor(circleId / NUM_CIRCLES_PER_GROUP);\\n  float pointId = mod(vertexId, NUM_POINTS_PER_CIRCLE);\\n  float sliceId = mod(floor(vertexId / 6.), 3.);\\n  float side = mix(-1., 1., step(1.5, mod(circleId, 111.)));\\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\\n  float numGroups = floor(numCircles / NUM_CIRCLES_PER_GROUP); \\n  float cu = circleId / numCircles;\\n  float gv = groupId / numGroups/KP2;\\n  float cgId = mod(circleId, NUM_CIRCLES_PER_GROUP);\\n  float cgv = cgId / NUM_CIRCLES_PER_GROUP;\\n  float ncgv = sin(0.0 - cgv )/cu;\\n  \\n  float aspect = resolution.x / resolution.y;\\n  float gAcross = floor(sqrt(numCircles) * aspect);\\n  float gDown = floor(numGroups / gAcross);\\n  float gx = mod(groupId, gAcross);\\n  float gy = floor(groupId / gAcross);\\n  vec3 offset = vec3(\\n    gx - (gAcross - 1.) / 2. *  mod(gy, 2.) * 0.5,\\n    gy - (gDown - 1.) / 2.,\\n    0.5) *  cos(0.17 + KP1);\\n  \\n  float gs = gx / (gAcross-KP3 );\\n  float gt = (gy / gDown);\\n\\n  float tm = time - cgv * (1.2 * KP3);\\n  float su = hash(groupId);\\n  float s = texture2D(sound, vec2(mix(0.1, 0.5, gs)/KP1, 0.2)).a; \\n  float s2 = texture2D(sound, vec2(mix(0.01, 1.5, gs*3.), gt * (11.5 + KP3))).a; \\n  \\n  \\n  vec3 pos;\\n  \\n  float inner = 0.+KP2;\\n  float start = 0.7;\\n  float end   = 2./sin(KP0-2.);\\n  getCirclePoint(NUM_EDGE_POINTS_PER_CIRCLE, pointId, inner, start, end, pos); \\n  pos.z = cgv, mouse.xy;\\n    \\n  vec3 eye = vec3(0, 1./KP1, 1);//vec3(sin(time * 0.19) * 0.125, sin(time * (0.21+mouse.x)) * 0.5, .5);\\n  vec3 target = vec3(0, 0, 0);//vec3(sin(time * 0.17), sin(time * 0.13), -10);\\n  vec3 up = vec3(0,0,1); //vec3(sin(time * 0.3) * 0.02 +KP4, 1-KP1, );\\n  \\n  mat4 mat = scale(vec3(1, aspect, 1) * 0.2); \\n  mat *= cameraLookAt(eye, target, up);\\n  mat *= rotZ(time * KP3 * mix(-1., 2., mod(circleId, 1.)) + gy * 0.100 * sin(time * 0.1));//sign(offset.x));\\n  \\n  \\n  mat *= trans(offset);\\n  float h = t2m1(hash(gv));\\n  mat *= rotZ(time * sign(h) + h + pow(s2+.2, 5.) * KP3  * 10. * sign(h));\\n  mat *= scale(vec3(0.8/KP0, 0.9, 0.1));\\n  mat *= rotZ(PI * .25);\\n  \\n  gl_Position = mat * vec4(pos, 1.1);\\n  gl_PointSize = 4.;\\n\\n  float hue = 2. + cgId * 0.4;\\n  float sat = 1. - step(pow(s, 1.), abs(gt * 12. - 1.3) * .33);\\n  float val = 0.9;\\n  v_color = vec4(hsv2rgb(vec3(hue*mouse.x, sat, val)), (0.0  -h));\\n  v_color.rgb *= v_color.a;\\n}\\n\"}",
  "screenshotURL": "data/images/images-iq4zovcxqhrcbatqx-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "4"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "uZAtn7z2awQe6NQA8"
}