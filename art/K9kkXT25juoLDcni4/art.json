{
  "_id": "K9kkXT25juoLDcni4",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": "1445777397953"
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1446199318665"
  },
  "origId": null,
  "name": "wip3",
  "username": "gman",
  "settings": {
    "num": 9680,
    "mode": "LINES",
    "sound": "https://soundcloud.com/dj-wonkar/easy-funk-edit",
    "lineSize": "CSS",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI 3.14159\n#define ACROSS 10.\n#define DOWN 10.\n#define PER_AREA ((ACROSS + 1.) * (DOWN + 1.) * 10.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 area(float vertexId, float areaId) {\n  // 0, 2, 2, 4, 4, 1, 3, 3, 0\n  float pointId = mod((floor(vertexId / 2.) + mod(vertexId, 2.)) * 2., 5.);\n  float thingId = floor(vertexId / 10.);\n  float col = mod(thingId, ACROSS + 1.);\n  float row = floor(thingId / (ACROSS + 1.));\n  float u = col / ACROSS;\n  float v = row / DOWN;\n  float x = u * 2. - 1.;\n  float y = v * 2. - 1.;\n  \n  float d = length(vec2(x, y));\n  float su = mod(PI * 2.  + atan(y ,x) + areaId / .8 * PI * 2. + time, PI * 2.) / (PI * 2.);\n  float sv = d * 0.1;\n  float snd = texture2D(sound, vec2(su * 0.25 / 8. * areaId, sv)).a;\n  \n  float r = 0.04 + pow(snd, 3.) * 0.15;\n  float a = pointId / 5. * PI * 2. + thingId * 0.05 + time * 2.;\n  vec2 cs = vec2(cos(a), sin(a));\n  vec2 xy = cs * r;\n  vec2 aspect = vec2(1, resolution.x / resolution.y);\n  \n  float hue = (time * 0.01) + areaId / 8.;\n  \n  return vec4(\n    vec2(x, y) * 1.0 + xy * aspect,\n    snd,\n    hue);\n}\n\nvoid main() {\n  gl_PointSize = 4.0;\n\n  float areaId = floor(vertexId / PER_AREA);\n  float aCol = mod(areaId, 4.);\n  float aRow = floor(areaId / 4.);\n  float ax = (aCol + 0.5) / 4. * 2. - 1.;\n  float ay = (aRow + 0.5) / 2. * 1.8 - 0.9;\n  float avId = mod(vertexId, PER_AREA); \n  \n  vec4 a = area(avId, areaId);\n  \n  gl_Position = vec4(a.xy * vec2(0.25, 0.4) + vec2(ax, ay), 0, 1);\n  float snd = a.z;\n  float hue = a.w;\n  v_color = vec4(mix(hsv2rgb(vec3(hue, 1, snd)), vec3(1,1,1), 0.0), 1.0);\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\n}"
  },
  "screenshotURL": "data/images/images-2kb3wfu2zxsv7diex-thumbnail.jpg",
  "views": "3908",
  "likes": "0",
  "revisionId": "SfcSWK5bCRkY7Gfkm",
  "modifiedAt": {
    "$date": "1446277128826"
  },
  "hasSound": true,
  "rank": "1.7769378216228642",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}