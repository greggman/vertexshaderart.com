{
  "_id": "5Fphse6X3wyaFosYJ",
  "owner": {
    "_id": "gY6LJNWPnc5msFSRP",
    "createdAt": {
      "$date": {
        "$numberLong": "1652632078852"
      }
    },
    "username": "sunwoo.lee",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/847e0aa72622f450daec2296ed8fe915?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1653929874032"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1653929874032"
    }
  },
  "origId": "SnHzmTdr25on3o4Zs",
  "name": "Circles from Triangles",
  "notes": "",
  "rank": {
    "$numberDouble": "1.8368698236915368"
  },
  "private": false,
  "unlisted": true,
  "username": "sunwoo.lee",
  "avatarUrl": "https://secure.gravatar.com/avatar/847e0aa72622f450daec2296ed8fe915?default=retro&size=200",
  "settings": {
    "num": 6687,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/graham-panter/fly-by-light",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.01568627450980392,
      0,
      0.25882352941176473,
      1
    ],
    "shader": "// // Name: sunwoo.lee\n// // Assignment name: Circles from Triangles\n// // Course name: CS250\n// // Term: 2022 Spring\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n#define PI radians(180.0)\n\n//https://www.vertexshaderart.com/art/qjkP6BDvEFyD6CfZC\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nvec2 getCirclePoint(float id, float numCircleSegments){\n  \n  float ux = floor(id/6.) + mod(id , 2.);\n  // id = \t\t0 1 2 3 4 5 6 7 8 9 10 11 12\n  \n  // floor =\t0 0 0 0 0 0 1 1 1 1  1  1  2\n  // mod =\t\t0 1 0 1 0 1 0 1 0 1  0  1  0\n  // + = \t\t0 1 0 1 0 1 1 2 1 2  1  2  2\n  \n  float vy = mod(floor(id/2.) + floor(id/3.),2.);\n  // id = \t\t0 1 2 3 4 5 6 7 8 9 10 11 12\n  \n  // floor =\t0 0 1 1 2 2 3 3 4 4  5  5  6\n  // floor =\t0 0 0 1 1 1 2 2 2 3  3  3  4\n  // + = \t\t0 0 1 2 3 3 5 5 6 7  8  8 10\n  // mod = \t\t0 0 1 0 1 1 1 1 0 1  0  0  0\n  \n  // result =>\t{(0,0),(1,0),(0,1)}, \n  //\t\t\t{(1,0),(0,1),(1,1)},\n  //\t\t\t{(1,1),(2,1),(1,0)}, ...\n  \n\n  // 120 / 6(quad) = 20\n  float angle = ux / numCircleSegments * PI*2.;\n  float c = cos(angle);\n  float s = sin(angle);\n  \n  float radius = vy + 1.;\n  \n  float x = c * radius;\n  float y = s * radius;\n  \n  return vec2(x,y);\n}\n\nvoid main()\n{\n  float numCircleSegments = 12.;\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\n  \n  float numPointsPerCircle = numCircleSegments * 6.;\n  float circleId = floor(vertexId / numPointsPerCircle);\n  float numCircles = floor(vertexCount / numPointsPerCircle);\n  \n  float sliceId = floor(vertexId / 6.0);\n  float oddSlice = mod(sliceId, 2.);\n  \n  float down = floor(sqrt(numCircles));\n  float across = floor(numCircles / down);\n  \n  float x = mod(circleId, across);\n  float y = floor(circleId / across);\n  \n  float u = x / (across - 1.);\n  float v = y / (across - 1.);\n  \n  float xoff = 0.;//sin(time + y * 0.2) * 0.1;\n  float yoff = 0.;//sin(time * 1.1 + x * 0.3) * 0.2;\n  \n  float ux = u * 2. - 1. + xoff;\n  float vy = v * 2. - 1. + yoff;\n  \n  float su = abs(u - 0.5) * 2.0;\n  float sv = abs(v - 0.5) * 2.0;\n  float au = abs(atan(su,sv)) / PI;\n  float av = length(vec2(su,sv));\n  float snd = texture2D(sound,vec2(au* 0.05,av*0.25)).a;\n  \n  float aspect = resolution.x / resolution.y;\n  float sc = pow(snd + 0.2, 5.) * mix(1.,1.1, oddSlice);\n  \n  sc *= 20. / across;\n  \n  vec4 pos = vec4(circleXY, 0, 1);\n  mat4 mat = ident();\n  mat *= scale(vec3(1,aspect,1));\n  mat *= rotZ(time * 0.1);\n  mat *= trans(vec3(ux,vy,0) * 1.4);\n  mat *= rotZ(snd * 20. * sign(ux));\n  mat *= uniformScale(0.03 * sc);\n  \n  gl_Position = mat * pos;\n  \n  float soff = 0.;//sin(time + x * y * 0.02) * 5.0;\n\n  \n  float pump = step(0.8,snd);\n  float hue = u * 0.1 + snd * 0.2 + time * 0.1;//sin(time + v*20.0) * 0.05;\n  float sat = 1.;//mix(0.5, 1.0, pump); //1.0 - av;\n  float val = mix(0.4, pow(snd+0.2 ,5.), pump);//sin(time + v*u*20.0)*0.5+0.5;\n  \n  hue = hue + pump * oddSlice * 0.5 + pump * 0.33;\n  val += oddSlice * pump;\n  \n  v_color = vec4(hsv2rgb(vec3(hue,sat,val)),1);\n}"
  },
  "screenshotURL": "data/images/images-ffy6m3rp4cjj27iq7-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "5"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "v4aZjNgmCPo4tJ8tn"
}