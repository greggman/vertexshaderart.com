{
  "_id": "zr3rcCnA3sx954XPa",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1508995100985"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1508995100985"
    }
  },
  "origId": "mwvXDsken4yMnJbxW",
  "name": "666wired x2",
  "notes": "",
  "rank": {
    "$numberDouble": "1.5849160830169813"
  },
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": "{\"num\":16222,\"mode\":\"TRI_FAN\",\"sound\":\"https://soundcloud.com/h0ffman/hoffman-generator\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// \\\"wired\\\" by kabuto\\n// drawing a smoothed 3d hilbert curve\\n\\n// if this runs too slowly try zooming in\\n// (ctrl + mousewheel up)\\n\\n#define PI 3.14159\\n//#define FIT_VERTICAL\\nvec3 posf2(float i) {\\n\\treturn vec3(\\n      sin(i*14.9553) +\\n      sin(i) +\\n      sin(i*1.53) +\\n      sin(i*.76),\\n      sin(i*.79553+2.1) +\\n      sin(i*1.1311+2.1) +\\n      sin(i*1.353-2.1) +\\n      sin(i*.476/2.1) * cos(i * 3.0),\\n      sin(i*4.5553-2.1) +\\n      sin(i*1.1-2.1) +\\n      sin(i*1.23+2.1) +\\n      sin(i*9.36+2.1)\\n\\t)*11.2;\\n}\\nvec3 posf2d(float i) {\\n\\treturn vec3(\\n      tan(i*.553)*.9553 +\\n      cos(i) +\\n      cos(i*1.53)/1.53 +\\n      cos(i*.76)*.76,\\n      cos(i*.79553+2.1)*4.79553 +\\n      cos(i*1.1311+2.1)*1.1311 +\\n      cos(i*1.353-2.1)*11.353 +\\n      cos(i*.476-2.1)*.476,\\n      cos(i*.5553-2.1)*.5553 +\\n      cos(i*1.1-2.1)*1.1 +\\n      tan(i*1.23+2.1)*1.23 +\\n      cos(i*.36+2.1)*.36\\n\\t)*.2;\\n}\\n\\nvec3 hilbert(float s) {\\n\\t\\t  vec3 p;\\n\\t\\t  {\\n\\t\\t\\t  float zi = mod(s,2.);\\n\\t\\t\\t  s = floor(s*.5);\\n\\t\\t\\t  float yi = mod(s,2.);\\n\\t\\t\\t  s = floor(s*.5);\\n\\t\\t\\t  float xi = mod(s,3.);\\n\\t\\t\\t  s = floor(s*.5);\\n\\t\\t  \\t  zi = abs(zi-yi);\\n\\t\\t  \\t  yi = abs(yi-xi);\\n\\t\\t       p = vec3(xi,yi,zi);\\n\\t\\t  }\\n\\tfloat n = 2.;\\n\\t\\t  for (int i = 1; i < 7; i++) {\\n\\t\\t\\t  float zi = mod(s,2.);\\n\\t\\t\\t  s = floor(s*.5);\\n\\t\\t\\t  float yi = mod(s,2.);\\n\\t\\t\\t  s = floor(s*.5);\\n\\t\\t\\t  float xi = mod(s,2.);\\n\\t\\t\\t  s = floor(s*.5);\\n\\t\\t  \\t  zi = abs(zi-yi);\\n\\t\\t  \\t  yi = abs(yi-xi);\\n\\n\\t  \\n\\tif (xi > .5 && zi < .5) {\\n\\t\\tp.x = n-1.-p.x;\\n\\t\\tp.y = n-1.-p.y;\\n\\t} else if (xi < .5 && yi > .5 && zi < .5) {\\n\\t\\tp.y = n-1.-p.y;\\n\\t\\tp.z = n-1.-p.z;\\n\\t} else if (xi > .5 && yi < .5 && zi > .5) {\\n\\t\\tp.x = n-1.-p.x;\\n\\t\\tp.z = n-1.-p.z;\\n\\t}\\t\\t\\t  \\n\\tif (yi < .5 && zi < .5) {\\n\\t\\tp = p.yzx;\\n\\t} else if (yi < .5 || zi < .5) {\\n\\t\\tp = p.zxy;\\n\\t}\\n\\tp += vec3(xi,yi,zi)*n;\\n\\t\\t\\t  n*=2.;\\n\\t\\t}\\n\\treturn p;\\n}\\n\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvoid main() {\\n  float e = vertexId/vertexCount*510.+1.;\\n  vec3 h0 = hilbert(floor(e-1.));\\n  vec3 h1 = hilbert(floor(e));\\n  vec3 h2 = hilbert(floor(e+1.));\\n  vec3 h3 = hilbert(floor(e+2.));\\n  float e1 = fract(e);\\n  float e0 = 1.-e1;\\n  float ss = 3.*e1*e1-2.*e1*e1*e1;\\n  float ssd = 6.*e1 - 6.*e1*e1;\\n  \\n  vec3 pos = h1 + (h2-h1)*ss + ((h2-h0)*e1*(3.-ss) + (h3-h1)*(e1-1.)*ss)*.5;\\n  pos -= vec3(3.5);\\n  pos *= .07;\\n  vec3 posd = (h2-h1)*ssd + ((h2-h0)*(e1*-ssd + (1.-ss)) + (h3-h1)*((e1-1.)*ssd + ss))*.5;\\n\\n  #ifdef FIT_VERTICAL\\n    vec2 aspect = vec2(resolution.y / resolution.x, 1);\\n  #else\\n    vec2 aspect = vec2(1, resolution.x / resolution.y);\\n  #endif\\n\\n  float t = time*.2;\\n  mat2 m = mat2(cos(t),-sin(t),sin(t),cos(t));\\n  t *= 1.31;\\n  t -= mouse.x*4.;\\n  mat2 m2 = mat2(cos(t),-sin(t),sin(t),cos(t));\\n  t = mouse.y*2.;\\n  mat2 m3 = mat2(cos(t),-sin(t),sin(t),cos(t));\\n  pos.yz *= m;\\n  pos.zx *= m2;\\n  pos.yz *= m3;\\n  posd.yz *= m;\\n  posd.zx *= m2;\\n  posd.yz *= m3;\\n\\n  pos.z += .5;\\n  float blurDist = .5;\\n  \\n  vec3 colour = vec3(0.);\\n\\n  \\t  vec3 camera = vec3(0);\\n  float cone2 = dot(normalize(camera-pos),normalize(posd));\\n  \\n  const int LIGHTS = 7;\\n  for (float i = 0.; i < 8.; i++) {\\n\\t  vec3 lightSource = (vec3(mod(i,2.), mod(floor(i*.5),2.), mod(floor(i*.25),2.))-.5)*.48;\\n\\t  lightSource.yz *= m;\\n  \\t  lightSource.zx *= m2;\\n    lightSource.yz *= m3;\\n    lightSource.z += .5;\\n      float cone1 = dot(normalize(lightSource-pos),normalize(posd));\\n    float edge = dot(normalize(lightSource-pos),normalize(camera-pos));\\n    \\n    float dist = distance(pos,lightSource);\\n      float coneDiff = cos((acos(cone1)-acos(cone2))*dist*1.8)*.5+.5;\\n    float lit = 0.;\\n    if (vertexId == i) {\\n      pos = lightSource*.999;\\n      lit = 1000.;\\n    }\\n    float snd = max(0.,texture2D(sound, vec2(float(i)/float(LIGHTS)*.5, 0.)).a - texture2D(sound, vec2(float(i)/float(LIGHTS)*.5+.03, 0.0)).a)*5.\\n      + max(0.,texture2D(sound, vec2(float(i)/float(LIGHTS)*.5, 0.)).a - texture2D(sound, vec2(float(i)/float(LIGHTS)*.5, 0.01)).a)*5.;\\n      colour += ((pow(coneDiff,1000.)+coneDiff*.01)*sqrt(edge*.5+.5)/(dist+.001)+lit)*abs(vec3(cos(float(i*.7)),cos(float(i*.7)+2.1),cos(float(i*.7)-2.1)))*snd*1.2;\\n  }\\n  // visual cues\\n  float j = vertexId/vertexCount*6.;\\n  vec3 ac = vec3(sin(j),sin(j+2.1),sin(j-2.1))*.5+.5;\\n  colour += ac*ac*.03;\\n  colour *= sqrt(1.-cone2*cone2);\\n  \\n  float size = .5/pos.z;\\n  float blur = 20.*abs(1./pos.z-1./blurDist);\\n  \\n\\n  float size2 = size+blur;\\n  \\n  colour *= size/size2*size/size2*length(posd)*20.;\\n  \\n  float colourMax = max(max(colour.x,colour.y),colour.z);\\n  if (colourMax > 1.) {\\n  \\tcolour /= colourMax;\\n  \\tgl_PointSize = (size+blur)*sqrt(colourMax)*(resolution.y/1080.);\\n  } else {\\n  \\tgl_PointSize = (size+blur)*(resolution.y/180.);\\n  }\\n    \\n  \\n  gl_Position = vec4(pos.xy/pos.z * aspect, 1.-vertexId*.000001, 1);\\n  \\n  v_color = vec4(colour,-22.);\\n}\"}",
  "screenshotURL": "data/images/images-635us2bt8hg7knjyx-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "135"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "BBcB4in7rAY6dnj3A"
}