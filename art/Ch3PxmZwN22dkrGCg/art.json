{
  "_id": "Ch3PxmZwN22dkrGCg",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": "1445777397953"
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1501683161683"
  },
  "modifiedAt": {
    "$date": "1520827394696"
  },
  "origId": null,
  "name": "bugs",
  "notes": "",
  "rank": "1.6571473622549397",
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/bodhicollective/metacentric-eating-worms",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      0,
      0,
      1
    ],
    "shader": "#define NUM_SEGMENTS 128.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n#define SEGMENTS_PER_LINE 10.\n#define VERTICES_PER_LINE (SEGMENTS_PER_LINE * 2.)\n\nfloat goop(float t) {\n  return sin(t) + sin(t * 0.27) + sin(t * 0.13) + sin(t * 0.73);\n}\n\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nvoid main() {\n  float vId = mod(vertexId, VERTICES_PER_LINE);\n  float vv = vId / (VERTICES_PER_LINE - 1.);\n  float lineId = floor(vertexId / VERTICES_PER_LINE);\n  float numLines = floor(vertexCount / VERTICES_PER_LINE);\n  float lineV = lineId / (numLines - 1.);\n  float p = float(vId / 2.) + mod(vId, 2.); \n  float pv = p / SEGMENTS_PER_LINE;\n    \n  float t = time * 8.;\n  float vxOff = lineV * 50.;\n  float vyOff = lineV * 50.;\n  float vs = pv * 2.;\n  vec2 xy = vec2(goop(t + vs + vxOff), goop(t + 10.5 + vs + vyOff)) * .0125;\n  \n  vec2 off = vec2(t2m1(hash(lineId * 0.123)), t2m1(hash(lineId * 0.717)));\n  \n  float su = hash(lineId * 0.511);\n  float sv = abs(atan(off.x, off.y));\n  float s = texture2D(sound, vec2(mix(0.2, 0.5, su), sv * .1)).a;\n  \n  \n  float aspect = resolution.x / resolution.y;\n  gl_Position = vec4(xy + off, -pv, 1) * vec4(1, aspect, 1, 1);  \n  gl_PointSize = 5. * pv;\n  \n  float hue = .5 + lineV * .1 + pv * -.1;\n  float sat = .5;\n  float val = 1.;\n  \n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), pv *  pow(mix(0., 2., s), 4.));\n  float pp = step(s, 0.5);\n  v_color.rgb = mix(v_color.rgb, vec3(0,0,0), pp);\n  gl_PointSize *= mix(0.5, 1., pp);\n  v_color.rgb *= v_color.a;\n}"
  },
  "screenshotURL": "data/images/images-pt8qau7cw08y8b8t4-thumbnail.jpg",
  "hasSound": true,
  "views": "165",
  "likes": "0",
  "revisionId": "QPumTYk8MKnGdaFNq"
}