{
  "_id": "rvBrwrSM6wfvD97BZ",
  "owner": {
    "_id": "Yyhf9gwaeXMRCxhTn",
    "createdAt": {
      "$date": {
        "$numberLong": "1506362977426"
      }
    },
    "username": "dnmtn",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/a118b79de569bc655138fbe150558114?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1506363104307"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1506363104307"
    }
  },
  "origId": "qB4krC8RnH5HEFLww",
  "name": "Cercle Tunnel REMIX",
  "notes": "K Machine exposed",
  "rank": {
    "$numberDouble": "1.446190063492675"
  },
  "private": true,
  "unlisted": false,
  "username": "dnmtn",
  "avatarUrl": "https://secure.gravatar.com/avatar/a118b79de569bc655138fbe150558114?default=retro&size=200",
  "settings": {
    "num": 21380,
    "mode": "LINE_STRIP",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "//KDrawmode=GL_TRIANGLES\n\n//for the K Machine\n#define parameter0 0.//KParameter0 0.>>8.\n#define parameter1 3.//KParameter1 1.>>8.\n#define parameter2 3.//KParameter2 0.>>40.\n#define parameter3 20.//KParameter3 5>>100.\n#define parameter4 0.2//KParameter4 0.01>>0.05\n#define parameter5 360.//KParameter5 5.>>50.\n#define parameter6 15.//KParameter6 0.>>1.\n#define parameter7 1.//KParameter7 1.>>5.\n\n\n#define HPI 1.570796326795\n#define PI   3.1415926535898\n\nvec3 hashv3(vec3 _v) {\n    return fract(sin(_v * vec3(43758.5453123, 12345.6789012,76543.2109876)));\n}\n\nvec3 rotX(vec3 _v, float _rad) {\n    vec2 f = sin(vec2(_rad, _rad + HPI));\n    vec3 r = _v;\n    r.y = _v.y * f.y + _v.z * -f.x;\n    r.z = _v.y * f.x + _v.z *  f.y;\n    return r;\n}\n\nvec3 rotY(vec3 _v, float _rad) {\n    vec2 f = sin(vec2(_rad, _rad + HPI));\n    vec3 r = _v;\n    r.x =  _v.x *  f.y + _v.z *  f.x;\n    r.z =  _v.x * -f.x + _v.z *  f.y;\n    return r;\n}\n\nvec3 rotZ(vec3 _v, float _rad) {\n    vec2 f = sin(vec2(_rad, _rad + HPI));\n    vec3 r = _v;\n    r.x =  _v.x *  f.x + _v.y * f.y;\n    r.y =  _v.x * -f.y + _v.y * f.x;\n    return r;\n}\n\nmat4 uniformScale(float _s) {\n    return mat4(\n                _s, 0, 0, 0,\n                0, _s, 0, 0,\n                0, 0, _s, 0,\n                0, 0, 0, 1);\n}\n\nvec3 NormalFromTriangleVertices(vec3 _triangleVertices0, vec3 _triangleVertices1, vec3 _triangleVertices2)\n{\n    vec3 u = _triangleVertices0 - _triangleVertices1;\n    vec3 v = _triangleVertices1 - _triangleVertices2;\n    return cross(v, u);\n}\n\nvoid drawShapeFromVerticesList(const vec3 _vt[12],const vec3 _cl[4], const float _vtn, const float _vId, const vec3 _pos, const vec3 _rot, out vec3 _n, out vec3 _v, out vec3 _color, float _scale)\n{\n  float localVid = mod(_vId,_vtn);\n  \n  if(localVid< 1.)\n    {\n      \n        _v = _vt[0];\n        _n = NormalFromTriangleVertices(_vt[0], _vt[1],_vt[2]);\n        _color = _cl[0];\n        \n    }\n  else\n    if(localVid< 2.)\n    {\n        _v = _vt[1];\n       _n = NormalFromTriangleVertices(_vt[0], _vt[1],_vt[2]);\n      _color = _cl[0];\n    }\n  else\n    if(localVid< 3.)\n    {\n        _v = _vt[2];\n       _n = NormalFromTriangleVertices(_vt[0], _vt[1],_vt[2]);\n      _color = _cl[0];\n    }\n  else\n    if(localVid< 4.)\n    {\n        _v = _vt[3];\n       _n = NormalFromTriangleVertices(_vt[3], _vt[4],_vt[5]);\n      _color = _cl[1];\n    }\n  else\n    if(localVid< 5.)\n    {\n        _v = _vt[4];\n       _n = NormalFromTriangleVertices(_vt[3], _vt[4],_vt[5]);\n      _color = _cl[1];\n    }\n  else\n    if(localVid< 6.)\n    {\n        _v = _vt[5];\n       _n = NormalFromTriangleVertices(_vt[3], _vt[4],_vt[5]);\n      _color = _cl[1];\n    }\n  else\n    if(localVid< 7.)\n    {\n        _v = _vt[6];\n       _n = NormalFromTriangleVertices(_vt[6], _vt[7],_vt[8]);\n      _color = _cl[2];\n    }\n  else\n    if(localVid< 8.)\n    {\n        _v = _vt[7];\n       _n = NormalFromTriangleVertices(_vt[6], _vt[7],_vt[8]);\n      _color = _cl[2];\n    }\n  else\n    if(localVid< 9.)\n    {\n        _v = _vt[8];\n       _n = NormalFromTriangleVertices(_vt[6], _vt[7],_vt[8]);\n      _color = _cl[2];\n    }\n  else\n    if(localVid< 10.)\n    {\n        _v = _vt[9];\n       _n = NormalFromTriangleVertices(_vt[9], _vt[10],_vt[11]);\n      _color = _cl[3];\n    }\n  else\n    if(localVid< 11.)\n    {\n        _v = _vt[10];\n       _n = NormalFromTriangleVertices(_vt[9], _vt[10],_vt[11]);\n      _color = _cl[3];\n    }\n  else\n    if(localVid< 12.)\n    {\n        _v = _vt[11];\n       _n = NormalFromTriangleVertices(_vt[9], _vt[10],_vt[11]);\n      _color = _cl[3];\n    }\n  \n  _v = (vec4(_v,1.)*uniformScale(_scale)).xyz;\n  //_n = (vec4(_n,1.)*uniformScale(_scale)).xyz;\n  \n  _v = rotY(_v,_rot.y);\n  _n = rotY(_n,_rot.y);\n  \n\n  _v = rotX(_v,_rot.x);\n  _n = rotX(_n,_rot.x);\n  \n  _v = rotZ(_v,_rot.z);\n  _n = rotZ(_n,_rot.z);\n  \n  _v += _pos;\n  //_n += _pos;\n}\n\nvec4 perspective(vec3 _v, float _fov, float _near, float _far, vec2 _res) {\n    vec4 r = vec4(_v, -_v.z);\n    r.xy *= vec2(_res.y / _res.x, 1.0) / tan(radians(_fov * 0.5));\n    r.z = (-_v.z * (_far + _near) - 2.0 * _far * _near) / (_far - _near);\n    return r;\n}\n\nvec3 lookAt(vec3 _v, vec3 _eye, vec3 _look, vec3 _up) {\n    vec3 z = normalize(_eye - _look);\n    vec3 x = normalize(cross(_up, z));\n    vec3 y = cross(z, x);\n    vec4 r = mat4(x.x, y.x, z.x, 0.0, x.y, y.y, z.y, 0.0, x.z, y.z, z.z, 0.0, 0.0, 0.0, 0.0, 1.0) *mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -_eye.x, -_eye.y, -_eye.z, 1.0)* vec4(_v, 1.0);\n    return r.xyz;\n}\n\n\n\nvec3 shade(vec3 _eye, vec3 _p, vec3 _n, vec3 _dfscol, float _amb, vec2 _spec) {\n    vec3 rgb;\n    vec3 lit = normalize(vec3(1.0, 1.0, 4.0));\n    float NDotLit = clamp(dot(_n, lit), 0.0, 1.0);\n    float diffuse = max(0.0, NDotLit) * (1.0 - _amb) + _amb;\n    \n    vec3 h = normalize(normalize(_eye - _p) + lit);\n    float specular = 0.0;\n    if(diffuse > 0.0) {\n        float NDoth = clamp(dot(_n, h), 0.0, 1.0);\n        specular = max(0.0, pow(NDoth, _spec.x));\n    }\n    \n    rgb = diffuse * _dfscol + specular * _spec.y;\n    \n    return rgb;\n}\n\n\nvoid main() {\n    \n  vec3 color = vec3(1.);\n    \n    //KVsa\n    float loopDurationMs = 4000.;\n    float timeProgress = mod(time*1000.,loopDurationMs);\n    float relLoopProgress = timeProgress/loopDurationMs;\n    //KVsa\n    \n    float finalRelLoopProgress = relLoopProgress;//mod(relLoopProgress,(1./factor));\n    float numberOfSubLoops = floor(parameter1);\n    float subLoopLength = 1./numberOfSubLoops;\n    finalRelLoopProgress = mod(relLoopProgress,subLoopLength)/subLoopLength;\n\n  \n  float finalRelLoopProgress2 = relLoopProgress;//mod(relLoopProgress,(1./factor));\n    float numberOfSubLoops2 = floor(1.);\n    float subLoopLength2 = 1./numberOfSubLoops2;\n    finalRelLoopProgress2 = mod(relLoopProgress,subLoopLength2)/subLoopLength2;\n  \n  vec3 _v = vec3(0.,0.,0.);\n  vec3 _n = vec3(0.,0.,0.);\n    \n  vec3 shapeVertices[12];\n  float shapeSize = 12.;\n  \n  \n  \n  \n  float maxShapeCount = floor(vertexCount/shapeSize);\n  float finalVertexId = min(vertexId,maxShapeCount*shapeSize);\n  float shapeId = floor(finalVertexId/shapeSize);\n  float relShapeId = shapeId/maxShapeCount;\n  float scale = parameter4;\n  \n  \n  float numberOfShape = floor(parameter3);//floor(0.03*((vertexCount/shapeSize)/5.));\n  float localShapeId = mod(shapeId,numberOfShape);\n  float localRelShapeId = localShapeId/numberOfShape;\n  \n  float sf = 0.;//texture2D(sound, vec2(0.23, localRelShapeId)).a ;\n  \n  \n  float radius = 0.1+sf*0.09;//+0.1*floor(shapeId/numberOfShape);\n  \n  \n  vec3 shapePos = vec3(radius*cos(2.*PI*localRelShapeId),radius*sin(2.*PI*localRelShapeId),0.);\n  \n  \n  float factor = parameter0*abs(cos(PI*finalRelLoopProgress+floor(shapeId/numberOfShape)));\n  float factor1 = 1.;\n  \n  shapeVertices[0] = vec3(-0.5,0.,-0.5);\n  shapeVertices[1] = vec3(0.5,0.,-0.5);\n  shapeVertices[2] = vec3(0.,factor1,0.-factor);\n  shapeVertices[3] = vec3(0.5,0.,-0.5);\n  shapeVertices[4] = vec3(0.5,0.,0.5);\n  shapeVertices[5] = vec3(0.+factor,factor1,0.);\n  shapeVertices[6] =vec3(0.5,0.,0.5);\n  shapeVertices[7] =vec3(-0.5,0.,0.5);\n  shapeVertices[8] =vec3(0.,factor1,0.+factor);\n  shapeVertices[9] =vec3(-0.5,0.,0.5);\n  shapeVertices[10] =vec3(-0.5,0.,-0.5);\n  shapeVertices[11] =vec3(0.-factor,factor1,0.);\n  \n  vec3 shapeColors[4];\n  \n  shapeColors[0] = vec3(1.,0.,0.);\n  shapeColors[1] = vec3(0.,1.,1.);\n  shapeColors[2] = vec3(1.,0.,0.);\n  shapeColors[3] = vec3(1.,1.,0.);\n  \n  vec3 rot = vec3(PI/2.,0.,(time*2.*PI/10.)*parameter2+ (localRelShapeId*PI*2.));\n  drawShapeFromVerticesList(shapeVertices, shapeColors, shapeSize, finalVertexId, shapePos, rot, _n, _v, color, scale);\n  \n  //create the big circle\n  float masterCircleRadius = 0.4;\n  float numberOfCirclesInMasterCircle = floor(parameter5);\n  float vertexPerSmallCircle = numberOfShape*shapeSize;\n  float masterCircleId = floor(finalVertexId/vertexPerSmallCircle);\n  float relMasterCircleId = masterCircleId/numberOfCirclesInMasterCircle;\n  \n  _v.y-=masterCircleRadius;\n  \n  _v = rotX(_v,-(relMasterCircleId*2.*PI+time*parameter7));\n  _n = rotX(_v,-(relMasterCircleId*2.*PI+time*parameter7));\n  _v.z-=0.58;\n  \n  vec3 eye = vec3(0., 0., -1.);\n  color = shade(eye, _v, _n, color, 0.8, vec2(64.0, 3.8));\n\n  vec3 p = lookAt(_v, eye, vec3(0.,1.7,0.0), vec3(0.0, 1.0, 0.0));\n  gl_Position = perspective(p, 60.0, 0.1, 10.0, resolution);\n  \n  _v.x*=resolution.y/resolution.x;\n\n  gl_PointSize = 10.;\n  v_color = vec4(color, 1.);\n    \n}\n\n\n\n"
  },
  "screenshotURL": "data/images/images-gompxsnm60lrr4mpk-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "oES28KJR48nze9H2M"
}