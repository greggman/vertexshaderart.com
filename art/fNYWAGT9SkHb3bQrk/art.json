{
  "_id": "fNYWAGT9SkHb3bQrk",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": "1610788825823"
  },
  "modifiedAt": {
    "$date": "1610788825823"
  },
  "origId": "mmoaXfjg9s32v5Cpw",
  "name": "hypercubermod",
  "notes": "",
  "rank": "1.5801028386181812",
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 63411,
    "mode": "LINES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define TAU 6.28318530718\n#define DEG2RAD 0.0174532925199433\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}  \nvec4 cross(vec4 U, vec4 V, vec4 W)\n{\n    float A, B, C, D, E, F;       // Intermediate Values\n    // Calculate intermediate values.\n    A = (V[0] * W[1]) - (V[1] * W[0]);\n    B = (V[0] * W[2]) - (V[2] * W[0]);\n    C = (V[0] * W[3]) - (V[3] * W[0]);\n    D = (V[1] * W[2]) - (V[2] * W[1]);\n    E = (V[1] * W[3]) - (V[3] * W[1]);\n    F = (V[2] * W[3]) - (V[3] * W[2]);\n    // Calculate the result-vector components.\n    return vec4(\n          (U[1] * F) - (U[2] * E) + (U[3] * D),\n        - (U[0] * F) + (U[2] * C) - (U[3] * B),\n          (U[0] * E) - (U[1] * C) + (U[3] * A),\n        - (U[0] * D) + (U[1] * B) - (U[2] * A)\n    );\n}\nmat4 rot4xy(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        c, s, 0, 0,\n       -s, c, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1);\n}\nmat4 rot4yz(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        1, 0, 0, 0,\n        0, c, s, 0,\n        0, -s, c, 0,\n        0, 0, 0, 1);\n}\nmat4 rot4zx(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        c, 0, -s, 0,\n        0, 1, 0, 0,\n        s, 0, c, 0,\n        0, 0, 0, 1);\n}\nmat4 rot4xw(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        c, 0, 0, s,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        -s, 0, 0, c);\n}\nmat4 rot4yw(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        1, 0, 0, 0,\n        0, c, 0, -s,\n        0, 0, 1, 0,\n        0, s, 0, c);\n}\nmat4 rot4zw(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, c, -s,\n        0, 0, s, c);\n}\n// from world to eye space.\nvoid transform4(vec4 from, vec4 to, vec4 up, vec4 over, out mat4 transform)\n{\n  vec4 d = normalize(to-from);\n  vec4 a = normalize(cross(up, over, d));\n  vec4 b = normalize(cross(up, d, a));\n  vec4 c = cross(d, a, b);\n  transform = mat4(a, b, c, d);\n}\n// from 4d to 3d space.\nvec3 project4(vec4 vertex, vec4 from, float radius, float viewangle, mat4 transform)\n{\n  float  S,T;    // Divisor Values\n  vec4 V;      // Scratch Vector\n  if (false /*proj_type == PARALLEL*/)\n    S = 1.0 / radius;\n  else\n    T = 1.0 / tan (viewangle / 2.0);\n  V = vertex - from;\n  if (true /*proj_type == PERSPECTIVE*/)\n    S = T / dot (V, transform[3]);\n  return vec3(\n    S * dot (V, transform[0]),\n    S * dot (V, transform[1]),\n    S * dot (V, transform[2])\n  );\n}\n// from world to eye space.\nvoid transform3(vec3 from, vec3 to, vec3 up, out mat3 transform)\n{\n    vec3 c = normalize(to - from);\n    vec3 a = normalize(cross(up, c));\n    vec3 b = cross(c, a);\n    transform = mat3(a, b, c);\n}\n// from 3d to 2d space.\nvec2 project3(vec3 vertex, vec3 from, float radius, float viewangle, mat3 transform)\n{\n    float  S, T;    // Divisor Values\n    vec3 V;       // Scratch Vector\n    if (false/*proj_type == PARALLEL*/)\n        S = 1.0 / radius;\n    else\n        T = 1.0 / tan (viewangle / 2.0);\n    V = vertex - from;\n    if (true/*proj_type == PERSPECTIVE*/)\n        S = T / dot (V, transform[2]);\n    return vec2(\n        S * dot (V, transform[1]),\n        S * dot (V, transform[0])\n    );\n}\nmat3 rot3(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c        );\n}\nvec4 hypercube(float id)\n{\n  if (id == 0.) return vec4( 1,  1,  1,  1);\n  if (id == 1.) return vec4(-1,  1,  1,  1);\n  if (id == 2.) return vec4( 1, -1,  1,  1);\n  if (id == 3.) return vec4( 1,  1, -1,  1);\n  if (id == 4.) return vec4( 1,  1,  1, -1);\n  if (id == 5.) return vec4(-1, -1,  1,  1);\n  if (id == 6.) return vec4(-1,  1, -1,  1);\n  if (id == 7.) return vec4(-1,  1,  1, -1);\n  if (id == 8.) return vec4( 1, -1, -1,  1);\n  if (id == 9.) return vec4( 1, -1,  1, -1);\n  if (id == 10.)return vec4( 1,  1, -1, -1);\n  if (id == 11.)return vec4(-1, -1, -1,  1);\n  if (id == 12.)return vec4(-1, -1,  1, -1);\n  if (id == 13.)return vec4( 1, -1, -1, -1);\n  if (id == 14.)return vec4(-1,  1, -1, -1);\n  if (id == 15.)return vec4(-1, -1, -1, -1);\n  return vec4(0);\n}\n\n\nfloat norm(float n)\n{\n    if (n >= 0.49)\n        return 1.;\n    else\n        return 0.;\n}\n\nfloat getb(float n, float pos)\n{\n    return norm(mod(n / (pos * 2.), 1.0));\n}\n\nfloat round(float n)\n{\n  return floor(n + .5);\n}\n\nfloat not(float n)\n{\n  return floor(n * -1. + 1.);\n}\n\nvec4 hypercube_lines(float id)\n{\n  float F = getb(id, 1.);\n  float E = getb(id, 2.);\n  float D = getb(id, 4.);\n  float C = getb(id, 8.);\n  float B = getb(id, 16.);\n  float A = getb(id, 32.);\n\n  float FA = B*not(C)*not(D)*F+A*not(B)*C*not(E)+not(A)*C*D*F+B*not(C)*not(E)*F+not(A)*B*E*F+not(A)*B*D*E+A*not(B)*not(E)*not(F)+A*B*not(D)*not(E)*F+not(A)*B*C*not(E)*not(F)+B*C*D*E*F+A*not(B)*not(C)*E*F+A*B*not(C)*D*not(F)+not(A)*not(C)*not(D)*not(E)*F+A*not(B)*C*D*not(F)+not(A)*not(B)*not(C)*not(D)*E*not(F)+A*B*C*not(D)*E*not(F);\n  float FB = C*not(D)*E*F+not(B)*C*D*not(E)+C*D*not(E)*not(F)+B*C*not(D)*E+A*not(B)*not(D)*F+A*not(B)*not(D)*E+A*not(D)*E*F+not(A)*not(B)*not(C)*not(E)*F+not(A)*not(B)*not(C)*E*not(F)+not(A)*B*not(C)*not(E)*not(F)+B*not(C)*not(D)*not(E)*not(F)+not(A)*B*C*not(D)*F+A*not(B)*not(C)*not(E)*not(F)+A*not(B)*not(C)*E*F+A*B*D*not(E)*F+A*B*C*E*F;\n  float FC = A*D*F+A*not(B)*not(C)+A*not(B)*F+A*not(C)*D*not(E)+A*not(C)*not(E)*F+B*D*not(E)*F+not(A)*B*E*not(F)+A*C*D*E+A*C*E*F+not(B)*C*not(D)*E*not(F)+not(B)*C*D*E*F+not(A)*C*not(D)*not(E)*F;\n  float FD = D*not(E)*not(F)+B*not(C)*D+A*D*not(E)+not(A)*not(D)*E*F+not(C)*not(D)*E*F+not(B)*C*E*F+not(A)*B*not(C)*F+A*not(C)*E*not(F)+not(A)*not(B)*C*D*not(F)+A*not(B)*not(C)*not(D)*F;\n\n  FA = norm(FA);\n  FB = norm(FB);\n  FC = norm(FC);\n  FD = norm(FD);\n  \n  float FF = mod(FA + FB * 2. + FC * 4. + FD * 8., 16.);\n  \n  return hypercube(FF);\n}\nvoid main()\n{\n  vec4 from4  = vec4(4, 0, 0, 0);\n  vec4 to4    = vec4(0, 0, 0, 0);\n  vec4 up4    = vec4(0, 1, 0, 0);\n  vec4 over4  = vec4(0, 0, 1, 0);\n  float theta4 = 45.0 * DEG2RAD;\n  vec3 from3  = vec3(3.00, 0.99, 1.82);\n  vec3 to3    = vec3(0, 0, 0);\n  vec3 up3    = vec3(0, 1, 0);\n  float theta3 = 45.0 * DEG2RAD;\n  mat4 t4;\n  transform4(from4, to4, up4, over4, t4);\n  t4 *= rot4zx(time * 0.1 * TAU);\n  vec4 v4 = hypercube_lines(mod(vertexId, 64.0));\n  vec3 v3 = project4(v4, from4, 1.0, theta4, t4);\n  v3 *= 0.5;\n  mat3 t3;\n  transform3(from3, to3, up3, t3);\n  vec2 v2 = project3(v3, from3,  1.0, theta3, t3);\n  vec2 aspect = vec2(1, resolution.x / resolution.y);\n  gl_Position = vec4(v2.xy * aspect, 0, 1);\n  v_color = vec4(1,1,1, 1);\n}"
  },
  "screenshotURL": "data/images/images-xyxzilawzfc16xh2w-thumbnail.jpg",
  "hasSound": "",
  "views": "92",
  "likes": "0",
  "revisionId": "YpbRZdGzz4wrmPYg6"
}