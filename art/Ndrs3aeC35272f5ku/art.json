{
  "_id": "Ndrs3aeC35272f5ku",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1516123472947"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1516123545190"
    }
  },
  "origId": "bBkRA4ZZ72cHNA7Xz",
  "name": "test",
  "notes": "from http://glslsandbox.com/e#29475.0",
  "rank": {
    "$numberDouble": "1.7755715220070019"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/billx/tandava-billx-remix\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n#define RESOLUTION_MIN\\tmin(resolution.x, resolution.y)\\n#define ASPECT\\t\\t(resolution.xy/RESOLUTION_MIN)\\n\\n\\nvec2  project(vec2 position, vec2 a, vec2 b);\\nfloat bound(vec2 position, vec2 normal, float translation);\\nfloat sphere(vec2 position, float radius);\\nfloat torus(vec2 position, vec2 radius);\\nfloat cube(vec2 position, vec2 scale);\\nfloat simplex(vec2 position, float scale);\\nfloat segment(vec2 position, vec2 a, vec2 b);\\n\\nfloat contour(float x);\\nfloat point(vec2 position, float radius);\\nfloat point(vec2 position);\\nfloat circle(vec2 position, float radius);\\nfloat line(vec2 p, vec2 a, vec2 b);\\nfloat box(vec2 position, vec2 scale);\\nfloat triangle(vec2 position, vec2 scale);\\nmat2  rmat(float t);\\n\\n\\n\\nvoid main ()\\n{\\n   float finalDesiredPointSize = 3.;\\n   float maxFinalSquareSideSize = floor(sqrt(vertexCount));\\n   float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\\n  \\n  //first the number of elements in a line\\n  float across = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\\n  finalDesiredPointSize = resolution.x/across;\\n  //we want to keep the resolution >> across/down must be the same as resolution.x/resolution.y\\n  //across = across*resolution.x/resolution.y;\\n  \\n  //then the number of possible lines with the given vertexCount\\n  float down = floor(finalMaxVertexCount / across);\\n  \\n  //we can now calculate the final number of elements\\n  float finalVertexCount = across*down;\\n  \\n  //and the consequent finalVertexId\\n  float finalVertexId = mod(vertexId,finalVertexCount);\\n  \\n  //Now we calculate the position of the elements based on their finalVertexId\\n  float x = mod(finalVertexId, across);\\n  float y = floor(finalVertexId / across);\\n  \\n  float u = (x /across);\\n  float v = (y /down);\\n  \\n  float u0 = (u * (across*finalDesiredPointSize/resolution.x));\\n  float v0 = (v * (across*finalDesiredPointSize/resolution.x ));\\n  \\n  float ux =  u0 - 0.5*(across*finalDesiredPointSize/resolution.x);\\n  float vy =  v0- 0.5*(across*finalDesiredPointSize/resolution.x);;\\n  \\n   if(u>0.5)\\n    u = 1.-u;\\n\\t\\n    \\n  float udnd = u;\\n  if(u>0.5)\\n    udnd =  1.-u;\\n  \\n  float snd = texture2D(sound, vec2(0.,  udnd)).a;\\n  \\n    //apply fragment logic\\n\\n\\tvec2 fragcoord = vec2(x,y);\\n    vec2 newResolution = vec2(across, down);\\n  \\n  \\n   vec2 uv = vec2(u,v);//fragcoord.xy/resolution.xy;\\n\\tvec2 p\\t= uv - .5;\\n\\tp \\t*= ASPECT;\\n\\t//p \\t= normalize(vec3(p, 1.-length(p))).xy;\\n\\t\\n\\tvec2 m\\t= vec2(2.*sin(time*.004), cos(time*.003)) - .5;\\n\\tm \\t*= ASPECT;\\n\\tm\\t*= 2.;\\n\\tfloat c \\t= 0.;\\n\\tfloat b \\t= 0.;\\n\\tfloat t\\t= 0.;\\n\\t\\n\\tvec2 d = normalize(m-p);\\n\\n\\t\\n\\tmat2 rm = rmat(m.x*(8.*atan(1.)));\\n\\tfor(int i = 0; i < 48; i++)\\n\\t{\\n\\t\\tp = abs(p)-.5;\\n\\t\\tp *= rm;\\n\\t//\\tp = p/dot(p,p);\\n\\t\\tc += circle(p, .25);\\n\\t\\tb += box(p, vec2(.5));\\n\\t\\tt += triangle(p, vec2(.5));\\n\\t\\tp *= 1. + 32.*fract(.001);\\n\\n\\t\\t\\n\\t}\\n\\t\\n\\tvec4 result = vec4(0.);\\n\\n\\tresult.x\\t\\t+= c;\\n\\tresult.z\\t\\t+= t;\\n\\tresult.y\\t\\t+= b;\\t\\n\\t\\n\\tresult.w \\t= 1.;\\n\\t\\n\\t//gl_FragColor = result;\\n \\n  gl_Position = vec4(ux, vy, 0, 1);\\n  \\n  gl_PointSize = finalDesiredPointSize;\\n\\n  v_color =  result;\\n  \\n\\n}\\n\\n\\n\\nfloat contour(float x)\\n{\\n\\treturn 1.-clamp(.6 * x * RESOLUTION_MIN, 0., 1.);\\n}\\n\\t\\t\\t       \\nvec2 project(vec2 position, vec2 a, vec2 b)\\n{\\n\\tvec2 q\\t \\t= b - a;\\t\\n\\tfloat u \\t\\t= dot(position - a, q)/dot(q, q);\\n\\tu \\t\\t= clamp(u, 0., 1.);\\n\\treturn mix(a, b, u);\\n}\\n\\nfloat bound(vec2 position, vec2 normal, float translation)\\n{\\n  return dot(position, normal) + translation;\\n}\\n\\nfloat sphere(vec2 position, float radius)\\n{\\n\\treturn length(position)-radius;\\n}\\n\\nfloat torus(vec2 position, vec2 radius)\\n{\\n\\t\\n\\treturn abs(abs(length(position)-radius.x)-radius.y);\\n}\\n\\nfloat cube(vec2 position, vec2 scale)\\n{\\n\\tvec2 vertex \\t= abs(position) - scale;\\n\\tvec2 edge \\t= max(vertex, 0.);\\n\\tfloat interior\\t= max(vertex.x, vertex.y);\\n\\treturn min(interior, 0.) + length(edge);\\n}\\n\\nfloat simplex(vec2 position, float scale)\\n{\\t\\t\\n\\tconst float r3\\t= 1.73205080757;//sqrt(3.);\\n\\t\\n\\tposition.y\\t/= r3; \\n\\t\\n\\tvec3 edge\\t= vec3(0.);\\n\\tedge.x\\t\\t= position.y + position.x;\\n\\tedge.y\\t\\t= position.x - position.y;\\n\\tedge.z\\t\\t= position.y + position.y;\\n\\tedge\\t\\t*= .86602540358; //cos(pi/6.);\\n\\t\\n\\treturn max(edge.x, max(-edge.y, -edge.z))-scale/r3;\\n}\\n\\nfloat segment(vec2 position, vec2 a, vec2 b)\\n{\\n\\treturn distance(position, project(position, a, b));\\n}\\n\\nfloat point(vec2 position, float radius)\\n{\\n\\treturn contour(sphere(position*RESOLUTION_MIN, radius));\\t\\n}\\n\\nfloat point(vec2 position)\\n{\\n\\treturn point(position, 3.);\\t\\n}\\n\\nfloat circle(vec2 position, float radius)\\n{\\n\\treturn contour(torus(position, vec2(radius,0.)));\\n}\\n\\nfloat line(vec2 p, vec2 a, vec2 b)\\n{\\n\\treturn contour(segment(p, a, b));\\n}\\n\\nfloat box(vec2 position, vec2 scale)\\n{\\n\\treturn contour(abs(cube(position, scale)));\\t\\n}\\n\\nfloat triangle(vec2 position, vec2 scale)\\n{\\n\\treturn contour(abs(simplex(position, scale.x)));\\t\\n}\\n\\t\\t\\t       \\nmat2 rmat(float t)\\n{\\n\\tfloat c = cos(t);\\n\\tfloat s = sin(t);\\n\\treturn mat2(c, s, -s, c);\\n}\\n\"}",
  "screenshotURL": "data/images/images-q9384dy8uz7uqda4d-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "5"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "rtHMv8wcmNyYAvkcm"
}