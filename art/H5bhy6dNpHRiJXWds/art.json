{
  "_id": "H5bhy6dNpHRiJXWds",
  "owner": {
    "_id": "RfHaub5KYDRmJTzBN",
    "createdAt": {
      "$date": {
        "$numberLong": "1629553450441"
      }
    },
    "username": "przemyslawzaworski",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/3a3abcfa29dc9b0fa9fd2fb25ff10892?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1639948162146"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1647440651371"
    }
  },
  "origId": null,
  "name": "Bezier Surface",
  "notes": "",
  "rank": {
    "$numberDouble": "1.4746405942368692"
  },
  "private": false,
  "unlisted": false,
  "username": "przemyslawzaworski",
  "avatarUrl": "https://secure.gravatar.com/avatar/3a3abcfa29dc9b0fa9fd2fb25ff10892?default=retro&size=200",
  "settings": "{\"num\":24576,\"mode\":\"TRIANGLES\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"const mat4 ModelViewProjection = mat4(\\n  0.974278,  0.000000,\\t 0.000000,   0.000000,\\n  0.000000,  1.326827,  -0.643173,  -0.642787,\\n  0.000000,\\t 1.113340,\\t 0.766504,\\t 0.766044,\\n-14.614178,\\t-9.836445,\\t23.760851,\\t24.346418\\n);\\n\\nvec3 BezierCurve (vec3 a, vec3 b, vec3 c, vec3 d, float t)\\n{\\n  float x = a.x * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * b.x * t * (1.0 - t) * (1.0 - t) + 3.0 * c.x * t * t * (1.0 - t) + d.x * t * t * t;\\n  float y = a.y * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * b.y * t * (1.0 - t) * (1.0 - t) + 3.0 * c.y * t * t * (1.0 - t) + d.y * t * t * t;\\n  float z = a.z * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * b.z * t * (1.0 - t) * (1.0 - t) + 3.0 * c.z * t * t * (1.0 - t) + d.z * t * t * t;\\n  return vec3 (x, y, z);\\n}\\n\\nvec3 BezierPatch (float u, float v)\\n{\\n  vec3 a = BezierCurve (vec3(00.0, 00.0, 00.0),                   vec3(10.0, 00.0, 00.0),                   vec3(20.0, 00.0, 00.0), vec3(30.0, 00.0, 00.0), u);\\n  vec3 b = BezierCurve (vec3(00.0, 00.0, 10.0), vec3(10.0, 30.0 * cos(time * 0.5), 10.0), vec3(20.0, 40.0 * cos(time * 0.6), 10.0), vec3(30.0, 00.0, 10.0), u);\\n  vec3 c = BezierCurve (vec3(00.0, 00.0, 20.0), vec3(10.0, 30.0 * sin(time * 0.9), 20.0), vec3(20.0, 20.0 * sin(time * 0.7), 20.0), vec3(30.0, 00.0, 20.0), u);\\n  vec3 d = BezierCurve (vec3(00.0, 00.0, 30.0),                   vec3(10.0, 00.0, 30.0),                   vec3(20.0, 00.0, 30.0), vec3(30.0, 00.0, 30.0), u);\\n  return BezierCurve(a, b, c, d, v);\\n}\\n\\nvec3 BezierPatchNormal (float u, float v)\\n{\\n  vec3 a = BezierCurve (vec3(00.0, 00.0, 00.0),                   vec3(10.0, 00.0, 00.0),                   vec3(20.0, 00.0, 00.0), vec3(30.0, 00.0, 00.0), u);\\n  vec3 b = BezierCurve (vec3(00.0, 00.0, 10.0), vec3(10.0, 30.0 * cos(time * 0.5), 10.0), vec3(20.0, 40.0 * cos(time * 0.6), 10.0), vec3(30.0, 00.0, 10.0), u);\\n  vec3 c = BezierCurve (vec3(00.0, 00.0, 20.0), vec3(10.0, 30.0 * sin(time * 0.9), 20.0), vec3(20.0, 20.0 * sin(time * 0.7), 20.0), vec3(30.0, 00.0, 20.0), u);\\n  vec3 d = BezierCurve (vec3(00.0, 00.0, 30.0),                   vec3(10.0, 00.0, 30.0),                   vec3(20.0, 00.0, 30.0), vec3(30.0, 00.0, 30.0), u);\\n  vec3 dv = -3.0 * (1.0 - v) * (1.0 - v) * a + (3.0 * (1.0 - v) * (1.0 - v) - 6.0 * v * (1.0 - v)) * b + (6.0 * v * (1.0 - v) - 3.0 * v * v) * c + 3.0 * v * v * d;\\n  vec3 e = BezierCurve (vec3(00.0, 00.0, 00.0),                   vec3(00.0, 00.0, 10.0),                   vec3(00.0, 00.0, 20.0), vec3(00.0, 00.0, 30.0), v);\\n  vec3 f = BezierCurve (vec3(10.0, 00.0, 00.0), vec3(10.0, 30.0 * cos(time * 0.5), 10.0), vec3(10.0, 30.0 * sin(time * 0.9), 20.0), vec3(10.0, 00.0, 30.0), v);\\n  vec3 g = BezierCurve (vec3(20.0, 00.0, 00.0), vec3(20.0, 40.0 * cos(time * 0.6), 10.0), vec3(20.0, 20.0 * sin(time * 0.7), 20.0), vec3(20.0, 00.0, 30.0), v);\\n  vec3 h = BezierCurve (vec3(30.0, 00.0, 00.0),                   vec3(30.0, 00.0, 10.0),                   vec3(30.0, 00.0, 20.0), vec3(30.0, 00.0, 30.0), v);  \\n  vec3 du = -3.0 * (1.0 - u) * (1.0 - u) * e + (3.0 * (1.0 - u) * (1.0 - u) - 6.0 * u * (1.0 - u)) * f + (6.0 * u * (1.0 - u) - 3.0 * u * u) * g + 3.0 * u * u * h;\\n  return normalize(cross(dv, du));\\n}\\n\\nvec3 hash(float p)\\n{\\n  vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\\n  p3 += dot(p3, p3.yzx+33.33);\\n  return fract((p3.xxy+p3.yzz)*p3.zyx); \\n}\\n\\nvoid main() \\n{  \\n  int tessellationFactor = 64; // vertex count = _TessellationFactor * _TessellationFactor * 6\\n  int instance = int(floor(vertexId / 6.0));\\n  float x = sign(mod(20.0, mod(float(vertexId), 6.0) + 2.0));\\n  float y = sign(mod(18.0, mod(float(vertexId), 6.0) + 2.0));\\n  float u = (float(instance / tessellationFactor) + x) / float(tessellationFactor);\\n  float v = (mod(float(instance), float(tessellationFactor)) + y) / float(tessellationFactor);  \\n  gl_Position = ModelViewProjection * vec4(BezierPatch(u,v), 1);\\n  vec3 lightDir = normalize(vec3(10,10,-10));\\n  vec3 normalDir = BezierPatchNormal(u,v);\\n  float d = max(dot(lightDir, normalDir), 0.2);\\n  v_color = vec4(hash(float(instance + 123)), 1.0) * vec4(d, d, d, 1.0);\\n}\"}",
  "screenshotURL": "data/images/images-gtn6sfbe2rqjc5dvk-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "233"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "cn4988wEWGyi7mFSo"
}