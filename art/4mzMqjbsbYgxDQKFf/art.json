{
  "_id": "4mzMqjbsbYgxDQKFf",
  "owner": {
    "_id": "oCanjNxeHcQ7gDPmW",
    "createdAt": {
      "$date": 1505499213122
    },
    "profile": {
      "name": "Zug Zwang",
      "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg"
    },
    "username": "zug"
  },
  "createdAt": {
    "$date": 1522841556382
  },
  "modifiedAt": {
    "$date": 1522841556382
  },
  "origId": "bySCJHkqxfotHbAzv",
  "name": "moduloi kanssani",
  "notes": "",
  "rank": 1.468204548443836,
  "private": false,
  "unlisted": false,
  "username": "zug",
  "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "mic",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n\n\n\n\n\n//KDrawmode=GL_TRIANGLES\n\nvec3 gSunColor = vec3(1.0, 1.2, 1.4) * 10.0;  \n\nvec3 gSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\nvec3 gSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\n\nvec3 gCubeColor = vec3(1.0, 1.0, 1.0);\nfloat gExposure = 0.3;\n\nfloat gCubeColorRandom = 0.0;\n\n#define MOVE_OUTWARDS\n\nfloat fAOAmount = 0.8;\nfloat gFloorHeight = -1.0;\nfloat g_cameraFar = 1000.0;\n\n#define PI radians( 180.0 )\n\n\nvec3 GetSunDir()\n{\n  \treturn normalize( vec3(2.+mouse.x*10. , 40.3*mouse.y, 0.4 ) );\n}\n\n\nvoid GetQuadInfo( const float vertexIndex, out vec2 quadVertId, out float quadId )\n{\n    float twoTriVertexIndex = mod( vertexIndex, 6.0 );\n    float triVertexIndex = mod( vertexIndex, 3.0 );\n  \n    if \t\t( twoTriVertexIndex < 0.5 ) quadVertId = vec2( 0.0, 1.0 );\n    else if\t( twoTriVertexIndex < 1.5 )\tquadVertId = vec2( 1.0, 0.0 );\n    else if ( twoTriVertexIndex < 2.5 )\tquadVertId = vec2( 0.0, 1.0 );\n    else if ( twoTriVertexIndex < 3.5 )\tquadVertId = vec2( 10.6, 0.0 );\n    else if ( twoTriVertexIndex < 4.5 )\tquadVertId = vec2( 1.0, -mouse.t );\n    else \t\t\t\t\t\t\t\tquadVertId = vec2( mouse.x, 11.0+\n                                                          mouse.y );\n\n    quadId = floor( vertexIndex / 16.0 );\n}\n\n\nvoid GetQuadTileInfo( const vec2 quadVertId, const float quadId, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\n{\n    vQuadTileIndex.x = floor( mod( quadId, vDim.x ) );\n    vQuadTileIndex.y = floor( quadId / vDim.x );\n\n  \tvQuadUV.x = floor(quadVertId.x + vQuadTileIndex.x);\n    vQuadUV.y = floor(quadVertId.y + vQuadTileIndex.y);\n\n    vQuadUV = vQuadUV * (1.0 / vDim);\n}\n\n\nvoid GetQuadTileInfo( const float vertexIndex, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\n{\n  \tvec2 quadVertId;\n  \tfloat quadId;\n\tGetQuadInfo( vertexIndex, quadVertId, quadId );  \n  \tGetQuadTileInfo( quadVertId, quadId, vDim, vQuadTileIndex, vQuadUV );   \n}\n\n\nvoid GetMatrixFromZY( const vec3 vZ, const vec3 vY, out mat3 m )\n{\n   vec3 vX = normalize( cross( vY, vZ ) );\n   vec3 vOrthoY = normalize( cross( vZ, vX ) );\n   m[0] = vX;\n   m[1] = vOrthoY;\n   m[2] = vZ;\n}\n\n\nvoid GetMatrixFromZ( vec3 vZAxis, out mat3 m )\n{\n  \tvec3 vZ = normalize(vZAxis);\n   \tvec3 vY = vec3( 0.0, 1.0, 0.0 );\n  \tif ( abs(vZ.y) > 0.99 )\n    {\n       vY = vec3( 1.0, 0.0, 0.0 );\n    }\n  \tGetMatrixFromZY( vZ, vY, m );\n}\n\n\nstruct SceneVertex\n{\n  \tvec3 vWorldPos;\n  \tvec3 vColor;\n  \tfloat fAlpha;\n};\n\n\nfloat GetCosSunRadius()\n{\n  return 0.01;\n}\n\n\nfloat GetSunIntensity()\n{  \t\n  \treturn 0.001;\n}\n\n\nvec3 GetSkyColor( vec3 vViewDir )\n{\n\treturn mix( gSkyBottom, gSkyTop, max( 0.0, vViewDir.y ) );\n}\n#define g_cubeFaces\t\t\t\t\t6.0\n#define g_cubeVerticesPerFace\t\t( 2.0 * 3.0 )\n#define g_cubeVertexCount \t\t\t( g_cubeVerticesPerFace * g_cubeFaces )\n\n//                   6          7\n//                    +----------+\n//                   /|         /|\n//                2 / |       3/ |\n//                 +----------+  |\n//                 |  |       |  |\n//      Y   Z      | 4|       | 5|\n//                 |  +-------|--+\n//      ^ /        | /        | /\n//      |/        0|/        1|/\n//      +--> X     +----------+\n  \nvec3 GetCubeVertex( float fVertexIndex )\n{\n\tvec3 fResult = vec3( 1.0 );\n  \n  \tfloat f = fVertexIndex / 8.0;\n  \tif ( fract( f * 4.0 ) < 0.5 )\n    {\n    \tfResult.x = -fResult.x;\n    }\n  \n  \tif ( fract( f * 2.0 ) < 0.5 )\n    {\n    \tfResult.y = -fResult.y;\n    }\n\n  \tif ( fract( f ) < 0.5 )\n    {\n    \tfResult.z = -fResult.z;\n    }\n  \n  \treturn fResult;\n}\n\n\nvoid GetCubeVertex( const float vertexIndex, const mat4 mat, out vec3 vWorldPos, out vec3 vWorldNormal )\n{\n  \tfloat fFaceIndex = floor( vertexIndex / g_cubeFaces );\n\n  \tvec3 v0, v1, v2, v3;\n  \n  \tif ( fFaceIndex < 0.5 )\n    {\n      \tv0 = GetCubeVertex( 0.0 );\n      \tv1 = GetCubeVertex( 2.0 );\n      \tv2 = GetCubeVertex( 3.0 );\n      \tv3 = GetCubeVertex( 1.0 );\n    }\n  \telse if ( fFaceIndex < 1.5 )\n    {\n      \tv0 = GetCubeVertex( 5.0 );\n      \tv1 = GetCubeVertex( 7.0 );\n      \tv2 = GetCubeVertex( 6.0 );\n      \tv3 = GetCubeVertex( 4.0 );\n    }\n  \telse if ( fFaceIndex < 2.5 )\n    {\n      \tv0 = GetCubeVertex( 1.0 );\n      \tv1 = GetCubeVertex( 3.0 );\n      \tv2 = GetCubeVertex( 7.0 );\n      \tv3 = GetCubeVertex( 5.0 );\n    }\n  \telse if ( fFaceIndex < 3.5 )\n    {\n      \tv0 = GetCubeVertex( 4.0 );\n      \tv1 = GetCubeVertex( 6.0 );\n      \tv2 = GetCubeVertex( 2.0 );\n      \tv3 = GetCubeVertex( 0.0 );\n    }\n  \telse if ( fFaceIndex < 4.5 )\n    {\n      \tv0 = GetCubeVertex( 2.0 );\n      \tv1 = GetCubeVertex( 6.0 );\n      \tv2 = GetCubeVertex( 7.0 );\n      \tv3 = GetCubeVertex( 3.0 );\n    }\n  \telse\n    {\n      \tv0 = GetCubeVertex( 1.0 );\n      \tv1 = GetCubeVertex( 5.0 );\n      \tv2 = GetCubeVertex( 4.0 );\n      \tv3 = GetCubeVertex( 0.0 );\n    }\n  #if 0\n  \tv0 = (vec4(v0, 1) * mat).xyz;\n  \tv1 = (vec4(v1, 1) * mat).xyz;\n  \tv2 = (vec4(v2, 1) * mat).xyz;\n  \tv3 = (vec4(v3, 1) * mat).xyz;\n  #else\n  \tv0 = (mat * vec4(v0, 1)).xyz;\n  \tv1 = (mat * vec4(v1, 1)).xyz;\n  \tv2 = (mat * vec4(v2, 1)).xyz;\n  \tv3 = (mat * vec4(v3, 1)).xyz;\n  #endif\n  \tfloat fFaceVertexIndex = mod( vertexIndex, 6.0 );\n  \n  \tif ( fFaceVertexIndex < 0.5 )\n    {\n\t  \tvWorldPos = v0;\n    }\n  \telse if ( fFaceVertexIndex < 1.5 )\n    {\n\t  \tvWorldPos = v1;\n    }\n  \telse if ( fFaceVertexIndex < 2.5 )\n    {\n\t  \tvWorldPos = v2;\n    }\n  \telse if ( fFaceVertexIndex < 3.5 )\n    {\n\t  \tvWorldPos = v0;\n    }\n  \telse if ( fFaceVertexIndex < 4.5 )\n    {\n\t  \tvWorldPos = v2;\n    }\n  \telse\n    {\n\t  \tvWorldPos = v3;\n    }\n  \n  \tvWorldNormal = normalize( cross( v1 - v0, v2 - v0 ) );  \n}\n\n\nvec3 GetSunLighting( const vec3 vNormal )\n{\n  \tvec3 vLight = -GetSunDir();\n  \n  \tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\n \t  \n  \treturn gSunColor * NdotL;\n}\n\n\nvec3 GetSunSpec( const vec3 vPos, const vec3 vNormal, const vec3 vCameraPos )\n{\n  \tvec3 vLight = -GetSunDir();\n\n  \tvec3 vView = normalize( vCameraPos - vPos );\n  \n  \tvec3 vH = normalize( vView - vLight );\n  \n  \tfloat NdotH = max( 0.0, dot( vNormal, vH ) );\n  \tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\n \n  \tfloat f = mix( 0.01, 1.0, pow( 1.0 - NdotL, 5.0 ) );\n  \n  \treturn gSunColor * pow( NdotH, 10.0 ) * NdotL * f * 0.1;\n}\n\n\nvec3 GetSkyLighting( const vec3 vNormal )\n{\n  \tvec3 vSkyLight = normalize( vec3( -1.0, -2.0, -0.5 ) );\n  \n  \tfloat fSkyBlend = vNormal.y * 0.5 + 0.5;\n \n  \treturn mix( gSkyBottom, gSkyTop, fSkyBlend );\n}\n\n\nvoid GenerateCubeVertex( const float vertexIndex, const mat4 mat, const vec3 vCubeCol, const vec3 vCameraPos, out SceneVertex outSceneVertex )\n{  \n  vec3 vNormal;\n\n  GetCubeVertex( vertexIndex, mat, outSceneVertex.vWorldPos, vNormal );\n\n  outSceneVertex.vColor = vec3( 0.0 );\n\n  outSceneVertex.fAlpha = 1.0;  \n\n  float h = outSceneVertex.vWorldPos.y - gFloorHeight;\n  outSceneVertex.vColor += GetSkyLighting( vNormal );\n  outSceneVertex.vColor *= mix( cos(time*100.)*1., fAOAmount, clamp( h, 0.0, -0.0 ) );\n\n  outSceneVertex.vColor += GetSunLighting( vNormal );\n\n  outSceneVertex.vColor *= vCubeCol;      \n\n  outSceneVertex.vColor += GetSunSpec( outSceneVertex.vWorldPos, vNormal, vCameraPos );\n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  #if 0\n  return mat4(\n    1, 0, 0, trans[0],\n    0, 1, 0, trans[1],\n    0, 0, 1, trans[2],\n    0, 0, 0, 1);\n  #else\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n  #endif\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\nfloat m1p1(float v) {\n  return v * 1.+time*0.001 - 1.;\n}\n\nfloat p1m1(float v) {\n  return v * .5 + .5;\n}\n\nfloat inRange(float v, float minV, float maxV) {\n  return step(minV, v) * step(v, maxV);\n}\n\nfloat at(float v, float target) {\n  return inRange(v, target - 0.1, target + 0.1);\n}\n\nfloat quant(float v, float q) {\n  return min(q, floor(v * q) / (q - 1.));\n}\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx,0.3, 1.0), c.y*2.+c.x);\n}\n\n\nconst float perBlock = 8.;\n\nvoid GetCubePosition( float fCubeId, float numCubes, out mat4 mat, out vec4 vCubeCol )\n{  \n  \tfloat fSeed = fCubeId;\n  \tfloat fPositionBase = fCubeId;\n  \tfloat fSize = 1.0;\n\n  \tvec3 vCubeOrigin = vec3( 0.0, 0.0, 0.0 );\n  \n    float across = 48.;\n    float down = 32.;\n    float uId = mod(fCubeId, across);\n    float vId = floor(fCubeId / across);\n    float u = uId / (across - .1);\n    float v = vId / down;\n    float bx = mod(uId, perBlock);\n    float bu = bx / (perBlock - 1.);\n    float bxId = floor(uId / perBlock);\n    float bzId = floor(vId / perBlock);\n    float numCols = floor(across / perBlock);\n    float numRows = floor(numCubes / across);\n    float numBlocks = floor(numRows / perBlock);\n\n    float snd = texture2D(sound, vec2(mix(1.0, 0.2, u/16.), v * 4.2)).a*10.;\n    float s2 = texture2D(sound, vec2(mix(0.001, 0.002, u), v * 00.05)).a*0.1-sin(time*3.);\n  \n    vCubeOrigin.x += m1p1(bu) * perBlock * time*0.1;\n    float vSpace = numRows * 2.05 + numBlocks * 2.;\n    float z = v * down * 2.05 + bzId * 10.*time;\n    vCubeOrigin.z += fract(-time * 0.0201+ z / vSpace) * vSpace;\n    float height = mix(0.1, 1., hash(fCubeId)) + smoothstep(0., 2., s2) * 1.;\n    vCubeOrigin.y += perBlock * + height;\n  \n    mat  = ident();\n    mat *= rotZ(time + v * 2. + bxId / numCols * PI * 2.);\n    mat *= trans(vCubeOrigin);\n    mat *= scale(vec3(3, height, 1));\n  \n  \tvec3 vRandCol;\n\n  \n    vCubeCol.rgb = vec3(1);//mix(vec3(0.5), vec3(1,1,1), pow(s2, 40.0));  \n  \n    float over = (s2 - 0.75) / 0.25;\n    float hue = 1.;//0.5 + over * 0.7;\n    float sat = step(0.25,s2)*3.;\n    float val = pow(s2*0.01,0.3);\n    vCubeCol.rgb = hsv2rgb(vec3(hue*sat, sat, val));\n    vCubeCol.a = vCubeOrigin.z / vSpace-val;\n}\n\nfloat goop(float t) {\n  return sin(t) * sin(t * 0.27) * sin(t * 0.13) * sin(t * 0.73);\n}\n\n\nvoid main()\n{ \n  \tSceneVertex sceneVertex;\n  \n  \tfloat fov = 1.8;\n  \n  \tvec3 vCameraTarget = vec3( 0, 00.0, 1.0 );\n  \tvec3 vCameraPos = vec3(0.1, 0., -2.);\n    float ca = 0.;\n  \n // get sick!\n  //ca = time + sin(time) * 2.;\n  \tvec3 vCameraUp = vec3( sin(ca), cos(ca), 0.0 );\n  \n  \tvec3 vCameraForwards = normalize(vCameraTarget - vCameraPos);\n  \n  \tmat3 mCamera;\n    GetMatrixFromZY( vCameraForwards, normalize(vCameraUp), mCamera );\n  \n  \tfloat vertexIndex = vertexId;\n  \n  \n    float fCubeId = floor( vertexIndex / g_cubeVertexCount );\n    float fCubeVertex = mod( vertexIndex, g_cubeVertexCount );\n    float fNumCubes = floor( vertexCount / g_cubeVertexCount );\n  \n    mat4 mCube;\n    vec4 vCubeCol;\n\n    GetCubePosition( fCubeId, fNumCubes, mCube, vCubeCol );\n\n    GenerateCubeVertex( fCubeVertex, mCube, vCubeCol.xyz, vCameraPos, sceneVertex );\n\n    mat4 m = persp(radians(115.), resolution.x / resolution.y, 10.1*abs(cos(time)), 1000.);\n    m *= cameraLookAt(vCameraPos, vCameraTarget, vCameraUp);\n    gl_Position = m * vec4(sceneVertex.vWorldPos, 1);\n    \n  \t// Final output color\n  \tfloat fExposure = gExposure;// min( gExposure, time * 0.1 );\n  \tvec3 vFinalColor = sqrt( vec3(1.6) - exp2( sceneVertex.vColor * -fExposure ) );\n  \tvFinalColor -= vec3(0.0-sin(time*0.0)*sceneVertex.vColor.r,0.0,0.0-cos(time*0.2));\n  \n  \tv_color = mix(vec4(vFinalColor, 1), background, vCubeCol.a);\n  \n}"
  },
  "screenshotURL": "data/images/images-2xyojbjixuplu0e56-thumbnail.jpg",
  "hasSound": true,
  "views": 325,
  "likes": 1,
  "revisionId": "cztcSjTqwvF9vi3nE"
}