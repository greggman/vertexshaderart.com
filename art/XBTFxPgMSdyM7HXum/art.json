{
  "_id": "XBTFxPgMSdyM7HXum",
  "owner": {
    "_id": "r2GYGi7RojFiaH5Jp",
    "createdAt": {
      "$date": {
        "$numberLong": "1501964448136"
      }
    },
    "profile": {
      "name": "",
      "avatarUrl": "https://i1.sndcdn.com/avatars-000229270477-3hb23h-large.jpg"
    },
    "username": "alakar"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1501964491901"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1502226167784"
    }
  },
  "origId": null,
  "name": "grid",
  "notes": "",
  "rank": {
    "$numberDouble": "1.3895932687425379"
  },
  "private": true,
  "unlisted": false,
  "username": "alakar",
  "avatarUrl": "https://i1.sndcdn.com/avatars-000229270477-3hb23h-large.jpg",
  "settings": "{\"num\":100000,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/ntreboot/touch\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0.25098039215686274,1],\"shader\":\"//hsv to rgb\\nvec3 hsv2rgb(vec3 c){\\n  c= vec3(c.x, clamp(c.yz,0.0,1.0));\\n  vec4 k = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0,3.0);\\n  vec3 p = abs(fract(c.xxx + k.xyz) * 6.0 - k.www);\\n  return c.z * mix (k.xxx, clamp(p- k.xxx, 0.0, 1.0), c.y);\\n}\\n  \\n#define PI radians(180.0)\\n\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\n\\nvec2 getCirclePoint(float id, float numCircleSegments){\\n  //float id = vertexId;\\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  // id = 0 1 2 3 4 5 6 7 8 9 10 11 12...\\n  //      0 0 0 0 0 0 1 1 1 1 1  1  2\\n  //\\t  0 1 0 1 0 1 0 1 0 1 0  1  0\\n  //\\t  0 1 0 1 0 1 1 2 1 2 1  2  2  3  2  3\\n  \\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\\n  // id = 0 1 2 3 4 5 6 7 8 9 10 11 12...\\n  //\\t  0 0 1 1 2 2 3 3 4 4 5  5  6\\n  //\\t  0 0 0 1 1 1 2 2 2 3 3  3  4\\n  //\\t  0 0 1 0 1 1 1 1 0 1 0  0  0\\n  \\n  \\n  float angle = ux / numCircleSegments * PI * 2.;\\n  float c = cos(angle);\\n  float s = sin(angle);\\n  \\n  float radius = vy + 1.;\\n  \\n  float x = c * radius;\\n  float y = s * radius;\\n  \\n  return vec2(x, y);\\n  //vec2 xy = vec2(x, y);\\n  //gl_Position =  vec4(xy * 0.1, 0, 1);\\n  //v_color = vec4(1,0,0,1);\\n}\\n\\n//#if 0\\nvoid main(){\\n  float numCircleSegments = 16.;\\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\\n  \\n  float numPointsPerCircle = numCircleSegments * 16.;\\n  float circleId = floor(vertexId / numPointsPerCircle);\\n  float numCircles = floor(vertexCount / numPointsPerCircle);\\n  \\n  float sliceId = floor(vertexId / 6.0);\\n  float oddSlice = mod(sliceId, 2.);\\n  \\n  float down = floor(sqrt(numCircles));\\n  float across = floor(numCircles / down);\\n  \\n  float x=mod(circleId, across);\\n  float y=floor(circleId / across);\\n  \\n  float u = x / (across-1.);\\n  float v = y / (across-1.);\\n  \\n  float xoff= 0.;//sin(time + y * 0.2) * 0.1;\\n  float yoff= 0.;//sin(time + x * 0.3) * 0.2;\\n    \\n  float ux =  u * 2. - 1. + xoff;\\n  float vy =  v * 2. - 1. + yoff;\\n  \\n  \\n  float sv = abs(v - 0.5) * 2.;\\n  float su = abs(u - 0.5) * 2.;\\n  float au = abs(atan(su, sv)) / PI;\\n  float av = length(vec2(su, sv));\\n  //float snd = texture2D(sound, vec2(su * .125 ,sv * .25)).a;\\n  float snd = texture2D(sound, vec2(au * .125 ,av * .25)).a;\\n\\n  \\n  // mantener los circulos redondos\\n  float aspect = resolution.x / resolution.y;\\n  \\n  //escala de los circulos\\n  float sc = pow(snd + 0.2, 5.) * mix(1., 1.1, oddSlice);\\n  \\n  \\n  vec4 pos = vec4(circleXY, 0, 1);\\n  mat4 mat = ident();\\n  mat *= scale(vec3(1, aspect, 1));\\n  mat *= rotZ(time * 0.5);\\n  mat *= trans(vec3(ux, vy, 0) * 1.3);\\n  mat *= rotZ(snd * 10. * sign(ux));\\n  mat *= uniformScale(0.05 * sc);\\n  \\n  gl_Position = mat * pos;\\n  \\n  //caber dentro de la pantalla\\n  //vec2 xy = circleXY * 0.1 * sc + vec2(ux,vy) * 1.3;\\n  \\n  //gl_Position=vec4(ux,vy,0,1); \\n  //gl_Position = vec4(xy, 0, 1) * vec4(1, aspect, 1, 1);\\n  \\n  float soff = 0.; //sin(time + x * y * 0.02) * 5.;\\n  \\n  //gl_PointSize = pow(snd + 0.2, 5.) * 30.0 + soff; \\n  //gl_PointSize *= 20. / across;\\n  //gl_PointSize *= resolution.x / 600.;\\n  \\n  \\n  float pump = step(0.8, snd);\\n  float hue = u * .1 + snd * .1 + time * 0.5;//u * .1 + sin(time + v * 20.) * 0.05;\\n  float sat = mix(0.5, 1., pump);//mix(1., 0., av);//1. - av;\\n  float val =1.;mix(1., pow(snd + .2, 5.),pump);//snd; //sin(time + v * u *20.) * 0.5 + 0.5;\\n  \\n  hue = hue + oddSlice * 0.5;\\n  val += oddSlice;\\n  \\n  v_color=vec4(hsv2rgb(vec3(hue,sat,val)), 1);\\n  \\n}\\n//#endif\"}",
  "screenshotURL": "data/images/images-99en3q31gv4zrfq0n-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "10"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "2idjQXLCBaaw8LN6F"
}