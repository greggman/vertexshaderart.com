{
  "_id": "PmW7c9NeLghdwa8S4",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1451676484911
  },
  "modifiedAt": {
    "$date": 1465722652156
  },
  "origId": "JokykDr3Qve8hrLQR",
  "name": "luv",
  "notes": "",
  "rank": 1.8980790703135384,
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/queen-e/the-bird-and-the-bee-florence",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "/*\n                                                                                                                     \n                       .                \n     .-.           ...;....;.    _      \n_.;  :  .-.   .;.::..'.-.    `.,' '     \n ;   ;.;.-'   .;  .;.;.-'    ,'`.       \n `._.' `:::'.;' .;   `:::' -'    `._.   \n        .;               .'             \n     .  ;;-. .-.    .-..'  .-.   .;.::. \n   .'; ;;  ;;   :  :   ; .;.-'   .;     \n .' .'.;`  ``:::'-'`:::'`.`:::'.;'      \n'                   .                   \n                ...;...                 \n   .-.     .;.::..'                     \n  ;   :    .;  .;                       \n  `:::'-'.;' .;                         \n                                        \n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat p1m1(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\n#define NUM_EDGE_POINTS_PER_CIRCLE 48.\n#define NUM_POINTS_PER_CIRCLE (NUM_EDGE_POINTS_PER_CIRCLE * 6.) \nvoid getCirclePoint(const float id, const float inner, const float start, const float end, out vec3 pos) {\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\n  float v = mix(inner, 1., vy);\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float r = pow(cos((u - 0.5) * 2.), 2.);\n  float s = sin(a) * abs(cos(a * 0.5));\n  float c = cos(a);\n  float x = c * v * r;\n  float y = s * v * r;\n  float z = 0.;\n  pos = vec3(x, y, z);  \n}\n\nfloat goop(float t) {\n  return sin(t) + sin(t * 0.27) + sin(t * 0.13) + sin(t * 0.73);\n}\n\nconst float numTrails = 1.;\nvoid main() {\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\n//  float trailId = mod(circleId, numTrails);\n//  float trailV = trailId / numTrails;\n//  circleId = floor(circleId / trailId);\nfloat  trailV = 1.;\n  float pointId = mod(vertexId, NUM_POINTS_PER_CIRCLE);\n  float pointV = pointId / NUM_POINTS_PER_CIRCLE;\n  float sliceId = mod(floor(vertexId / 6.), 2.);\n  float side = mix(-1., 1., step(0.5, mod(circleId, 2.)));\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\n  float cu = circleId / numCircles;\n  vec3 pos;\n  float inner = 0.;//mix(0.0, 1.0, p1m1(sin(goop(circleId) + time * 0.0)));\n  float start = 0.0;//fract(hash(sideId * 0.33) + sin(time * 0.1 + sideId) * 1.1);\n  float end   = 1.; //start + hash(sideId + 1.);\n  getCirclePoint(pointId, inner, start, end, pos); \n  \n  float across = floor(sqrt(numCircles));\n  float down = floor(numCircles / across);\n  float uId = mod(circleId, across);\n  float u = uId / (across - 1.);\n  float vId = floor(circleId / across);\n  float v = vId / (down - 1.);\n  \n  float ur = m1p1(u);// * cos(time);\n  float vr = m1p1(v);// * sin(time);\n  float rr = length(vec2(ur, vr));\n  float aa = (atan(ur, vr) + PI) / (2. * PI);\n  float snd = texture2D(sound, vec2(abs(m1p1(aa)) * 0.0125, rr * .2)).a;\n  \n  \n  vec3 offset = vec3(0);vec3(hash(circleId) * 0.8, m1p1(hash(circleId * 0.37)), 0);\n  offset.x += 0.;m1p1(pow(snd, 20.0) + goop(circleId + time * 0.) * 0.1);\n  offset.y += 0.;goop(circleId + time * 0.) * 0.1;\n  float timeOff = m1p1(mod(time * 0.01 + (cu * 3.), 1.));\n  offset.x += m1p1(u) + mod(vId, 2.) / across; //sin(timeOff * PI * 2.) * cu * 2.;\n  offset.y += m1p1(v); //cos(timeOff * PI * 2.) * cu * 2.;\n  offset.z  = -m1p1(cu);//m1p1(hash(circleId * 0.641)) - trailV * 0.01;\n  vec3 aspect = vec3(1, resolution.x / resolution.y, 1.);\n  \n  \n  mat4 mat = ident(); \n  mat *= scale(aspect);\n // mat *= rotZ(hash(circleId * 0.543) * PI * 2.);\n  mat *= trans(offset);\n // mat *= rotZ(hash(circleId * 0.234) * PI * 2. + time);\n // mat *= rotZ(PI * -1.5 + snd * 6.);\n  mat *= rotZ(m1p1(aa) * PI - PI * 0.5 );\n  mat *= uniformScale(mix(0.0, 0.2, /*hash(circleId) * */ pow(snd, 3.0)));\n  gl_Position = vec4((mat * vec4(pos, 1)).xyz, 1);\n  gl_PointSize = 4.;\n\n  float hue = mix(0.9, 1.05, fract(circleId * 0.17 + snd));\n  float sat = trailV; //mix(1., 0., step(0.99, pow(snd, 5.0)));\n  float val = mix(0.8, 1.0, fract(circleId * 0.79));\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n  v_color.a = p1m1(offset.z);\n  v_color.rgb *= v_color.a;\n}"
  },
  "screenshotURL": "data/images/images-sffycqhx97o09mff9-thumbnail.jpg",
  "hasSound": true,
  "views": 454,
  "likes": 1,
  "revisionId": "MQjrgyQ2syu7Ho5u2"
}