{
  "_id": "5BPbm4rfCpfS92BKS",
  "owner": {
    "_id": "dL7zM2BEuAzXDLtZb",
    "createdAt": {
      "$date": 1553152938197
    },
    "username": "janalex",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/d3da53f9bbb18316fd80884d9d495947?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1553345394446
  },
  "modifiedAt": {
    "$date": 1553345394446
  },
  "origId": "5RiyKNicAa32rA9YZ",
  "name": "1903-GridCircles",
  "notes": "",
  "rank": 1.7731843593295846,
  "private": false,
  "unlisted": true,
  "username": "janalex",
  "avatarUrl": "https://secure.gravatar.com/avatar/d3da53f9bbb18316fd80884d9d495947?default=retro&size=200",
  "settings": {
    "num": 12000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/ringanddorf/ring-dorf-fusion-festival-2018-bachstelzen",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\n#define PI radians(180.0)\n\nvec2 getCirclePoint(float id, float sumCircleSegments) {\n  float ux = floor(id / 6.0) + mod(id, 2.0);\n  float vy = mod(floor(id / 2.0) + floor(id / 3.0), 2.0);\n  // create a horizontal triangle strip\n\n  float angle = ux / sumCircleSegments * PI * 2.0;\n  float c = cos(angle);\n  float s = sin(angle);\n  \n  float radius = vy + 1.0;\n  \n  float x = c * radius;\n  float y = s * radius;\n  \n  return vec2(x, y);\n}\n\n\nvoid main() {\n  float sumCircleSegments = 20.0;\n  vec2 circleXY = getCirclePoint(vertexId, sumCircleSegments);\n  \n  float numPointsPerCircle = sumCircleSegments * 6.0;\n  float circleId = floor(vertexId / numPointsPerCircle);\n  float numCircles = floor(vertexCount / numPointsPerCircle);\n  \n  float down = floor(sqrt(numCircles));\n  float across = floor(numCircles / down);\n  \n  float x = mod(circleId, across);\n  float y = floor(circleId / across);\n  \n  float u = x / (across - 1.0);\n  float v = y / (across - 1.0);\n  \n  float xoff = 0.0; // sin(time + y * 0.2) * 0.01;\n  float yoff = 0.0; //sin(time * 1.1 + x * 0.3) * 0.02;\n  \n  float ux = u * 2.0 - 1.0 + xoff;\n  float vy = v * 2.0 - 1.0 + yoff;\n  \n  float su = abs(u - 0.5) * 1.0;\n  float sv = abs(v - 0.5) * 2.0;\n  float au = abs(atan(su, sv)) / PI;\n  float av = length(vec2(su, sv));\n  float snd = texture2D(sound, vec2(au * 0.05, av * 0.25)).z;\n  \n  float aspect = resolution.x / resolution.y;\n  float scale = pow(snd + 0.2, 5.0);\n  vec2 xy = circleXY * 0.1 * scale+ vec2(ux, vy) * 1.3;\n  \n  gl_Position = vec4(xy, 0, 1) * vec4(1.0, aspect, 1.0, 1.0);\n  \n  float soff = snd; // sin(time * 1.2 + x * y * 0.02) * 5.0;\n  \n  gl_PointSize = pow(snd + 0.3, 5.0) * 10.0 + soff;\n  gl_PointSize *= 20.0 / across;\n  gl_PointSize *= resolution.x / 600.0;\n  \n  float pump = step(0.8, snd);\n  float hue = u * 0.1 + snd + sin(time * 0.1); // sin(time * 1.2 + v * 5.0) * 0.1;\n  float sat = mix(0.0, 1.0, pump);\n  float val = 1.0; mix(0.1, pow(snd + 0.2, 5.0), pump); //sin(time * 1. + v * u * 20.0) + 0.5;\n  \n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1.0);\n}"
  },
  "screenshotURL": "data/images/images-tc4v5rh7115njve12-thumbnail.jpg",
  "hasSound": true,
  "views": 99,
  "likes": 0,
  "revisionId": "d84ypQQJuNFGAtzBR"
}