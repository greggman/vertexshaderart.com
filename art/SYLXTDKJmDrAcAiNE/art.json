{
  "_id": "SYLXTDKJmDrAcAiNE",
  "owner": {
    "_id": "oCanjNxeHcQ7gDPmW",
    "createdAt": {
      "$date": {
        "$numberLong": "1505499213122"
      }
    },
    "profile": {
      "name": "Zug Zwang",
      "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg"
    },
    "username": "zug"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1523671558440"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1523671558440"
    }
  },
  "origId": "XK2y2Cy63Ez45E7pm",
  "name": "unnamed",
  "notes": "",
  "rank": {
    "$numberDouble": "1.2792768499002471"
  },
  "private": false,
  "unlisted": false,
  "username": "zug",
  "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg",
  "settings": {
    "num": 5178,
    "mode": "TRI_STRIP",
    "sound": "https://soundcloud.com/subjex/richard",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "//KDrawmode=GL_TRIANGLE_STRIP\n//KVerticesNumber=100536\n\n#define soundFactor 0.02 //KParameter0 0.>>1.\n#define speedFactor 1.4//KParameter1 0.>>4.\n#define sinFactor0 32.//KParameter2 1.>>100.\n#define sinFactor1 11.//KParameter3 1.>>100.\n\n\n\n#define PI   3.1415926535898\n#define HPI 1.570796326795\n#define SF (soundFactor * 2.)\nfloat SPF = (speedFactor*mouse.x);\n\nvec3 noise(vec3 _v) {\n    return fract(sin(_v * vec3(43658.5453123, 1345.6789012,76543.2109876)));\n}\n\nvec3 rotX(vec3 _v, float _rad) {\n    vec2 f = sin(vec2(_rad, _rad + HPI * SPF));\n    vec3 r = _v;\n    r.y = _v.y * f.y + _v.z * -f.x;\n    r.z = _v.y * f.x + _v.z *  f.y;\n    return r;\n}\n\nvec3 rotY(vec3 _v, float _rad) {\n    vec2 f = sin(vec2(_rad, _rad + HPI));\n    vec3 r = _v;\n    r.x =  _v.x *  f.y + _v.z *  f.x;\n    r.z =  _v.x * -f.x + _v.z *  f.y;\n    return r;\n}\n\nvec3 rotZ(vec3 _v, float _rad) {\n    vec2 f = sin(vec2(_rad, _rad + HPI));\n    vec3 r = _v;\n    r.x =  _v.x *  f.x + _v.y * f.y;\n    r.y =  _v.x * -f.y + _v.y * f.x;\n    return r;\n}\n\n\nvec4 perspective(vec3 _v, float _fov, float _near, float _far, vec2 _res) {\n    vec4 r = vec4(_v, -_v.z);\n    r.xy *= vec2(_res.y / _res.x, 1.0) / tan(radians(_fov * 0.5));\n    r.z = (-_v.z * (_far + _near) - 2.0 * _far * _near) / (_far - _near);\n    return r;\n}\n\nvec3 lookAt(vec3 _v, vec3 _eye, vec3 _look, vec3 _up) {\n    vec3 z = normalize(_eye - _look);\n    vec3 x = normalize(cross(_up, z));\n    vec3 y = cross(z, x);\n    vec4 r = mat4(x.x, y.x, z.x, 0.0, x.y, y.y, z.y, 0.0, x.z, y.z, z.z, 0.0, 0.3, 0.0, 0.0, 1.0) *mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -_eye.x, -_eye.y, -_eye.z, 1.0)* vec4(_v, 1.0);\n    return r.xyz;\n}\n\n\nvec3 shade(vec3 _eye, vec3 _p, vec3 _n, vec3 _dfscol, float _amb, vec2 _spec)\n{\n \n    vec3 rgb;\n    vec3 lit = normalize(vec3(SF, 9.0, 4.0));\n    \n    float diffuse = max(0.70, dot(_n, lit)) * (1.0 - _amb) + _amb;\n    \n    vec3 h = normalize(normalize(_eye - _p) + lit);\n    float specular = 0.0;\n    if(diffuse > 0.0) {\n        specular = max(0.1,dot(_n, h));//specular = max(0.0, pow(dot(_n, h), _spec.x));\n    }\n    \n    rgb = diffuse * (_dfscol *SF)+ specular * _spec.y;\n    \n    return rgb;\n}\n\n\nvec3 giantWorm(vec3 a, float t) {\n    return vec3(sin(t*sinFactor0 * a.x), sin(t*sinFactor1 * a.y), cos(t * a.z));\n}\n\n\nvec3 transformation(vec3 a, float t) {\n    return vec3(sin(t * a.x), sin(t * a.y), cos(t * a.z));\n}\n\n\n#define kShapeVertexCount 36.0\n#define kVertexPerShape 6.0\n\n\nvec3 shapeVertex(float _vId, out vec4 _nI)\n{\n    float faceId = floor(_vId / kVertexPerShape);\n    float vtxId = mod(_vId, kVertexPerShape);\n    vec2 fp;\n    vec3 v;\n    \n    if(vtxId <= 1.0) {\n        fp = vec2(1.0, 1.0);\n    }\n    else if(vtxId == 2.0) {\n        fp = vec2(-1.0, 1.0);\n    }\n    else if(vtxId == 3.0) {\n        fp = vec2(1.0, -1.0);\n    }\n    else {\n        fp = vec2(-1.0, -1.0);\n    }\n    \n    if(faceId == 0.0) {\n        \n        v = vec3(fp.x, fp.y, 1.0);\n        _nI = vec4(0.0, 0.0, 1.0, faceId);\n    }\n    else if(faceId == 1.0) {\n        \n        v = vec3(-fp.x, fp.y, -1.0);\n        _nI = vec4(0.0, 0.0, -1.0, faceId);\n    }\n    else if(faceId == 2.0) {\n        \n        v = vec3(fp.x, 1.0, -fp.y);\n        _nI = vec4(0.0, 1.0, 0.0, faceId);\n    }\n    else if(faceId == 3.0) {\n        \n        v = vec3(fp.x, -1.0, fp.y);\n        _nI = vec4(0.0, -1.0, 0.0, faceId);\n    }\n    else if(faceId == 4.0) {\n        \n        v = vec3(-1.0, fp.y, -fp.x);\n        _nI = vec4(-1.0, SF, 0.0, faceId);\n    }\n    else {\n        \n        v = vec3(1.0, fp.y, fp.x);\n        _nI = vec4(1.0, 0.0, SF, faceId);\n    }\n    \n    return v;\n}\n\n\n\n\n\n\nvoid main() {\n    float shapeCount = floor(vertexCount / kShapeVertexCount);\n    float shapeId = floor(vertexId / kShapeVertexCount);\n    float shapeVertexId = mod(vertexId, kShapeVertexCount);\n    float lineId = 0.;//mod(shapeId, 3.0);\n  float SPF = speedFactor;\n  \n    \n    vec3 lineFactor;\n    vec3 color;\n    \n    if(lineId == 0.0) {\n        lineFactor = vec3(4.1, 6.7, 2.3);\n        color = vec3(0.0, 1.0, 0.0);\n    }\n    else if(lineId == .0) {\n        lineFactor = vec3(4.8, 5.2, 8.3);\n        color = vec3(0.0, 1.0, 1.0);\n    }\n    else {\n        lineFactor = vec3(6.1, 1.2, 3.6);\n        color = vec3(0.0, 1.6, 0.0);\n    }\n    \n    float v = vertexId / vertexCount;\n    float distort = mod(vertexId, 100.) / (300. /v);\n    float snd = soundFactor*texture2D(sound, vec2(mix(0.1, 0.061, distort), mix(0.25, 0., v))).a;\n    \n    float t = shapeId / shapeCount;\n    \n    float aspect = resolution.x / resolution.y;\n    vec4 shapeni;\n    vec3 shapep = shapeVertex(shapeVertexId, shapeni) * 0.04/sin(SPF+time);\n    \n    vec3 shapeHash = noise(vec3(log(shapeId)));\n    float factor = 0.3+snd;\n    float factor2 = 0.005;\n    vec3 shapeOffset = vec3(factor*sin(factor2*time*shapeId),factor*sin(factor2*time*shapeId),0.);\n    vec3 shapeRot = noise(shapeHash) * time * 2.0*speedFactor;\n    \n    shapep = rotX(rotY(rotZ(shapep, shapeRot.z), shapeRot.y), shapeRot.z);\n    shapeni.xyz = rotX(rotY(rotZ(shapeni.xyz, shapeRot.z), shapeRot.y), shapeRot.z);\n    \n    shapep = transformation(lineFactor, (t * time * 0.01/speedFactor) * 2.0) * vec3(aspect, 1.0, aspect) +  (shapep + shapeOffset);\n    SPF * mouse.x;\n    \n    vec3 eye = vec3(0.0, SF, 3.0);\n    \n    color = shade(eye, shapep, shapeni.xyz, vec3(0.5 + shapeHash * 0.05), 0.1, vec2(64.0, 0.8));\n    \n    vec3 p = lookAt(shapep, eye, vec3(1.0), vec3(snd, 1.0, snd*8.));\n    gl_Position = perspective(p, 60.0, 0.01, 22.0, resolution);\n    gl_PointSize = 20.0;\n    \n    v_color = vec4(color+mouse.x-p, 1.0);\n}\n\n"
  },
  "screenshotURL": "data/images/images-rthmchh93i3ckvmwc-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "406"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "na8N7vste36vNLnPa"
}