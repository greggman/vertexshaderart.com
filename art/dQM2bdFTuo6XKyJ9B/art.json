{
  "_id": "dQM2bdFTuo6XKyJ9B",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": 1626219321788
  },
  "modifiedAt": {
    "$date": 1626219321788
  },
  "origId": "3RibQfbPe3tobLxLw",
  "name": "hypercuber",
  "notes": "",
  "rank": 1.6875729983197647,
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 5000,
    "mode": "LINES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define TAU 6.28318530718\n#define DEG2RAD 0.0174532925199433\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}  \nvec4 cross(vec4 U, vec4 V, vec4 W)\n{\n    float A, B, C, D, E, F;       // Intermediate Values\n    // Calculate intermediate values.\n    A = (V[0] * W[1]) - (V[1] * W[0]);\n    B = (V[0] * W[2]) - (V[2] * W[0]);\n    C = (V[0] * W[3]) - (V[3] * W[0]);\n    D = (V[1] * W[2]) - (V[2] * W[1]);\n    E = (V[1] * W[3]) - (V[3] * W[1]);\n    F = (V[2] * W[3]) - (V[3] * W[2]);\n    // Calculate the result-vector components.\n    return vec4(\n          (U[1] * F) - (U[2] * E) + (U[3] * D),\n        - (U[0] * F) + (U[2] * C) - (U[3] * B),\n          (U[0] * E) - (U[1] * C) + (U[3] * A),\n        - (U[0] * D) + (U[1] * B) - (U[2] * A)\n    );\n}\nmat4 rot4xy(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        c, s, 0, 0,\n       -s, c, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1);\n}\nmat4 rot4yz(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        1, 0, 0, 0,\n        0, c, s, 0,\n        0, -s, c, 0,\n        0, 0, 0, 1);\n}\nmat4 rot4zx(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        c, 0, -s, 0,\n        0, 1, 0, 0,\n        s, 0, c, 0,\n        0, 0, 0, 1);\n}\nmat4 rot4xw(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        c, 0, 0, s,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        -s, 0, 0, c);\n}\nmat4 rot4yw(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        1, 0, 0, 0,\n        0, c, 0, -s,\n        0, 0, 1, 0,\n        0, s, 0, c);\n}\nmat4 rot4zw(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat4(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, c, -s,\n        0, 0, s, c);\n}\n// from world to eye space.\nvoid transform4(vec4 from, vec4 to, vec4 up, vec4 over, out mat4 transform)\n{\n  vec4 d = normalize(to-from);\n  vec4 a = normalize(cross(up, over, d));\n  vec4 b = normalize(cross(up, d, a));\n  vec4 c = cross(d, a, b);\n  transform = mat4(a, b, c, d);\n}\n// from 4d to 3d space.\nvec3 project4(vec4 vertex, vec4 from, float radius, float viewangle, mat4 transform)\n{\n  float  S,T;    // Divisor Values\n  vec4 V;      // Scratch Vector\n  if (false /*proj_type == PARALLEL*/)\n    S = 1.0 / radius;\n  else\n    T = 1.0 / tan (viewangle / 2.0);\n  V = vertex - from;\n  if (true /*proj_type == PERSPECTIVE*/)\n    S = T / dot (V, transform[3]);\n  return vec3(\n    S * dot (V, transform[0]),\n    S * dot (V, transform[1]),\n    S * dot (V, transform[2])\n  );\n}\n// from world to eye space.\nvoid transform3(vec3 from, vec3 to, vec3 up, out mat3 transform)\n{\n    vec3 c = normalize(to - from);\n    vec3 a = normalize(cross(up, c));\n    vec3 b = cross(c, a);\n    transform = mat3(a, b, c);\n}\n// from 3d to 2d space.\nvec2 project3(vec3 vertex, vec3 from, float radius, float viewangle, mat3 transform)\n{\n    float  S, T;    // Divisor Values\n    vec3 V;       // Scratch Vector\n    if (false/*proj_type == PARALLEL*/)\n        S = 1.0 / radius;\n    else\n        T = 1.0 / tan (viewangle / 2.0);\n    V = vertex - from;\n    if (true/*proj_type == PERSPECTIVE*/)\n        S = T / dot (V, transform[2]);\n    return vec2(\n        S * dot (V, transform[1]),\n        S * dot (V, transform[0])\n    );\n}\nmat3 rot3(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c        );\n}\nvec4 hypercube(float id)\n{\n  id = mod(id, 16.0);\n  if (id == 0.) return vec4( 1,  1,  1,  1);\n  if (id == 1.) return vec4(-1,  1,  1,  1);\n  if (id == 2.) return vec4( 1, -1,  1,  1);\n  if (id == 3.) return vec4( 1,  1, -1,  1);\n  if (id == 4.) return vec4( 1,  1,  1, -1);\n  if (id == 5.) return vec4(-1, -1,  1,  1);\n  if (id == 6.) return vec4(-1,  1, -1,  1);\n  if (id == 7.) return vec4(-1,  1,  1, -1);\n  if (id == 8.) return vec4( 1, -1, -1,  1);\n  if (id == 9.) return vec4( 1, -1,  1, -1);\n  if (id == 10.)return vec4( 1,  1, -1, -1);\n  if (id == 11.)return vec4(-1, -1, -1,  1);\n  if (id == 12.)return vec4(-1, -1,  1, -1);\n  if (id == 13.)return vec4( 1, -1, -1, -1);\n  if (id == 14.)return vec4(-1,  1, -1, -1);\n  if (id == 15.)return vec4(-1, -1, -1, -1);\n  return vec4(0);\n}\nvec4 getPart0(float id) {\n  if (id == 00.) return hypercube(0.);\n  if (id == 01.) return hypercube(3.);\n  if (id == 02.) return hypercube(3.);\n  if (id == 03.) return hypercube(8.);\n  if (id == 04.) return hypercube(8.);\n  if (id == 05.) return hypercube(2.);\n  if (id == 06.) return hypercube(2.);\n  if (id == 07.) return hypercube(0.);\n}\nvec4 getPart1(float id) {\n  if (id == 08.) return hypercube(0.);\n  if (id == 09.) return hypercube(4.);\n  if (id == 10.) return hypercube(4.);\n  if (id == 11.) return hypercube(10.);\n  if (id == 12.) return hypercube(10.);\n  if (id == 13.) return hypercube(3.);\n  if (id == 14.) return hypercube(8.);\n  if (id == 15.) return hypercube(13.);\n}\nvec4 getPart2(float id) {\n  if (id == 16.) return hypercube(2.);\n  if (id == 17.) return hypercube(9.);\n  if (id == 18.) return hypercube(4.);\n  if (id == 19.) return hypercube(9.);\n  if (id == 20.) return hypercube(10.);\n  if (id == 21.) return hypercube(13.);\n  if (id == 22.) return hypercube(13.);\n  if (id == 23.) return hypercube(9.);\n}\nvec4 getPart3(float id) {\n  if (id == 24.) return hypercube(1.);\n  if (id == 25.) return hypercube(6.);\n  if (id == 26.) return hypercube(6.);\n  if (id == 27.) return hypercube(11.);\n  if (id == 28.) return hypercube(11.);\n  if (id == 29.) return hypercube(5.);\n  if (id == 30.) return hypercube(5.);\n  if (id == 31.) return hypercube(1.);\n}\nvec4 getPart4(float id) {\n  if (id == 32.) return hypercube(7.);\n  if (id == 33.) return hypercube(14.);\n  if (id == 34.) return hypercube(14.);\n  if (id == 35.) return hypercube(15.);\n  if (id == 36.) return hypercube(15.);\n  if (id == 37.) return hypercube(12.);\n  if (id == 38.) return hypercube(12.);\n  if (id == 39.) return hypercube(7.);\n}\nvec4 getPart5(float id) {\n  if (id == 40.) return hypercube(1.);\n  if (id == 41.) return hypercube(7.);\n  if (id == 42.) return hypercube(6.);\n  if (id == 43.) return hypercube(14.);\n  if (id == 44.) return hypercube(11.);\n  if (id == 45.) return hypercube(15.);\n  if (id == 46.) return hypercube(5.);\n  if (id == 47.) return hypercube(12.);\n}\nvec4 getPart6(float id) {\n  if (id == 48.) return hypercube(2.);\n  if (id == 49.) return hypercube(5.);\n  if (id == 50.) return hypercube(8.);\n  if (id == 51.) return hypercube(11.);\n  if (id == 52.) return hypercube(13.);\n  if (id == 53.) return hypercube(15.);\n  if (id == 54.) return hypercube(9.);\n  if (id == 55.) return hypercube(12.);\n}\nvec4 getPart7(float id) {\n  if (id == 56.) return hypercube(0.);\n  if (id == 57.) return hypercube(1.);\n  if (id == 58.) return hypercube(3.);\n  if (id == 59.) return hypercube(6.);\n  if (id == 60.) return hypercube(10.);\n  if (id == 61.) return hypercube(14.);\n  if (id == 62.) return hypercube(4.);\n  if (id == 63.) return hypercube(7.);\n}\nvec4 hypercube_lines(float id)\n{\n  id = mod(vertexId, 64.0);\n  \n  if (id >= 0. && id < 8.)\n    return getPart0(id);\n  if (id >= 8. && id < 16.)\n    return getPart1(id);\n  if (id >= 16. && id < 24.)\n    return getPart2(id);\n  if (id >= 24. && id < 32.)\n    return getPart3(id);\n  if (id >= 32. && id < 40.)\n    return getPart4(id);\n  if (id >= 40. && id < 48.)\n    return getPart5(id);\n  if (id >= 48. && id < 56.)\n    return getPart6(id);\n  if (id >= 56. && id < 64.)\n    return getPart7(id);\n  \n  return vec4(0);\n}\nvoid main()\n{\n  vec4 from4  = vec4(4, 0, 0, 0);\n  vec4 to4    = vec4(0, 0, 0, 0);\n  vec4 up4    = vec4(0, 1, 0, 0);\n  vec4 over4  = vec4(0, 0, 1, 0);\n  float theta4 = 45.0 * DEG2RAD;\n  vec3 from3  = vec3(3.00, 0.99, 1.82);\n  vec3 to3    = vec3(0, 0, 0);\n  vec3 up3    = vec3(0, 1, 0);\n  float theta3 = 45.0 * DEG2RAD;\n  mat4 t4;\n  transform4(from4, to4, up4, over4, t4);\n  t4 *= rot4zx(time * 0.1 * TAU*mouse.x);\n  t4 *= rot4xy(time * 0.05 * TAU);\n  vec4 v4 = hypercube_lines(vertexId);\n  vec3 v3 = project4(v4, from4, 1.0, theta4, t4);\n  v3 *= 0.5;\n  mat3 t3;\n  transform3(from3, to3, up3, t3);\n  vec2 v2 = project3(v3, from3*mouse.y,  1.0, theta3, t3);\n  vec2 aspect = vec2(1, resolution.x / resolution.y);\n  gl_Position = vec4(v2.xy * aspect*sin(mouse), 0, 1);\n  v_color = vec4(1,1,1, 1);\n}"
  },
  "screenshotURL": "data/images/images-3v58l2e254bjseaxp-thumbnail.jpg",
  "hasSound": "",
  "views": 105,
  "likes": 0,
  "revisionId": "NiupYwr6u7Mes5H7t"
}