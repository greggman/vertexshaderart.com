{
  "_id": "XCcCm2KWsWPqG7Puh",
  "owner": {
    "_id": "8zztH8K59zQaKjuQX",
    "createdAt": {
      "$date": {
        "$numberLong": "1677359387406"
      }
    },
    "profile": {
      "first_name": "James",
      "last_name": "Andrew",
      "avatarUrl": "https://lh3.googleusercontent.com/a/AGNmyxa3JZWJm88yunQiCwAfn9zM-tkF1s8O-hJsYEynRw=s96-c"
    },
    "username": "james2"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1678232801531"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1678232801531"
    }
  },
  "origId": "3oRDhfqRydMBEWnD5",
  "name": "Amoeba V4 - Inside",
  "notes": "",
  "rank": {
    "$numberDouble": "1.3853496822634124"
  },
  "private": false,
  "unlisted": true,
  "username": "james2",
  "avatarUrl": "https://lh3.googleusercontent.com/a/AGNmyxa3JZWJm88yunQiCwAfn9zM-tkF1s8O-hJsYEynRw=s96-c",
  "settings": {
    "num": 50000,
    "mode": "LINE_LOOP",
    "sound": "https://soundcloud.com/globalliquidity/until-that-time",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "//KDrawmode=GL_LINE_LOOP\n//KVerticesNumber=20000\n\n#define turning 1.4//KParameter0 1.4>>100.\n#define rotateXcos 1.//KParameter1 1.>>5.\n#define rotateYcos 1.//KParameter2 1.>>5.\n#define rotateZcos 1.//KParameter3 1.>>5.\n#define spikeFactor 4. //KParameter4 1.>>10.\n#define spikeFactor2 4. //KParameter5 1.>>100.\n\n#define PI radians(180.)\n\n// times 2 minus 1\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// times .5 plus .5\nfloat t5p5(float v) {\n  return v * 0.5 + 0.5;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nstruct point {\n  vec3 position;\n  float a;\n  float b;\n  float rad;\n  float snd;\n};\n\npoint getPoint(float i) {\n\n  float pointsPerTurn = floor(sqrt(vertexCount) * 2.);\n  pointsPerTurn -= mod(pointsPerTurn, 16.);\n  pointsPerTurn++;\n  float turns = vertexCount / pointsPerTurn;\n  \n  float a = (PI + PI / turns) * i; //(acos(1.0 - 2.0 * i) / PI);\n  float b = 2. * PI * i * turns;\n  \n\n  a -= mod(vertexId, 2.) * PI / (turns - 1.);\n  a = clamp(a, 0., PI);\n\n  \n  float spike = pow(cos(a * spikeFactor), 4.);\n  bool middle = a > PI / 8. && a < PI * 7. / 8.;\n  if (middle) {\n\t  spike *= pow(sin(b * spikeFactor2), 4.);\n  }\n \n  \n  float snd = pow(texture2D(sound, vec2(0.005, spike*0.025)).a, 4.);\n\n  float rad = 0.35;    \n  rad += spike * ((snd * 0.5) * abs(sin(time *4.5)));\n  rad += snd * 0.2;  \n\n  \n  float x = sin(a);\n  float y = cos(a);  \n  float z = sin(b) * x;\n  x *= cos(b);\n      \n  return point(vec3(x,  y, z) * rad, a, b, rad, snd);  \t\n}\n\nvoid main() {\n  \n  point p1 = getPoint(vertexId / vertexCount);\n//  point p2 = getPoint((vertexId - 1.) / vertexCount);\n//  point p3 = getPoint((vertexId - 2.) / vertexCount);\n//  vec3 normal = normalize(cross(p2.position - p1.position, p3.position - p1.position));\n  \n  \n  float mx = sin(time - p1.rad) * turning;\n//  float mx = PI * -mouse.y;\n  float my = time - p1.rad;\n//  float my = PI * -mouse.x;\n  float mz = sin(time * 0.44 - p1.rad);\n  mat2 rotateX = mat2(cos(mx)*rotateXcos, -sin(mx), sin(mx), cos(mx));\n  mat2 rotateY = mat2(cos(my)*rotateYcos, -sin(my), sin(my), cos(my));\n  mat2 rotateZ = mat2(cos(mz)*rotateZcos, -sin(mz), sin(mz), cos(mz));\n\n  p1.position.yz *= -rotateX;\n  p1.position.xz *= -rotateY;\n  p1.position.xy *= -rotateZ;  \n\n  \n  float screenZ = -0.;\n  float eyeZ = -4.5;\n  float perspective = (eyeZ - screenZ) / (p1.position.z - eyeZ);\n  p1.position.xy *= perspective;\n  \n  float aspect = resolution.x / resolution.y;\n  p1.position.x /= aspect;\n  \n  \n  float tm = PI * 1.75;time * 0.1;\n  \n  mat4 mat = persp(radians(120.0), resolution.x / resolution.y, 0.1, 1.0);\n  gl_Position = mat * vec4(p1.position, 1);\n  \n  gl_PointSize = 2. - p1.position.z * 5.;\n  \n\n\n  float h = fract(p1.a / (2. * PI) * PI/8. + (time * 0.05));\n  float s = (p1.rad - 0.5 * p1.snd) * 3.;\n  \n  if (p1.a < PI / 8.) {\n  \ts = mix(s, 0., 1. - p1.a / (PI / 8.));\n  } else if (p1.a > PI * 7. / 8.) {\n  \ts = mix(s, 0., 1. - (PI - p1.a) / (PI / 8.));  \n  }\n  float v = 0.4 - p1.position.z * 2.;\n//  float v = normal.z * 0.5 + 0.5; \n  \n  v_color = vec4(hsv2rgb(vec3(h, s, v)), 1);\n}"
  },
  "screenshotURL": "data/images/images-t55qqohod9fuexw2p-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "4"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "oKgCYYaDabLxv7rxH"
}