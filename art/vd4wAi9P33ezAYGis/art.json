{
  "_id": "vd4wAi9P33ezAYGis",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": "1445777397953"
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1524969508745"
  },
  "modifiedAt": {
    "$date": "1524970940241"
  },
  "origId": null,
  "name": "overdraw",
  "notes": "",
  "rank": "1.6514670372027405",
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 4,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/*\n\nOverdraw with blending test\n\nThis vertex shader just draws full canvas size planes\n\nTurn on the Chrome Devtools FPS Meter\n(Console tab -> Press ESC -> bottom left â‹® icon -> Rendering)\nIncrease the count above (the number to the right of the slider)\n**SLOWLY** Try 50, then 100, then 150, then 200. If you put\na large number like 10000 the browser may kill WebGL since\nthe draw took too long.\n\nOn my 2014 Macbook Pro I get to about 100 with the window\nfullscreen. That's only 100/6 or 16 screens of pixels\neven though the fragment shader is just\n\n     varying vec4 v_color\n     void main() {\n       gl_FragColor = v_color;\n     }\n\nNote this page uses CSS pixels so on an HD-DPI display\nit's probably only drawing 1/4th the pixels relative\nto the actual screen resolution.\n\nThings to consider\n\n*  The browser is composting the WebGL canvas on the page\n   so that's one fullscreen of pixels of rendering\n\n*  This text (the code editor) is another 1/2 or fullscreen\n   of pixels being rendered and compositied on the page.\n\n*  Vertexshaderart.com has blending enabled. Blending is slower\n   than not blending.\n\n*  Changing DRAW_BACK_TO_FRONT to 0 I can set count to 350\n   which is 58 screens of pixels or 3.6x faster because of\n   early depth test rejection. This is of course a simple\n   fragment shader. For a complex fragment shader the\n   difference would be far higher.\n\n*/\n\n#define DRAW_BACK_TO_FRONT 1\n\nvoid main() {\n  float id = vertexId;\n  float x = mod(id, 2.);\n  float y = mod(floor(id / 2.) + floor(id / 3.), 2.); \n  float planeId = floor(id / 6.);\n  float numPlanes = floor(vertexCount / 6.);\n  float z = planeId / numPlanes;\n\n  #if DRAW_BACK_TO_FRONT\n  z = 1. - z;\n  #endif\n  \n  gl_Position = vec4(vec3(x, y, z) * 2. - 1., 1);\n\n  v_color = vec4(0.01, 0.02, 0.03, 0.01);\n}"
  },
  "screenshotURL": "data/images/images-05k5j8cqbq2u0qhx0-thumbnail.jpg",
  "hasSound": "",
  "views": "12",
  "likes": "0",
  "revisionId": "hJ6uJgXdWa9MAN38z"
}