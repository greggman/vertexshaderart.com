{
  "_id": "ZqGJTgEXDTHA5rBjL",
  "owner": {
    "_id": "MqPTcXoEuGA34rGui",
    "createdAt": {
      "$date": {
        "$numberLong": "1497270876730"
      }
    },
    "username": "zugzwang404",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/fec4f7164a172e58419d6bff6d7368b3?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1498553186180"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1498553186180"
    }
  },
  "origId": null,
  "name": "gmesher 4 K",
  "notes": "",
  "rank": {
    "$numberDouble": "1.8170421638329906"
  },
  "private": false,
  "unlisted": true,
  "username": "zugzwang404",
  "avatarUrl": "https://secure.gravatar.com/avatar/fec4f7164a172e58419d6bff6d7368b3?default=retro&size=200",
  "settings": "{\"num\":43701,\"mode\":\"LINE_LOOP\",\"sound\":\"https://soundcloud.com/chibi-tech/lolitazia-season\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n//KDrawmode=GL_LINES_LOOP\\n\\n\\n#define parameter0 3.//KParameter0 1.>>1.\\n#define parameter1 1.//KParameter1 0.1>>1.\\n#define parameter2 1.//KParameter2 0.>>1.\\n#define parameter3 1.//KParameter3 0.5>>3.\\n#define parameter4 1.//KParameter4 0.>>1.\\n#define parameter5 1.//KParameter5 0.>>3.\\n#define parameter6 1.//KParameter6 0.>>2.\\n#define parameter7 1.//KParameter7 0.>>2.\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n#define PI radians(180.0)\\n \\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 5.0, 1.0 / parameter2, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, .1, 1.0), c.y);\\n}\\n\\nmat4 rotX(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      1, 0, 0, 0,\\n      parameter3, c, s, 0,\\n      0, -s, c, 0,\\n      0, 1, 0, 1);  \\n}\\n\\nmat4 rotY(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 1,\\n      s, 0, c, 0,\\n      0, 1, 0, 1);  \\n}\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians/parameter5);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0.2,\\n    trans, 2);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\n// times 2 minus 1\\nfloat t2m1(float v) {\\n  return v * 2. - 2.;\\n}\\n\\n// times .5 plus .5\\nfloat t5p5(float v) {\\n  return v * 0.5 + 0.5;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\\n  float u = ux / numEdgePointsPerCircle;\\n  float v = mix(inner, 1., vy);\\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\\n  float s = sin(a);\\n  float c = cos(a);\\n  float x = c * v;\\n  float y = s * v;\\n  float z = 0.;\\n  pos = vec3(x, y, z);  \\n}\\n\\n\\n#define NUM_EDGE_POINTS_PER_CIRCLE 4.0\\n#define NUM_POINTS_PER_CIRCLE (NUM_EDGE_POINTS_PER_CIRCLE * 6.0)\\n#define NUM_CIRCLES_PER_GROUP 12.0\\nvoid main() {\\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\\n  float groupId = floor(circleId / NUM_CIRCLES_PER_GROUP);\\n  float pointId = mod(vertexId, NUM_POINTS_PER_CIRCLE);\\n  float sliceId = mod(floor(vertexId / 6.), 2.);\\n  float side = mix(-1., 1., step(0.5, mod(circleId, 2.)));\\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\\n  float numGroups = floor(numCircles / NUM_CIRCLES_PER_GROUP); \\n  float cu = circleId / numCircles;\\n  float gv = groupId / numGroups;\\n  float cgId = mod(circleId, NUM_CIRCLES_PER_GROUP);\\n  float cgv = cgId / NUM_CIRCLES_PER_GROUP;\\n  float ncgv = 1. - cgv;\\n  \\n  \\n  float gAcross = floor(sqrt(numGroups));\\n  float gDown = floor(numGroups / gAcross);\\n  float gx = mod(groupId, gAcross);\\n  float gy = floor(groupId / gAcross);\\n  vec3 offset = vec3(\\n    gx - (gAcross - 1.) / 2.,// + mod(gy, 2.) * 0.5,\\n    gy - (gDown - 1.) / 2.,\\n    cgv) * 0.17;\\n\\n  float tm = time - cgv * 0.2;\\n  float su = hash(groupId);\\n  float snd2 = 1.0; //texture2D(sound, vec2(mix(0.001, 0.021, abs(atan(offset.x, offset.y) / PI )), length(offset) * 0.1)).a;\\n  float snd = texture2D(sound, vec2(\\n    mix(0.5, 0.02, gv), \\n    cgv * 0.05)).a;\\n  \\n\\n  vec3 pos;\\n  float inner = 0.;\\n  float start = 0.;\\n  float end   = 1.;\\n  getCirclePoint(NUM_EDGE_POINTS_PER_CIRCLE, pointId, inner, start, end, pos); \\n    \\n  float aspect = resolution.y / resolution.x;\\n  mat4 mat = ident();\\n  mat *= scale(vec3(aspect, 1, 1) * 1.5);\\n  mat *= rotZ(time * 0.1 * mix(-1., 1., mod(groupId, 2.)));\\n  mat *= trans(vec3(offset));\\n  float gt = time + gv * PI * 50.;\\n  mat *= trans(vec3(sin(gt), cos(gt), 0) * .095 * (1. - cgv * .5));\\n  mat *= uniformScale(0.3 * cgv + snd * .1);\\n  mat *= rotZ(PI * .25);\\n  \\n  gl_Position = mat * vec4(pos, 1);\\n  gl_PointSize = 4.;\\n  \\n  float pump = step(0.65, snd);\\n  float hue = 1. + cgId * 1. + pump * .7;\\n  float sat = mod(cgId, 2.) + pump;\\n  float val = 1. - mod(cgId + 1., 2.);\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\\n  v_color.rgb = mix(v_color.rgb, vec3(1), pump);\\n  v_color.rgb *= v_color.a;\\n}\\n\\n\"}",
  "screenshotURL": "data/images/images-nntysj1mb2vtnljdo-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "3"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "vWfdZqj3v8ZMFZuem"
}