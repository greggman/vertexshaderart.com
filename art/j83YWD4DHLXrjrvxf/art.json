{
  "_id": "j83YWD4DHLXrjrvxf",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1448993319729
  },
  "modifiedAt": {
    "$date": 1448993319729
  },
  "origId": "WEKX8jLk432REZLJq",
  "name": "☁",
  "rank": 1.3134746311265817,
  "private": false,
  "unlisted": false,
  "username": "gman",
  "settings": {
    "num": 73728,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/silver-romance/acdc-thunder-struck",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.9921568627450981,
      0.984313725490196,
      1,
      1
    ],
    "shader": "/*\n\n┬  ┬┌─┐┬─┐┌┬┐┌─┐─┐ ┬┌─┐┬ ┬┌─┐┌┬┐┌─┐┬─┐┌─┐┬─┐┌┬┐\n└┐┌┘├┤ ├┬┘ │ ├┤ ┌┴┬┘└─┐├─┤├─┤ ││├┤ ├┬┘├─┤├┬┘ │ \n └┘ └─┘┴└─ ┴ └─┘┴ └─└─┘┴ ┴┴ ┴─┴┘└─┘┴└─┴ ┴┴└─ ┴ \n\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat p1m1(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\n#define NUM_EDGE_POINTS_PER_CIRCLE 48.\n#define NUM_SUBDIVISIONS_PER_CIRCLE 256.\n#define NUM_POINTS_PER_DIVISION (NUM_EDGE_POINTS_PER_CIRCLE * 6.)\n#define NUM_POINTS_PER_CIRCLE (NUM_SUBDIVISIONS_PER_CIRCLE * NUM_POINTS_PER_DIVISION) \nvoid getCirclePoint(const float id, const float inner, const float start, const float end, out vec3 pos, out vec3 uvf, out float snd) {\n  float edgeId = mod(id, NUM_POINTS_PER_DIVISION);\n  float ux = floor(edgeId / 6.) + mod(edgeId, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float sub = floor(id / NUM_POINTS_PER_DIVISION);\n  float subV = sub / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\n  float level = subV + vy / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\n  float v = 1.;//mix(inner, 1., level);\n  float ringId = sub + vy;\n  float ringV = ringId / NUM_SUBDIVISIONS_PER_CIRCLE;\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float skew = 1. - step(0.5, mod(ringId - 2., 3.));\n  snd = texture2D(sound, vec2((0.02 + abs(u * 2. - 1.)) * 0.20, 1. -ringV)).a;\n  \n  \n  a += 1. / NUM_EDGE_POINTS_PER_CIRCLE * PI * 2. * 2. * time * 1. + snd * 1.5;\n  float s = sin(a);\n  float c = cos(a);\n  float x = c * v;\n  float y = s * v;\n  float z = mix(inner, 1., level);\n  pos = vec3(x, y, z);  \n  uvf  = vec3(floor(edgeId / 6.) / NUM_EDGE_POINTS_PER_CIRCLE, subV, floor(id / 6.));\n}\n\nfloat goop(float t) {\n  return sin(t) + sin(t * 0.27) + sin(t * 0.13) + sin(t * 0.73);\n}\n\nvoid main() {\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\n  float pointId = mod(vertexId, NUM_POINTS_PER_CIRCLE);\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\n  float cu = circleId / numCircles;\n  vec3 pos;\n  float inner = 0.5;\n  float start = 0.;//time * -0.1;\n  float end   = start + 1.;\n  float snd;\n  vec3 uvf;\n  getCirclePoint(pointId, inner, start, end, pos, uvf, snd); \n  \n  vec3 offset = vec3(0);\n  offset.z += 40.;\n  \n  mat4 mat = ident(); \n  mat *= persp(radians(65.), resolution.x / resolution.y, 0.1, 100.);\n  mat *= trans(offset);\n  mat *= scale(vec3(0.25, 0.25, -80.));\n  gl_Position = mat * vec4(pos, 1);\n  gl_PointSize = 4.;\n  \n  float th  = texture2D(sound, vec2(0.018 / 4., 0.0)).a;\n\n  float h   = sin(time * 0.1) + 0.4;\n  float hue = mix(h, h + .1, snd);\n  float sat = 0.2;\n  float val = mix(.065, 1., snd);\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n  v_color.a = 1.0 - uvf.y;\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\n  v_color.rgb = mix(v_color.rgb, 1. - v_color.rgb, step(0.95, th));//pow(th, 10.));\n}"
  },
  "screenshotURL": "data/images/images-m8qw2xmg4374uoz6b-thumbnail.jpg",
  "hasSound": true,
  "views": 158,
  "likes": 0,
  "revisionId": "vGRncmZrhjGyDbYK9",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}