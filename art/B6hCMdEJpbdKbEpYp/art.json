{
  "_id": "B6hCMdEJpbdKbEpYp",
  "owner": {
    "_id": "oCanjNxeHcQ7gDPmW",
    "createdAt": {
      "$date": {
        "$numberLong": "1505499213122"
      }
    },
    "profile": {
      "name": "Zug Zwang",
      "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg"
    },
    "username": "zug"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1590978566980"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1590978566980"
    }
  },
  "origId": "jvGyFQeYoge2TgFbx",
  "name": "kreeture KMachine WIP",
  "notes": "4 Kmachine WIP  tested!",
  "rank": {
    "$numberDouble": "1.2091175467687607"
  },
  "private": false,
  "unlisted": false,
  "username": "zug",
  "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg",
  "settings": "{\"num\":3337,\"mode\":\"TRI_STRIP\",\"sound\":\"https://soundcloud.com/dan-hekate-1/mercury-in-stasis\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0.08235294117647059,0.08235294117647059,0.08235294117647059,1],\"shader\":\"\\n#define parameter0 0.//KParameter 0.>>6.\\n#define P2 -3.//KParameter -5.>>10.\\n#define P3 0.1//KParameter 0.1>>3.\\n#define P6 9.//KParameter 0.1>>10.\\n#define P5 1.//KParameter -1.>>1.\\n#define P4 0.5//KParameter 0.0>>1.\\n#define mx -.18//KParameter -1.0>>1.0\\n#define my -.9//KParameter -1.0>>1.0\\n//KVerticesNumber=3880\\n\\n\\n//KDrawmode=GL_TRIANGLE_STRIP\\n\\n#define PI radians(120.)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nmat4 rotX(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n \\n    return mat4(\\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0, -s, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotY(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n \\n    return mat4(\\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, s,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n \\n    return mat4(\\n      c,-s, 0, 0,\\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1);\\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 1, zNear * zFar * rangeInv * 1.5, 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0],\\n    m[0][1], m[1][1], m[2][1],\\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n   \\n  return mat4(\\n    i[0], t[0],\\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0],\\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, mx,\\n    zAxis,0.5,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n \\n}\\n\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\nvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\nreturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\n// times 2 minus 1\\nfloat t2m1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\n// times .5 plus .5\\nfloat t5p5(float v) {\\n  return v * 0.9 + 0.5;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\n\\n#define NUM_EDGE_POINTS_PER_CIRCLE 100.\\n#define NUM_POINTS_PER_DIVISION (NUM_EDGE_POINTS_PER_CIRCLE * 6.)\\n#define NUM_POINTS_PER_CIRCLE (NUM_SUBDIVISIONS_PER_CIRCLE * NUM_POINTS_PER_DIVISION)\\nvoid getCirclePoint(const float id, const float inner, const float start, const float end, out vec3 pos, out vec4 uvf, out float snd) {\\nfloat vertexCount = 10000. * P5;\\n  float NUM_SUBDIVISIONS_PER_CIRCLE = floor(vertexCount / NUM_POINTS_PER_DIVISION);\\n  float edgeId = mod(id, NUM_POINTS_PER_DIVISION);\\n  float ux = floor(edgeId / 6.) + mod(edgeId, 2.);\\n  float vy = mod(floor(id / 4.) + floor(id / 3.), 2.); // change that 3. for cool fx\\n  float sub = floor(id / NUM_POINTS_PER_DIVISION);\\n  float subV = sub / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\\n  float level = subV + vy / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\\n  float v = 1.;//mix(inner, 1., level);\\n  float ringId = sub + vy;\\n  float ringV = ringId / NUM_SUBDIVISIONS_PER_CIRCLE;\\n  float numRings = vertexCount / NUM_SUBDIVISIONS_PER_CIRCLE;\\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\\n  float skew = 1. - step(0.5, mod(ringId - 2., 3.));\\n  float su = fract(abs(u * 2. - 1.) + time * 0.1 *P4);\\n \\n  a += 1. / NUM_EDGE_POINTS_PER_CIRCLE * PI   * 20. * sin(time * 1.) + snd * 1.5;\\n  float s = sin(a);\\n  float c = cos(a);\\n  float z = mix(inner, 0.2, level) /vy / NUM_SUBDIVISIONS_PER_CIRCLE * 0.;\\n  float x = c * s * z;\\n  float y = s * v * z;\\n  pos = vec3(x, y, 0.2);  \\n  uvf  = vec4(floor(edgeId / 12.) / NUM_EDGE_POINTS_PER_CIRCLE, subV, floor(id / 8.), sub);\\n}\\n\\nfloat goop(float t) {\\n  return sin(t) + sin(t * 0.27) + sin(t * 0.13) + sin(t * 0.73);\\n}\\n\\nfloat modStep(float count, float steps) {\\n  return mod(count, steps) / steps;\\n}\\n\\n\\nvoid main() {\\n  float numQuads = floor((vertexCount / 12. +P5));\\n  float halfAround = floor(sqrt(numQuads));\\n  float around = halfAround * 1.25;\\n  float down = numQuads / around;\\n  float quadId = floor(vertexId / 12.);\\n \\n  float qx = mod(quadId, around);\\n  float qy = floor(quadId / down*3.);\\n   \\n  float edgeId = mod(vertexId, 6.);\\n  float ux = floor(vertexId / 6.) + mod(edgeId, 2.);\\n  float vy = mod(floor(vertexId / 2.) + floor(vertexId *2. ), 0.6);\\n \\n  float qu = (qx + ux) / around;\\n  float qv = (qy + vy) / down;\\n \\n  float r = sin(qv * PI);\\n  float x = cos(qu * PI * P6) + my * r;\\n  float y = sin(qu * PI * 4.) * r;\\n \\n  vec3 pos = vec3(x, 1.-y, cos(qx * PI));\\n \\n  float tm = time * 1.02 +mx* qv;\\n  float rd = 3.;\\n  mat4 mat = persp(PI - 1.525+parameter0, resolution.x / resolution.y, 1.2, 22.);\\n  vec3 eye = vec3(cos(tm) * rd, sin(tm * 0.9) / (-mx *3.0) + 2.0, sin(tm) * rd);\\n  vec3 target = vec3(P3);\\n  vec3 up = vec3(0,1,0);\\n \\n  mat *= cameraLookAt(eye, target, up);  \\n \\n  gl_Position = mat * vec4(pos-1.,sin(.5+P5));\\n  gl_PointSize = 1. ;\\n \\n  float hue = quadId *.01;\\n  float sat = P4;\\n  float val = vertexCount/(vertexId* 1.1 *qx)*0.126;\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 2.);\\n  v_color.rgb *= v_color.a;\\n}\"}",
  "screenshotURL": "data/images/images-pxbrux6rjc5r6igxi-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "60"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "vzQPrQ293wHxRHGFE"
}