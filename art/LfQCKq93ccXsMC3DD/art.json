{
  "_id": "LfQCKq93ccXsMC3DD",
  "owner": {
    "_id": "i6CP4B7Taawo7aeSC",
    "createdAt": {
      "$date": 1662538816859
    },
    "username": "rmccampbell7",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/06a15f2260899be5cfa7484a476adf34?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1662539825005
  },
  "modifiedAt": {
    "$date": 1662620117807
  },
  "origId": "rprQ8uGr5rvgeTCMd",
  "name": "Sphere 2",
  "notes": "",
  "rank": 1.4795102517287664,
  "private": false,
  "unlisted": true,
  "username": "rmccampbell7",
  "avatarUrl": "https://secure.gravatar.com/avatar/06a15f2260899be5cfa7484a476adf34?default=retro&size=200",
  "settings": {
    "num": 10000,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "const float EXPLODE = 0.15;\nconst float SPEED = .5;\nconst float NLON = 32.;\nconst float NLAT = 16.;\nconst float NQUADS = NLON*NLAT;\nconst float TAU = radians(360.);\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 rotx(vec3 v, float theta) {\n  float c = cos(theta), s = sin(theta);\n  return vec3(v.x, c*v.y-s*v.z, s*v.y+c*v.z);\n}\n\nvec3 roty(vec3 v, float theta) {\n  float c = cos(theta), s = sin(theta);\n  return vec3(c*v.x+s*v.z, v.y, -s*v.x+c*v.z);\n}\n\nvec3 rotz(vec3 v, float theta) {\n  float c = cos(theta), s = sin(theta);\n  return vec3(c*v.x-s*v.y, s*v.x+c*v.y, v.z);\n}\n\nstruct Vert {\n  vec3 pos;\n  vec2 uv;\n};\n\nVert getQuadVert(vec2 quadCoord, float quadVertId) {\n  vec2 vertOff = (quadVertId == 0. ? vec2(0, 0) :\n                  quadVertId == 1. ? vec2(1, 0) :\n                  quadVertId == 2. ? vec2(1, 1) :\n                  quadVertId == 3. ? vec2(1, 1) :\n                  quadVertId == 4. ? vec2(0, 1) :\n                                     vec2(0, 0));\n  vec2 vertCoord = quadCoord + vertOff;\n  vec2 uv = vertCoord / vec2(NLON, NLAT);\n  float theta = TAU*uv.x;\n  float phi = .5*TAU*uv.y;\n  vec3 pos;\n  pos.x = sin(theta)*sin(phi);\n  pos.y = -cos(phi);\n  pos.z = cos(theta)*sin(phi);\n  return Vert(pos, uv);\n}\n\nvec3 getTriNormal(vec2 quadCoord, float quadVertId) {\n  float triVertId0 = floor(quadVertId/3.)*3.;\n  vec3 v1 = getQuadVert(quadCoord, triVertId0+0.).pos;\n  vec3 v2 = getQuadVert(quadCoord, triVertId0+1.).pos;\n  vec3 v3 = getQuadVert(quadCoord, triVertId0+2.).pos;\n  return normalize(cross(v2-v1, v3-v1));\n}\n\nvec3 getTriCentroid(vec2 quadCoord, float quadVertId) {\n  float triVertId0 = floor(quadVertId/3.)*3.;\n  vec3 v1 = getQuadVert(quadCoord, triVertId0+0.).pos;\n  vec3 v2 = getQuadVert(quadCoord, triVertId0+1.).pos;\n  vec3 v3 = getQuadVert(quadCoord, triVertId0+2.).pos;\n  return (v1 + v2 + v3) / 3.;\n}\n\nvoid main() {\n  float quadId = mod(floor(vertexId / 6.), NQUADS);\n  float quadVertId = mod(vertexId, 6.);\n  vec2 quadCoord = vec2(mod(quadId, NLON), floor(quadId / NLON));\n  Vert v = getQuadVert(quadCoord, quadVertId);\n  //vec3 triNorm = getTriNormal(quadCoord, quadVertId);\n  vec3 triCentroid = getTriCentroid(quadCoord, quadVertId);\n  v.pos += triCentroid*EXPLODE;\n\n  vec3 pos = roty(v.pos, SPEED*time);\n  pos = rotx(pos, .08*TAU);\n  pos = roty(pos, SPEED*time) * .7;\n\n  float aspect = resolution.x / resolution.y;\n  vec2 scale = min(vec2(1./aspect, aspect), 1.);\n  gl_Position = vec4(pos.x*scale.x, pos.y*scale.y, -pos.z, 1);\n  //gl_PointSize = 4.;\n\n  v_color = vec4(hsv2rgb(vec3(v.uv.x+v.uv.y*.5, 1, 1)), 1);\n  //v_color = vec4(triNorm*.5+.5, 1);\n  if (pos.z < 0.) v_color *= 0.;\n}\n"
  },
  "screenshotURL": "data/images/images-6ox8gccuy97vqqba1-thumbnail.jpg",
  "hasSound": "",
  "views": 6,
  "likes": 0,
  "revisionId": "WLMXBjJNFLbu8smji"
}