{
  "_id": "y37cKaKLxW7FgiTXm",
  "owner": {
    "_id": "JkHPzJxpfnvDEnJHf",
    "createdAt": {
      "$date": 1684306385138
    },
    "username": "geumbi.yeo",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/49f1da513e8353e36dc25636ecdb29d6?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1685533470361
  },
  "modifiedAt": {
    "$date": 1685533470361
  },
  "origId": null,
  "name": "Circles from Triangles - Geumbi Yeo",
  "notes": "",
  "rank": 1.0747190822887742,
  "private": false,
  "unlisted": true,
  "username": "geumbi.yeo",
  "avatarUrl": "https://secure.gravatar.com/avatar/49f1da513e8353e36dc25636ecdb29d6?default=retro&size=200",
  "settings": {
    "num": 16384,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/7z3dqybmtuda/queencard",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.8235294117647058,
      0.6745098039215687,
      0.6745098039215687,
      1
    ],
    "shader": "// Name : Geumbi Yeo\n// Assignment : Circles from Triangles - Geumbi Yeo\n// Course : CS250\n// Term & Year : Spring 2023\n\nvec3 hsv2rgb(vec3 c)\n{\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}  \n\n#define PI radians(180.0)\n\nmat4 rotZ(float angleInRadians)\n{\n  float s = sin(angleInRadians);\n  float c = cos(angleInRadians);\n  \n  return mat4(\n    c,-s, 0, 0,\n    s, c, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 trans(vec3 trans)\n{\n return mat4(\n   1, 0, 0, 0,\n   0, 1, 0, 0,\n   0, 0, 1, 0,\n   trans, 1);\n}\n\nmat4 ident()\n{\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0, \n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s)\n{\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s)\n{\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nvec2 getCirclePoint(float id, float numCircleSegments)\n{ \n  float ux = floor(id / 6.) + mod(id, 2.);    \n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\n  \n  float angle = ux / numCircleSegments * PI * 2.;\n  float c = cos(angle);\n  float s = sin(angle);\n  \n  float radius = vy + 1.;\n  \n  float x = c * radius;\n  float y = s * radius;\n  \n  return vec2(x, y);\n\n}\n\nvoid main()\n{\n  float numCircleSegments = 10.;\n  vec2 circleXY = getCirclePoint(vertexId, \n                                  numCircleSegments);\n  float numPointsPerCircle = numCircleSegments * 15.;\n  float circleId = floor(vertexId / numPointsPerCircle);\n  float numCircles = floor(vertexCount / numPointsPerCircle);\n  \n  float sliceId = floor(vertexId / 3.0);\n  float oddSlice = mod(sliceId, 8.);\n  \n  float down = floor(sqrt(numCircles));\n  float across = floor(numCircles / down);\n  \n  float x = mod(circleId, across);\n  float y = floor(circleId / across);\n  \n  float u = x / (across - 1.);\n  float v = y / (across - 1.);\n  \n  float xoff = 0.; //sin(time + y * 0.2) * 0.1;\n  float yoff = 0.; //sin(time + x * 0.3) * 0.2;\n  \n  float ux = u * 2. - 1. + xoff;\n  float vy = v * 2. - 1. + yoff;\n  \n  float su = abs(u - 0.5) * 2.;\n  float sv = abs(v - 0.5) * 2.;\n  float au = abs(atan(su, sv)) / PI;\n  float av = length(vec2(su, sv));\n  float snd = texture2D(sound, vec2(au * .05, av * .25)).a; \n  \n  float aspect = resolution.x / resolution.y;\n  float sc = pow(snd + 0.2, 5.) * mix(1., 1., oddSlice);\n  \n  sc *= sin(time) * across / 8.;\n  \n  vec4 pos = vec4(circleXY, 0, 1);\n  mat4 mat = ident();\n  mat *= scale(vec3(1, aspect, 1));\n  mat *= rotZ(time) + (mouse.x / 10.);\n  mat *= trans(vec3(ux, vy, 0) * 1.);\n  mat *= uniformScale(0.03 * sc);\n               \n  gl_Position = mat * pos;\n  \n  float soff = 0.; //sin(time + x * y * 0.02) * 5.;\n \n  float pump = step(0.1, snd);\n  float hue = u * .1 + snd * 0.2 + time * .1; //sin(time + v * 20.) * 0.05;\n  float sat = 1.; //mix(0.5, 1., pump); //mix(1., -10., av);\n  float val = mix(.4, pow(snd + 0.2, 5.), pump); //sin(time + v * u * 20.0) * .5 + .5;\n  \n  hue = hue + pump * oddSlice * 0.5 + pump * 0.33;\n  val += oddSlice * pump;\n  v_color = vec4(hsv2rgb(vec3(hue * cos(time / 10.), sat, val)), 1);\n}"
  },
  "screenshotURL": "data/images/images-eay5lolm6y4ej8fja-thumbnail.jpg",
  "hasSound": true,
  "views": 3,
  "likes": 0,
  "revisionId": "DAZiFE4CuaD2P2xJr"
}