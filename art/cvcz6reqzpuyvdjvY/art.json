{
  "_id": "cvcz6reqzpuyvdjvY",
  "owner": {
    "_id": "ZBHrEZGrgA6JBJGt7",
    "createdAt": {
      "$date": {
        "$numberLong": "1463104654911"
      }
    },
    "username": "mipmap",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/2840df8e29cba840a5b7f90f66bc66cd?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1569929109355"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1569929109355"
    }
  },
  "origId": "BxMWaxP7Sqiz38FgK",
  "name": "newave",
  "notes": "\n\nFrom https://www.vertexshaderart.com/art/BxMWaxP7Sqiz38FgK",
  "rank": {
    "$numberDouble": "1.7399860888017986"
  },
  "private": false,
  "unlisted": false,
  "username": "mipmap",
  "avatarUrl": "https://secure.gravatar.com/avatar/2840df8e29cba840a5b7f90f66bc66cd?default=retro&size=200",
  "settings": "{\"num\":28831,\"mode\":\"TRIANGLES\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// terrain\\n\\n\\n#define PI radians(180.0)\\n//KDrawmode=GL_TRIANGLES\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\nmat4 rotX(float angle) {\\n\\n    float s = sin( angle );\\n    float c = cos( angle );\\n\\n    return mat4(\\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0,-s, c, 0,\\n      0, 0, 0, 1);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, s, 0, 0, \\n      s, 0, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  #if 0\\n  return mat4(\\n    1, 0, 0, trans[0],\\n    0, 1, 0, trans[1],\\n    0, 0, 1, trans[2],\\n    0, 0, 0, 1);\\n  #else\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n  #endif\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n  1  -dot(xAxis, eye), dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat p1m1(float v) {\\n  return v * .5 + .5;\\n}\\n\\nfloat inRange(float v, float minV, float maxV) {\\n  return step(minV, v) * step(v, maxV);\\n}\\n\\nfloat at(float v, float target) {\\n  return inRange(v, target - 0.3, target + 0.1);\\n}\\n\\n// terrain function from mars shader by reider\\n// https://www.shadertoy.com/view/XdsGWH\\nconst mat2 mr = mat2 (0.84147,  0.54030,\\n\\t\\t\\t\\t\\t  0.54030, -0.84147 );\\n\\nfloat fbm( in vec2 p )\\n{\\n    float su = fract(p.x * 1.25);\\n    float sv =  1. - (p.y + 0.5); // soundRes.y;\\n    float s = \\n      sin(time + su * 11.2) + \\n      sin(time + sin(su * sv * 2.) * 17.2) + \\n      sin(time + sv * 40.0) +\\n      sin(time * -5. + sv * 33.) * 1.2;\\n    s *= 0.15;\\n    texture2D(sound, vec2(mix(0.002, 0.253, su), sv)).a;\\n    return pow(s, 1.) * 0.5;\\n}\\n\\nvec3 getQuadPoint(const float id, const float scale, const vec3 off) {\\n  float outId = mix(id, 8. - id, step(2.5, id));\\n  float ux = floor(outId / 6.) + mod(outId, 2.);\\n  float vy = mod(floor(outId / 2.) + floor(outId / 3.), 2.); \\n  vec3 p = vec3(ux, 0, vy) + off;\\n  vec3 pos = p * scale + vec3(0, fbm(p.xz) * 2., 0);\\n  return pos;\\n}\\n\\n#define POINTS_PER_QUAD 6.\\nvoid main() {\\n  float quadPnt  = mod(vertexId, 6.);\\n  float quadId   = floor(vertexId / POINTS_PER_QUAD);\\n  float numQuads = floor(vertexCount / POINTS_PER_QUAD);\\n  float across   = floor(sqrt(numQuads) * 0.5);\\n  float down     = floor(numQuads / across);\\n  \\n  float qx = mod(quadId, across);\\n  float qz = floor(quadId / across);\\n  float qu = qx / across;\\n  float qv = qz / down;\\n  vec3 q = vec3(qx, 0, qz);\\n  \\n  float s = 8. / across;\\n  \\n  float nId = floor(quadPnt / 3.) * 3.;\\n  vec3 n0 = getQuadPoint(nId + 0., s, q);\\n  vec3 n1 = getQuadPoint(nId + 1., s, q);\\n  vec3 n2 = getQuadPoint(nId + 2., s, q);\\n  vec3 n = (cross(normalize(n1 - n0), normalize(n2 - n1)));// * mix(vec3(1,1,1), vec3(-1,-1,-1), step(2.5, nId));\\n  vec3 lightDir = normalize(vec3(-1, 1, -2));\\n  float l = abs(dot(n, lightDir));\\n  \\n  vec3 p = getQuadPoint(quadPnt, s, q);\\n  \\n\\n  float ct = time*.25;\\n  vec3 cameraPos    = vec3(sin(ct), 1., sin(ct) + 1.);\\n  vec3 cameraTarget = vec3(cameraPos.x, 0, 4. + sin(ct));\\n  vec3 cameraUp     = normalize(vec3(sin(ct + 2.5) * 0.3, 1, 0));\\n  \\n  mat4 m = persp(radians(55.), resolution.x / resolution.y, 0.1, 100.);\\n  m *= cameraLookAt(cameraPos, cameraTarget, cameraUp);\\n  m *= trans(vec3(-across / 2. * s, 0, 0));\\n  \\n  gl_Position = m * vec4(p, 1);\\n  \\n  float hue = 0.71 + qu *   p.y * 2.1;//1.;m1p1(n.z);\\n  float sat = pow(0.5 - p.y, 2.);.3;//abs(n.z);\\n  float val = mix(.05, 1., l);\\n  \\n  float cback = 1. - pow(qv, 5.);\\n  float cacross = 1. - pow(abs((qu * 2. - 1.)), 5.);\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1.);\\n  \\n  gl_PointSize = 10.0;\\n}\"}",
  "screenshotURL": "data/images/images-ld2t51bqtupcrtyrv-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "208"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "uJCkKiv9fXAGXgfKZ"
}