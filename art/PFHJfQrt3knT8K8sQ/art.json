{
  "_id": "PFHJfQrt3knT8K8sQ",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1451918919133
  },
  "modifiedAt": {
    "$date": 1612457044727
  },
  "origId": "XWzwbcRCDE4ce9oex",
  "name": "flwr",
  "notes": "",
  "rank": 10.062767375856552,
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 23736,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/hema_singer/o-sajna-live-movie-parakh",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      0.9882352941176471,
      0.4745098039215686,
      1
    ],
    "shader": "/*\n\n                 _                 \n                | |                \n __   _____ _ __| |_ _____  __     \n \\ \\ / / _ \\ '__| __/ _ \\ \\/ /     \n  \\ V /  __/ |  | ||  __/>  <      \n   \\_/ \\___|_|   \\__\\___/_/\\_\\     \n      | |             | |          \n   ___| |__   __ _  __| | ___ _ __ \n  / __| '_ \\ / _` |/ _` |/ _ \\ '__|\n  \\__ \\ | | | (_| | (_| |  __/ |   \n  |___/_| |_|\\__,_|\\__,_|\\___|_|   \n              | |                  \n     __ _ _ __| |_                 \n    / _` | '__| __|                \n   | (_| | |  | |_                 \n    \\__,_|_|   \\__|                \n                                   \n                                   \n\n\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat p1m1(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\n#define NUM_PARTS_PER_PETAL 20.\n#define NUM_EDGE_POINTS_PER_CIRCLE 4.\n#define NUM_SUBDIVISIONS_PER_CIRCLE 4.\n#define NUM_POINTS_PER_DIVISION (NUM_EDGE_POINTS_PER_CIRCLE * 6.)\n#define NUM_POINTS_PER_CIRCLE (NUM_SUBDIVISIONS_PER_CIRCLE * NUM_POINTS_PER_DIVISION) \nvoid getCirclePoint(const float id, const float circleId, const float inner, const float start, const float end, out vec3 pos, out vec3 uvf, out float snd) {\n  float edgeId = mod(id, NUM_POINTS_PER_DIVISION);\n  float ux = floor(edgeId / 6.) + mod(edgeId, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float sub = floor(id / NUM_POINTS_PER_DIVISION);\n  float subV = sub / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\n  float level = subV + vy / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\n  float v = 1.;//mix(inner, 1., level);\n  float ringId = sub + vy;\n  float ringV = ringId / NUM_SUBDIVISIONS_PER_CIRCLE;\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float skew = 1. - step(0.5, mod(ringId - 2., 3.));\n  snd = 0.;//texture2D(sound, vec2((0.02 + abs(u * 2. - 1.)) * 0.20, ringV * 0.25)).a;\n  \n  \n  float z = mix(inner, 1., level);\n  a += 1. / NUM_EDGE_POINTS_PER_CIRCLE * PI * 2. * 20. + sin(time * 1. + (circleId + z) * 0.1) + snd * 1.5;\n  float s = sin(a);\n  float c = cos(a);\n  float x = c * v;\n  float y = s * v;\n  pos = vec3(x, y, z);  \n  uvf  = vec3(floor(edgeId / 6.) / NUM_EDGE_POINTS_PER_CIRCLE, subV, floor(id / 6.));\n}\n\nfloat goop(float t) {\n  return (sin(t) + sin(t * 0.27) + sin(t * 1.53) + sin(t * 1.73)) / 4.;\n}\n\nvoid main() {\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\n  float petalId = floor(circleId / NUM_PARTS_PER_PETAL);\n  circleId = mod(circleId, NUM_PARTS_PER_PETAL);\n  float pointId = mod(vertexId, NUM_POINTS_PER_CIRCLE);\n//  float sideId = floor(circleId / 2.);\n//  float side = mix(-1., 1., step(0.5, mod(circleId, 2.)));\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE / 12.);\n  float cu = circleId / numCircles;\n  vec3 pos;\n  float inner = 0.0;\n  float start = 0.;//time * -0.1;\n  float end   = start + 1.;\n  float snd;\n  vec3 uvf;\n  getCirclePoint(pointId, circleId, inner, start, end, pos, uvf, snd); \n  \n  vec3 offset = vec3(0);\n  //offset   += vec3(m1p1(hash(circleId)) * 0.5, m1p1(hash(circleId * 0.37)), -m1p1(circleId / numCircles));\n  //offset.x += goop(circleId + time * 0.3) * 0.4;\n  //offset.y += goop(circleId + time * 0.13) * 0.1;\n  offset.z += circleId * 2.6;\n//  vec3 aspect = vec3(1, resolution.x / resolution.y, 1);\n  float edgeId = circleId + pos.z * 0.76;\n  \n  float ss = texture2D(sound, vec2(0.053, edgeId / numCircles * 1.)).a;\n  \n  vec3 camera = vec3(0, 50., -0.01);\n  vec3 target = vec3(0, 0, 0);\n  vec3 up = vec3(0, 1, 0);\n  \n  mat4 mat = ident(); \n  mat *= persp(radians(65. * resolution.y / resolution.x), resolution.x / resolution.y, 0.1, 100.);\n  mat *= rotZ(sin(time * 0.1));\n  mat *= cameraLookAt(camera, target, up);\n  mat *= rotY(petalId / 12. * PI * 2. + sin(time * 0.4 + 3. + edgeId * mix(0.1, 0.5, p1m1(sin(time * 0.1)))) * 0.3);\n  mat *= trans(offset);\n//  mat *= uniformScale(mix(0.1, 0.4, hash(circleId) * exp(snd)));\n  float sc = mix(0.5, 5., mix(1., 2., pow(edgeId / numCircles, 10.))\n                 *  (pow(ss + 0.2, 5.0) + pow(goop((time * 0.1 + 38. + edgeId) * 0.1), 3.)));\n  mat *= scale(vec3(sc, sc, 2.));\n  gl_Position = mat * vec4(pos, 1);\n  gl_PointSize = 4.;\n  \n  float hue = mix(0.0, 0.5, mod(uvf.z, 2.)) + time * 0.1;\n  float sat = 1.; mod(uvf.z, 2.);\n  float val = mix(0.5, 1., fract((edgeId)* 0.25 - time));\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1.);\n//  v_color = mix(v_color.rgba, vec4(1,1,1,1), );\n}"
  },
  "screenshotURL": "data/images/images-h4zyv5ocyga3huw79-thumbnail.jpg",
  "hasSound": true,
  "views": 814,
  "likes": 9,
  "revisionId": "nJgT38hdFFCcNkZQv"
}