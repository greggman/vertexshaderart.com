{
  "_id": "KTyBEnoxgZWR569eH",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1447734639062
  },
  "modifiedAt": {
    "$date": 1447735359778
  },
  "origId": null,
  "name": "tunnel",
  "rank": 10.550849904167329,
  "private": false,
  "username": "gman",
  "settings": {
    "num": 10000,
    "mode": "LINES",
    "sound": "",
    "lineSize": "CSS",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI 3.14159\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  float NUM_SEGMENTS = floor(mix(3., 10., 0.5 + 0.5 * sin(PI * 2. * fract(time * 0.1))));\n  float NUM_POINTS = NUM_SEGMENTS * 2.;\n  float STEP = 1.;\n  float point = mod(floor(vertexId / 2.0) + mod(vertexId, 2.0) * STEP, NUM_SEGMENTS);\n  float count = floor(vertexId / NUM_POINTS);\n  float snd = texture2D(sound, vec2(0.05, count * 0.0)).a;\n  float offset = count * 0.0;\n  float angle = point * PI * 2.0 / NUM_SEGMENTS + offset  + time * 0.2;\n  float radius = 2.5;\n  float c = cos(angle) * radius;\n  float s = sin(angle) * radius;\n  float orbitAngle =  count * 0.0;\n  float innerRadius = count * 0.0;\n  float oC = cos(orbitAngle + time * 0.4 + count * 0.1) * innerRadius;\n  float oS = sin(orbitAngle + time + count * 0.1) * innerRadius;\n\n  vec2 aspect = vec2(resolution.y / resolution.x, 1);\n\n  vec4 m = texture2D(touch, vec2(0.0, count * 0.00));\n  vec2 xy = vec2(c, s) + vec2(oC, oS) + m.xy * .5;// + vec2(2. * snd, 0.);\n  gl_Position = vec4(xy * aspect, count * 0.1, count * 0.2);\n\n  float stripe = \n    mix(0.0, 1.5, step(\n      0.5, fract(time * 4. + count * .025)));\n  float hue = time * 0.25;\n  float sat = 1. - snd;\n  float val = stripe;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 0.1);\n}"
  },
  "screenshotURL": "data/images/images-wgrinolii03me1opn-thumbnail.jpg",
  "hasSound": "",
  "views": 255,
  "likes": 6,
  "revisionId": "gjb7C3GvvxgEDr6mN",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}