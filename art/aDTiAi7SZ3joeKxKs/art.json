{
  "_id": "aDTiAi7SZ3joeKxKs",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1522805910879"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1522805910879"
    }
  },
  "origId": "hMGCCTasLLBPQjRCG",
  "name": "PROBLEM Frag conv for K Machine",
  "notes": "http://glslsandbox.com/e#45303.0",
  "rank": {
    "$numberDouble": "1.5629328673042877"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/user-158087960/studiomix-douzirec-06-2007-flac",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n\n\n//Step 1 >> comment all precision, extension, uniforms and varying\n/*\n#ifdef GL_ES\nprecision mediump float;\n#endif\n \n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nvarying vec2 surfacePosition;\n*/\n\n#define seedFactor 0.75//KParameter 0.2>>2.\n#define timeFactor 0.1//KParameter 0.1>>10.\n\n\nvoid main( void ) {\n\n\n  //Step 2 >> replace  gl_FragCoord\n  float finalDesiredPointSize = 3.;\n  float maxFinalSquareSideSize = floor(sqrt(vertexCount));\n  float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\n  \n  float maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\n  \n  //x = number of elements in a line as x value for local resolution\n  //y = number of possible lines with the given vertexCount\n  vec2 vertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\n  \n  //we can now calculate the final number of elements\n  float finalVertexCount = vertexResolution.x*vertexResolution.y;\n  \n  //and adjust finalVertexId\n  float finalVertexId = mod(vertexId,finalVertexCount);\n  \n  //Calculate the position of the elements based on their finalVertexId\n  float x = mod(finalVertexId, vertexResolution.x);\n  float y = floor(finalVertexId / vertexResolution.x);\n  \n  vec2 simFragCoord = vec2(x,y);//simfragCoord will replace the gl_FragCoord of fragment shader\n  \n  \n  //Step 3 >> calculate vertice positions\n  //relative coordinate of the vertex (cordinates in 0..1 referential)\n  float u = (x /vertexResolution.x);\n  float v = (y /vertexResolution.y);\n  \n  //set vertices disposition\n  float sizeFactor = finalDesiredPointSize*vertexResolution.x/resolution.x;\n  \n  float ux = sizeFactor*(u - 0.5);\n  float vy = sizeFactor*(v - 0.5);\n  \n  gl_PointSize = finalDesiredPointSize;\n  gl_Position = vec4(ux, vy, 0., 1.);\n  \n  //create the surfacePosition\n  vec2 surfacePosition = vec2(ux,vy);\n\n   /****************************************************************/\n  //Step 4 >> paste the old fragment code with following changes:\n  //replace gl_FragCoord by simFragCoord \n  //replace gl_FragColor by v_color\n  \n\tvec2 U = 5.*simFragCoord.xy/resolution.y, V; U.x -= time; V = floor(U);\n\tU.y = dot( cos( (8.*(time+V.x)+-3.-V.y) * max(0.,.5-length(U = fract(U)-.5)) - vec2(33,0) ), U);\n\t//v_color += smoothstep(-1.,1.,U/fwidth(U)).y;\n   // smoothstep(-1.,1.,U/fwidth(U)).y;\n  \n  /****************************************************************/\n  \n}"
  },
  "screenshotURL": "data/images/images-4hwvd0v8c2r3x4vc1-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "HQPqm5qRwzu66hqWp"
}