{
  "_id": "CSXazpyPp2B7cScfa",
  "owner": {
    "_id": "frRQ7tKXmDXqukLCj",
    "createdAt": {
      "$date": {
        "$numberLong": "1450549163060"
      }
    },
    "profile": {
      "name": "Julien C",
      "avatarUrl": "https://avatars.githubusercontent.com/julien?s=200"
    },
    "username": "julien"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1477775923663"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1477781266681"
    }
  },
  "origId": null,
  "name": "Lesson 05 - Circles",
  "notes": "",
  "rank": {
    "$numberDouble": "1.7261037483161819"
  },
  "private": true,
  "unlisted": false,
  "username": "julien",
  "avatarUrl": "https://avatars.githubusercontent.com/julien?s=200",
  "settings": "{\"num\":17774,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/frank-biazzi/frank-biazzi-focus-driving\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n#define PI radians(180.0)\\n\\nvec3 hsv2rgb(vec3 c) {\\n\\t\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n  \\n}\\n\\nvec2 getCirclePoint(float id, float numCircleSegments) {\\n\\n  float ux = floor(id / 6.0) + mod(id, 2.0);\\n  float vy = mod(floor(id / 2.0) + floor(id / 3.0), 2.0);\\n  \\n\\n  float angle = ux / numCircleSegments * PI * 2.0;\\n  float c = cos(angle);\\n  float s = sin(angle);\\n  \\n  float radius = vy + 1.0;\\n  \\n  float x = c * radius;\\n  float y = s * radius;\\n  \\n  \\n  return vec2(x, y);\\n}\\n\\nmat4 rotX(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0, -s, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotY(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nvoid main() {\\n  \\n  float numCircleSegments = 6.0;\\n  vec2 circleXY = getCirclePoint(vertexId,\\n                                 numCircleSegments);\\n  \\n \\n  float numPointsPerCircle = numCircleSegments * 6.0;\\n  float circleId = floor(vertexId / numPointsPerCircle);\\n  float numCircles = floor(vertexCount / numPointsPerCircle);\\n  \\n  float sliceId = floor(vertexId / 6.0);\\n  float oddSlice = mod(sliceId, 2.0);\\n    \\n  \\n  float down = floor(sqrt(numCircles));\\n  float across = floor(numCircles / down);\\n    \\n  \\n  float x = mod(circleId, across);\\n  float y = floor(circleId / across);\\n  \\n  \\n  float u = x / (across - 1.0);\\n  float v = y / (across - 1.0);\\n  \\n  float xoff = sin(time * 1.2 + y * 0.2) * 0.1;\\n  float yoff = sin(time + x * 0.1) * 0.25;\\n  \\n  float ux = u * 2.0 - 1.0 + xoff;\\n  float vy = v * 2.0 - 1.0 + yoff;\\n  \\n  \\n  \\n  float su = abs(u - 0.5) * 2.0;\\n  float sv = abs(v - 0.5) * 2.0;\\n  float au = abs(atan(su, sv)) / PI;\\n  float av = length(vec2(su, sv));\\n    \\n  float snd = texture2D(sound, vec2(au * 0.025, av * 0.25)).a;\\n  \\n  float aspect = resolution.x / resolution.y;\\n  float sc = pow(snd + 0.2, 4.0) * mix(1.0, 1.1, oddSlice) * .8;\\n  \\n  sc *= 20.0 / across;\\n  \\n  vec4 pos = vec4(circleXY, 0, 1);\\n  mat4 mat = ident();\\n  \\n  mat *= scale(vec3(1, aspect, 1));\\n  \\n  mat *= rotZ(time * 0.3);\\n  \\n  mat *= trans(vec3(ux, vy, 0) * 1.8);\\n  \\n  mat *= rotZ(snd * 40.0 * sign(ux));\\n  \\n  mat *= uniformScale(0.025 * sc);\\n  \\n  \\n\\n  gl_Position = mat * pos;\\n  \\n\\n  float soff = sin(time + x * y * 0.02) * 8.0;  \\n  \\n  float pump = step(0.08, snd);\\n    \\n  float hue = u + 0.1 + snd * 0.2 + time * 0.1;  // u * 0.1 + sin(time + v * 20.0) * 0.05;\\n  float saturation = mix(0.0, 1.0, pump);\\n  float value = mix(0.1, pow(snd + 0.02, 3.0), pump); //sin(time + v * u * 20.0) * 0.5 + 0.5;\\n  \\n  \\n  // hue = hue + pump + oddSlice * 0.5 + pump * 0.3;\\n  \\n  v_color = vec4(hsv2rgb(vec3(hue, saturation, value)), 1.0);\\n}\\n\\n\"}",
  "screenshotURL": "data/images/images-xerjpbk1fu2bsaw1e-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "22"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "dvsiuiLvALoHNBMeg"
}