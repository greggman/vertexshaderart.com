{
  "_id": "WsESfm8ByGEmnFBkE",
  "owner": {
    "_id": "yumJxCTi3otBwEFh4",
    "createdAt": {
      "$date": 1618264688331
    },
    "username": "chriscamplin",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/5798c9f697b3fea48de32ade2ba3e54c?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1620051084909
  },
  "modifiedAt": {
    "$date": 1620051084909
  },
  "origId": "nb7JYJJLQtbayZHzh",
  "name": "Pixel Storm edit",
  "notes": "",
  "rank": 1.4406889167715364,
  "private": false,
  "unlisted": true,
  "username": "chriscamplin",
  "avatarUrl": "https://secure.gravatar.com/avatar/5798c9f697b3fea48de32ade2ba3e54c?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/7t2names/the-power-tareq-remix",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define NUM_SEGMENTS 28.0\n#define NUM_POINTS (NUM_SEGMENTS * 4.0)\n#define PI 3.14159265359\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat2 rotate2D(float _a) {\n\treturn mat2(cos(_a), sin(_a), -sin(_a), cos(_a));\n}\n\nmat4 rotX(float angle) {\n\n    float s = sin( angle );\n    float c = cos( angle );\n\n    return mat4(\n      1, 0, 0, 0,\n      0, c, s, 0,\n      0,-s, c, 0,\n      0, 0, 0, 1);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nvoid main() {\n  float numLinesDown = floor(vertexCount / NUM_POINTS);\n  // produces 0,1, 1,2, 2,3, ...\n  float point = floor(mod(vertexId, NUM_POINTS) / 2.0) + mod(vertexId, 2.0);\n  // line count\n  float count = floor(vertexId / NUM_POINTS);\n  vec2 ctr = vec2(0.5);\n  float u = point / NUM_SEGMENTS;  // 0 <-> 1 across line\n  float v = count / numLinesDown;  // 0 <-> 1 by line\n  float invV = 1.0 - v;\n  float s = sin(time * 0.25/2.0)/2.0 +0.25;\n  // Only use the left most 1/4th of the sound texture\n  // because there's no action on the right\n  float historyX = u * 0.25;\n  // Match each line to a specific row in the sound texture\n  float historyV = (v * numLinesDown + 0.5) / soundRes.y;\n  float snd = texture2D(sound, vec2(historyX, historyV)).a;\n  float x = abs(u * fract(time / PI * 0.25) - 1.0 * snd);\n  float y = abs(v * fract(time * PI * .25) - 1.0 * snd * s);\n  float xOff = sin(PI * count + x * 0.5) * 2.0;\n  float yOff = cos(PI * count + y * 0.5) * 4.0;\n  vec2 xy = vec2(\n      x * mix(yOff, s * snd, invV),\n      y + mod(snd * 2.0, 5.0 * xOff) * 1.0) / (v + xOff);\n  float d = length(xy - ctr);\n\n  gl_PointSize = snd * 80. - xOff - yOff; \n  gl_PointSize *= 20.0 / numLinesDown * snd; \n  gl_PointSize *= resolution.x / 30. * xOff; \n  xy -= ctr;\n  xy *= rotate2D(snd * PI * 2.0 +s);\n  xy += ctr;\n  xy *= pow(xy, ctr + xy * d);\n  xy *=  3. * d;\n  //xy = fract(xy / 0.1);\n  xy -= ctr;\n  xy *= rotate2D(-snd * -PI * 2.0);\n  xy += ctr;\n  xy *= mouse;\n  ctr *= mouse;\n  vec4 pos = vec4(xy / yOff, xOff , 1.-xOff);\n  //pos *= fract(pos);\n  pos *= rotY(PI * 0.025 * s);\n  pos *= rotX(PI * 0.05 * s);\n  gl_Position = pos;\n  float hue = s;\n  hue = smoothstep(xy.x, xy.y, snd * s);\n  float sat = 1.0 - s;\n  float val = invV +s;\n  vec4 color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n  color *= rotY(PI * snd * s);\n  //background += 0.1;\n  vec4 finalColor = mix(color, background, s);\n  \n  v_color = finalColor;\n}"
  },
  "screenshotURL": "data/images/images-hf8a6s6m74vo1af3o-thumbnail.jpg",
  "hasSound": true,
  "views": 109,
  "likes": 0,
  "revisionId": "d8v3i6bxkQrZzKvSi"
}