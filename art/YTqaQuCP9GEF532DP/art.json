{
  "_id": "YTqaQuCP9GEF532DP",
  "owner": {
    "_id": "oCanjNxeHcQ7gDPmW",
    "createdAt": {
      "$date": 1505499213122
    },
    "profile": {
      "name": "Zug Zwang",
      "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg"
    },
    "username": "zug"
  },
  "createdAt": {
    "$date": 1519006561479
  },
  "modifiedAt": {
    "$date": 1519006561479
  },
  "origId": "BZMNQR7kcPSCCwyHL",
  "name": "Quads Spiral",
  "notes": "",
  "rank": 1.0677218825582742,
  "private": false,
  "unlisted": true,
  "username": "zug",
  "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via SoShade\n\n////////////////////////////////////////////////////////////\n#define PI radians(180.)\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1. / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 1, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 1.7, 0);\n}\n\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, sin(mouse.y*0.01),\n    zAxis, 0,\n    eye,1. +mouse.x);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][2], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a12,\n      b05 = a02 * a13 + a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a32,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 + a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 - b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - (eye *1.5));\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, -1,\n    zAxis, 1,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n////////////////////////////////////////////////////////////\n\nfloat df(vec2 p)\n{\n\treturn length(p) -0.1;\n}\n\nvec3 getQuad(float idx)\n{\n\tfloat quadIndex = floor(idx / 6.);\n\t\n\tfloat index = mod(idx, 6.);\n\t\n\tvec2 pos = vec2(0);\n\tif (index == 0.) pos = vec2(0,0);\n\tif (index == 1.) pos = vec2(1,0);\n\tif (index == 2.) pos = vec2(1,1);\n\t\n\tif (index == 3.) pos = vec2(0,0);\n\tif (index == 4.) pos = vec2(1,1);\n\tif (index == 5.) pos = vec2(1,1);\n\t\n\treturn vec3(pos, quadIndex);\n}\n\nvec2 getGridMesh(float idx, float countQuadX)\n{\n\tvec3 pi = getQuad(idx);\n\t\n\tpi.x += mod(pi.z, countQuadX);\n\tpi.y += floor(pi.z / countQuadX);\n\t\n\tfloat countQuads = floor(vertexCount / 6.);\n\tfloat nx = countQuadX;\n\tfloat ny = floor(countQuads / nx);\n\t\n\tpi.x -= nx * 0.125;\n\tpi.y -= ny * 0.15;\n\t\n\treturn pi.xy;\n}\n\nvoid main()\n{\n\tgl_PointSize = 1.;\n\n\tfloat countMax = floor(vertexCount / 6.);\n\tfloat edgeSize = floor( sqrt(countMax) );\n\tvec2 pg = getGridMesh(vertexId, edgeSize);\n\t\n\tfloat t = time;\n\t\n\tfloat r = length(pg);\n\tvec3 p = vec3(pg.x, cos(t*10.+r) * 7., pg.y);\n\tp.xz += df(p.xz) * sign(p.xz);\n\tfloat a = r * 0.04 * sin(t * 0.93);\n\tp.xz *= mat2(cos(a),-sin(a),sin(a),cos(a));\n\t\n\tv_color = vec4(0.8, p.y, 0.5, 1);\n\t\n\tp.y += r*cos(r*0.1);\n\t\n\t///////////////////////////////////////////////////////////////////////////////////////\n\tfloat ca = 0.;\n\tfloat cd = 500.;\n\tvec3 eye = vec3(sin(ca), 0.98, cos(ca)) * cd;\n\tvec3 target = vec3(0, 0, 1);\n\tvec3 up = vec3(0, 1, 0);\n  \n\tmat4 camera = persp(33. * PI / 180., resolution.x / resolution.y, 0.1, 10000.); \n\tcamera *= cameraLookAt(eye, target, up);\n  \n\t///////////////////////////////////////////////////////////////////////////////////////\n\t\n\tgl_Position = camera * vec4(p, 2);\n}"
  },
  "screenshotURL": "data/images/images-8bygdn0kxsom7ldng-thumbnail.jpg",
  "hasSound": "",
  "views": 1,
  "likes": 0,
  "revisionId": "eHpJMMjmZ4veQukES"
}