{
  "_id": "7BtREZnTSkBpz7W87",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1452613100753"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1459333873689"
    }
  },
  "origId": "rZcr6zk3jJKzwJ2mD",
  "name": "chx",
  "notes": "",
  "rank": {
    "$numberDouble": "1.5400791052115363"
  },
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 20526,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.00392156862745098,
      0.07450980392156863,
      0.49019607843137253,
      1
    ],
    "shader": "/*\n                                                                                                                     \n                         ,--.                          ,--.                ,--.                               ,--.   \n,--.  ,--.,---. ,--.--.,-'  '-. ,---. ,--.  ,--. ,---. |  ,---.  ,--,--. ,-|  | ,---. ,--.--. ,--,--.,--.--.,-'  '-. \n \\  `'  /| .-. :|  .--''-.  .-'| .-. : \\  `'  / (  .-' |  .-.  |' ,-.  |' .-. || .-. :|  .--'' ,-.  ||  .--''-.  .-' \n  \\    / \\   --.|  |     |  |  \\   --. /  /.  \\ .-'  `)|  | |  |\\ '-'  |\\ `-' |\\   --.|  |   \\ '-'  ||  |     |  |   \n   `--'   `----'`--'     `--'   `----''--'  '--'`----' `--' `--' `--`--' `---'  `----'`--'    `--`--'`--'     `--'   \n\n*/\n\n#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat p1m1(float v) {\n  return v * .5 + .5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\nvoid main() {\n  float id = vertexId;\n  float v = id + time;\n  float outV = fract(time * 10. + vertexId * 0.01);\n  vec3 pos = normalize(vec3(\n    m1p1(hash(v * 0.012)), \n    m1p1(hash(v * 0.127)), \n    m1p1(hash(v * 0.213)))); \n  vec3 aspect = vec3(1, resolution.x / resolution.y, 1) * 0.4;\n  if (id >= 18000.) {\n    pos = normalize(vec3(m1p1(hash(vertexId)), m1p1(hash(vertexId * 0.123)), 0));\n    pos *= mix(1., 1.1, outV);\n  }\n  \n  mat4 mat = ident(); \n  mat *= scale(aspect);\n  //  mat *= rotZ(lineV * PI * 2. + t * 1000.1);\n  //  mat *= rotY(lineV * PI * 1. + t * 1000.1);\n  gl_Position = vec4((mat * vec4(pos, 1)).xyz, 1);\n  //  gl_Position.x += m1p1(lineId / 10.) * 0.4 + (snd1 * snd0) * 0.1;\n  gl_PointSize = (resolution.x / 1600.) * mix(0., 20., abs(cos(p1m1(pos.z) * PI)));\n\n  if (id < 18000.) {\n    float edge = inv(abs(dot(pos, vec3(0,0,1))));\n    float hue = mix(0.95, 1.1, edge);\n    float sat = 1.;\n    float val = p1m1(dot(pos, normalize(vec3(-0.3, 0.6, -1))));\n    v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1) \n      + 0.4 * pow(val, 51.)\n      + vec4(1,1,1,1) * pow(edge, 15.);\n    v_color.a *= mix(1.0, 2., mod(time * 60., 2.));\n  } else {\n    v_color = vec4(1,1,1,inv(outV));\n    gl_PointSize = inv(outV) * 4.;\n//    v_color.a *= mix(1.0, 1., mod(time * 60., 2.));\n  }\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\n}"
  },
  "screenshotURL": "data/images/images-nwndr3snp0jra482x-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "6"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "Kw7kWc6XaX99xmb72"
}