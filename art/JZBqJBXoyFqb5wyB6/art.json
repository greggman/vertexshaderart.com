{
  "_id": "JZBqJBXoyFqb5wyB6",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1447070262508"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1447070262508"
    }
  },
  "origId": null,
  "name": "graph",
  "private": true,
  "username": "gman",
  "settings": {
    "num": 16384,
    "mode": "LINES",
    "sound": "",
    "lineSize": "CSS",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define NUM_SEGMENTS 128.\n#define NUM_POINTS (NUM_SEGMENTS * 2.)\n#define STEP 1.\n#define NUM_LINES_DOWN 64.\n#define PI 3.141592653589793\n#define ACROSS 8.\n#define WIDTH (0.5 / ACROSS)\n#define HEIGHT (0.4 / ACROSS)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat mixer(float count, float countId) {\n  return step(countId - .1, count) * step(count, countId + .1);\n}\n\n\nvoid main() {\n  // produces 0,1, 1,2, 2,3, ...\n  float point = floor(mod(vertexId, NUM_POINTS) / 2.0) + mod(vertexId, 2.0) * STEP;\n  // area count\n  float count = floor(vertexId / NUM_POINTS);\n  // area origin\n  vec2 origin = vec2(\n     mod(count, ACROSS)    / (ACROSS - 1.) * 2. - 1.,\n     floor(count / ACROSS) / (ACROSS - 1.) * 2. - 1.);\n\n  float u = point / NUM_SEGMENTS;    // 0 <-> 1 across line\n  float v = mixer(count,  0.) * sin(u * PI * 2.) +\n            mixer(count,  1.) * cos(u * PI * 2.) +\n            mixer(count,  2.) * (u * 2.0 - 1.0)  +\n            mixer(count,  3.) * pow(u, 5.0)  +\n            mixer(count,  4.) * u +\n            mixer(count,  5.) * u +\n            mixer(count,  6.) * u +\n            mixer(count,  7.) * u +\n            mixer(count,  8.) * u +\n            mixer(count,  9.) * u +\n            mixer(count, 10.) * u +\n            mixer(count, 11.) * u +\n            mixer(count, 12.) * u +\n            mixer(count, 13.) * u +\n            mixer(count, 14.) * u +\n            mixer(count, 15.) * u +\n            mixer(count, 16.) * u +\n            mixer(count, 17.) * u +\n            mixer(count, 18.) * u +\n            mixer(count, 19.) * u +\n            mixer(count, 20.) * u +\n            mixer(count, 21.) * u +\n            mixer(count, 22.) * u +\n            mixer(count, 23.) * u +\n            mixer(count, 24.) * u +\n            mixer(count, 25.) * u +\n            mixer(count, 26.) * u +\n            mixer(count, 27.) * u +\n            mixer(count, 28.) * u +\n            mixer(count, 29.) * u +\n            mixer(count, 30.) * u +\n            mixer(count, 31.) * u +\n            mixer(count, 32.) * u +\n            mixer(count, 33.) * u +\n            mixer(count, 34.) * u +\n            mixer(count, 35.) * u +\n            mixer(count, 36.) * u +\n            mixer(count, 37.) * u +\n            mixer(count, 38.) * u +\n            mixer(count, 39.) * u +\n            mixer(count, 40.) * u +\n            mixer(count, 41.) * u +\n            mixer(count, 42.) * u +\n            mixer(count, 43.) * u +\n            mixer(count, 44.) * u +\n            mixer(count, 45.) * u +\n            mixer(count, 46.) * u +\n            mixer(count, 47.) * u +\n            mixer(count, 48.) * u +\n            mixer(count, 49.) * u +\n            mixer(count, 50.) * u +\n            mixer(count, 51.) * u +\n            mixer(count, 52.) * u +\n            mixer(count, 53.) * u +\n            mixer(count, 54.) * u +\n            mixer(count, 55.) * u +\n            mixer(count, 56.) * u +\n            mixer(count, 57.) * u +\n            mixer(count, 58.) * u +\n            mixer(count, 59.) * u +\n            mixer(count, 60.) * u +\n            mixer(count, 61.) * u +\n            mixer(count, 62.) * u +\n            mixer(count, 63.) * u +\n            0.;\n\n  float x = u * 2.0 - 1.0;\n  float y = v * 2.0 - 1.0;\n  vec2 xy = origin * 0.8 + vec2(\n      x * WIDTH,\n      y * HEIGHT);\n  gl_Position = vec4(xy, 0, 1);\n\n  float hue = count / 21.;\n  float sat = 1.;\n  float val = 1.;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n}"
  },
  "screenshotURL": "data/images/images-2gtd9z97iet49dz8d-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "3"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "o9hXXmGcTW6DS56wL",
  "rank": {
    "$numberDouble": "1.9143528275929558"
  },
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}