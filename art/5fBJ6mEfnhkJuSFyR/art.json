{
  "_id": "5fBJ6mEfnhkJuSFyR",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1451064977413
  },
  "modifiedAt": {
    "$date": 1454376751612
  },
  "origId": "XXSghCnP6t28ai6cy",
  "name": "chapapa",
  "notes": "",
  "rank": 1.9515628572809047,
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 98310,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/kushalputhran/jai-ganesh-jai-ganesh-jai",
    "lineSize": "CSS",
    "backgroundColor": [
      1,
      0.6313725490196078,
      0.43137254901960786,
      1
    ],
    "shader": "/*\n\n ▌ ▐·▄▄▄ .▄▄▄  ▄▄▄▄▄▄▄▄ .▐▄• ▄ .▄▄ ·  ▄ .▄ ▄▄▄· ·▄▄▄▄  ▄▄▄ .▄▄▄   ▄▄▄· ▄▄▄  ▄▄▄▄▄\n▪█·█▌▀▄.▀·▀▄ █·•██  ▀▄.▀· █▌█▌▪▐█ ▀. ██▪▐█▐█ ▀█ ██▪ ██ ▀▄.▀·▀▄ █·▐█ ▀█ ▀▄ █·•██  \n▐█▐█•▐▀▀▪▄▐▀▀▄  ▐█.▪▐▀▀▪▄ ·██· ▄▀▀▀█▄██▀▐█▄█▀▀█ ▐█· ▐█▌▐▀▀▪▄▐▀▀▄ ▄█▀▀█ ▐▀▀▄  ▐█.▪\n ███ ▐█▄▄▌▐█•█▌ ▐█▌·▐█▄▄▌▪▐█·█▌▐█▄▪▐███▌▐▀▐█ ▪▐▌██. ██ ▐█▄▄▌▐█•█▌▐█ ▪▐▌▐█•█▌ ▐█▌·\n. ▀   ▀▀▀ .▀  ▀ ▀▀▀  ▀▀▀ •▀▀ ▀▀ ▀▀▀▀ ▀▀▀ · ▀  ▀ ▀▀▀▀▀•  ▀▀▀ .▀  ▀ ▀  ▀ .▀  ▀ ▀▀▀ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\n#define QUADS_PER_LINE 64.\n#define SUBDIVISIONS_PER_QUAD 16.\n#define POINTS_PER_LINE (QUADS_PER_LINE * SUBDIVISIONS_PER_QUAD * 6.)\nconst float tension = 0.5;\n\nvec2 funky(const float id) {\n  float v = id / QUADS_PER_LINE * 4.;\n  float t = time;\n  vec2 p = vec2(\n    (sin(v + t) * 0.5 + sin(v * .37 + t) * 0.5 + sin(v * 2.951 + t)) / 3.,\n    (cos(v * 9.12 + t) * 0.5 + cos(v * .37 + t) + cos(v * 2.951 + t)) / 3.\n    );\n  p.x *= 0.2;\n  return p;\n}\n\nvec3 getCenterPoint(const float id) {\n  vec4 t = vec4(0);\n  t.xy = funky(id);\n  //t.x = id / QUADS_PER_LINE;\n  //t.y = 0.;\n  return vec3(t.x, t.y, 0);\n}\n\nvec3 getCurvePoint(const float superId) {\n  float quadId = floor(superId / SUBDIVISIONS_PER_QUAD);\n  float subId  = mod(superId, SUBDIVISIONS_PER_QUAD);\n  float subV   = subId / SUBDIVISIONS_PER_QUAD;\n  vec3 q0 = getCenterPoint(quadId - 1.);\n  vec3 q1 = getCenterPoint(quadId + 0.);\n  vec3 q2 = getCenterPoint(quadId + 1.);\n  vec3 q3 = getCenterPoint(quadId + 2.);\n  vec3 q4 = getCenterPoint(quadId + 3.);\n  vec3 q5 = getCenterPoint(quadId + 4.);\n  \n  float s2 = pow(subV, 2.);\n  float s3 = pow(subV, 3.);\n  \n  float c1 =   2. * s3  - 3. * s2 + 1.;\n  float c2 = -(2. * s3) + 3. * s2; \n  float c3 =        s3  - 2. * s2 + subV; \n  float c4 =        s3  -      s2;  \n\n  vec3 t1 = (q2 - q0) * tension;\n  vec3 t2 = (q3 - q1) * tension;\n  return c1 * q1 + c2 * q2 + c3 * t1 + c4 * t2; \n}\n\nvoid getQuadPoint(const float cpId, const float pointId, float thickness, vec2 seed, out vec3 pos, out vec2 uv) {\n  float subId  = mod(cpId, SUBDIVISIONS_PER_QUAD);\n  float subV   = subId / SUBDIVISIONS_PER_QUAD;\n  \n  vec3 q0 = getCurvePoint(cpId + 0.);\n  vec3 q1 = getCurvePoint(cpId + 1.);\n  vec3 q2 = getCurvePoint(cpId + 2.);\n  vec3 q3 = getCurvePoint(cpId + 3.);\n  vec3 q4 = getCurvePoint(cpId + 4.);\n  vec3 q5 = getCurvePoint(cpId + 5.);\n\n  float id = pointId;\n  float ux = mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n    \n  #if 0\n  vec3 p0 = mix(mix(q0, q1, subV), mix(q1, q2, subV), subV);\n  vec3 p1 = mix(mix(q1, q2, subV), mix(q2, q3, subV), subV);\n  vec3 p2 = mix(mix(q2, q3, subV), mix(q3, q4, subV), subV);\n  vec3 p3 = mix(mix(q3, q4, subV), mix(q4, q5, subV), subV);\n  vec3 perp0 = normalize(p2 - p0).yxz * vec3(-1, 1, 0) * thickness;\n  vec3 perp1 = normalize(p3 - p1).yxz * vec3(-1, 1, 0) * thickness;\n  pos = vec3(mix(p1, p2, vy) + mix(-1., 1., ux) * mix(perp0, perp1, vy)); \n  #else\n  vec3 perp0 = normalize(q2 - q0).yxz * vec3(-1, 1, 0) * thickness;\n  vec3 perp1 = normalize(q3 - q1).yxz * vec3(-1, 1, 0) * thickness;\n  pos = vec3(mix(q1, q2, vy) + mix(-1., 1., ux) * mix(perp0, perp1, vy)); \n  #endif\n  \n  uv  = vec2(ux, vy);\n}\n\nvec3 getQPoint(const float id) {\n  float outId = mix(id, 8. - id, step(2.5, id));\n  float ux = floor(outId / 6.) + mod(outId, 2.);\n  float vy = mod(floor(outId / 2.) + floor(outId / 3.), 2.); \n  vec3 pos = vec3(ux, vy, 0);  \n  return pos;\n}\n\nvoid main() {\n  float vId = vertexId;\n  if (vId < 6.) {\n    gl_Position = vec4(getQPoint(vId).xy * 2. - 1., 0.99, 1);\n    v_color = vec4(hsv2rgb(0.5 + vec3(time * 0.05, 1, 1)), 1.);\n    return;\n    \n  }\n  vId -= 6.;  \n  float lineId = floor(vId / POINTS_PER_LINE);\n  float quadCount = POINTS_PER_LINE / 6.; \n  float pointId = mod(vId, 6.);\n  float quadId = floor(mod(vId, POINTS_PER_LINE) / 6.);\n  float quadV = quadId / quadCount;\n  float invQuadV = inv(quadV);\n  vec3 pos;\n  vec2 uv;\n\n  float snd0 = texture2D(sound, vec2(fract(quadV * 0.5) * .05, quadV * 0.)).a;\n  float snd1 = texture2D(sound, vec2(0.14, quadV * 0.15)).a;\n  \n  getQuadPoint(quadId, pointId, mix(0.025, 0.30, pow(snd0 + 0.0, 15.)), vec2(0), pos, uv);  \n  pos.z = quadV;\n  \n  mat4 mat = ident(); \n  \n  mat *= rotZ(sin(time * 0.4 + quadId * 0.003)  + lineId * PI * 0.25);\n  mat *= scale(vec3(\n    mix(1., -1., step(7.5, lineId)),\n    resolution.x / resolution.y,\n    1));\n\n  gl_Position = vec4((mat * vec4(pos, 1)).xyz, 1);\n  gl_PointSize = 4.;\n\n  float hue = mix(0.95, 1.25, snd1) + time * 0.05;\n  float sat = 1.;\n  hue += mix(1.05, 0.0, step(10., mod(quadId, 20.)));\n  float val = mix(1., 0.0, step(35., mod(quadId, 50.)));\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);//invQuadV);\n  //v_color.a = mix(1.0, 0.5, step(50., mod(quadId, 100.)));\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\n\n}\n\n"
  },
  "screenshotURL": "data/images/images-1vm3pfdtczwhl2oki-thumbnail.jpg",
  "hasSound": true,
  "views": 107,
  "likes": 1,
  "revisionId": "DSRme2gLer93ary3u"
}