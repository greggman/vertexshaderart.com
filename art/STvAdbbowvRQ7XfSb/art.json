{
  "_id": "STvAdbbowvRQ7XfSb",
  "owner": {
    "_id": "vkPwAHM8PnAebFPxW",
    "createdAt": {
      "$date": {
        "$numberLong": "1501857924166"
      }
    },
    "profile": {
      "name": "Macro Machines",
      "avatarUrl": "https://lh3.googleusercontent.com/-hZKcNaW8AT0/AAAAAAAAAAI/AAAAAAAAEGM/geaXegN2s9U/photo.jpg",
      "info": "axiom-crux.net macromachines.net"
    },
    "username": "macro"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1600427127635"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1600427127635"
    }
  },
  "origId": "FNwMYwJ2SdwbbSNAN",
  "name": "sput",
  "notes": "",
  "rank": {
    "$numberDouble": "1.4698609319139901"
  },
  "private": false,
  "unlisted": true,
  "username": "macro",
  "avatarUrl": "https://lh3.googleusercontent.com/-hZKcNaW8AT0/AAAAAAAAAAI/AAAAAAAAEGM/geaXegN2s9U/photo.jpg",
  "settings": "{\"num\":30720,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/mixmag-1/premiere-luigi-madonna-chaudfontaine-pan-pot-remix\",\"lineSize\":\"CSS\",\"backgroundColor\":[1,0.14901960784313725,0,1],\"shader\":\"/*\\n\\n\\n  _     _    _____  __ __     _______     _____   __  __   ______   __   __     _____    _____     _____  __ __      _____    __ __     _______   \\n /_/\\\\ /\\\\_\\\\ /\\\\_____\\\\/_/\\\\__/\\\\ /\\\\_______)\\\\ /\\\\_____\\\\/\\\\  /\\\\  /\\\\/ ____/\\\\ /\\\\_\\\\ /_/\\\\   /\\\\___/\\\\  /\\\\ __/\\\\  /\\\\_____\\\\/_/\\\\__/\\\\   /\\\\___/\\\\  /_/\\\\__/\\\\ /\\\\_______)\\\\ \\n ) ) ) ( (( (_____/) ) ) ) )\\\\(___  __\\\\/( (_____/\\\\ \\\\ \\\\/ / /) ) __\\\\/( ( (_) ) ) / / _ \\\\ \\\\ ) )  \\\\ \\\\( (_____/) ) ) ) ) / / _ \\\\ \\\\ ) ) ) ) )\\\\(___  __\\\\/ \\n/_/ / \\\\ \\\\_\\\\\\\\ \\\\__\\\\ /_/ /_/_/   / / /     \\\\ \\\\__\\\\   \\\\ \\\\  / /  \\\\ \\\\ \\\\   \\\\ \\\\___/ /  \\\\ \\\\(_)/ // / /\\\\ \\\\ \\\\\\\\ \\\\__\\\\ /_/ /_/_/  \\\\ \\\\(_)/ //_/ /_/_/   / / /     \\n\\\\ \\\\ \\\\_/ / // /__/_\\\\ \\\\ \\\\ \\\\ \\\\  ( ( (      / /__/_  / /  \\\\ \\\\  _\\\\ \\\\ \\\\  / / _ \\\\ \\\\  / / _ \\\\ \\\\\\\\ \\\\ \\\\/ / // /__/_\\\\ \\\\ \\\\ \\\\ \\\\  / / _ \\\\ \\\\\\\\ \\\\ \\\\ \\\\ \\\\  ( ( (      \\n \\\\ \\\\   / /( (_____\\\\)_) ) \\\\ \\\\  \\\\ \\\\ \\\\    ( (_____\\\\/ / /\\\\ \\\\ \\\\)____) )( (_( )_) )( (_( )_) )) )__/ /( (_____\\\\)_) ) \\\\ \\\\( (_( )_) ))_) ) \\\\ \\\\  \\\\ \\\\ \\\\     \\n  \\\\_\\\\_/_/  \\\\/_____/\\\\_\\\\/ \\\\_\\\\/  /_/_/     \\\\/_____/\\\\/__\\\\/__\\\\/\\\\____\\\\/  \\\\/_/ \\\\_\\\\/  \\\\/_/ \\\\_\\\\/ \\\\/___\\\\/  \\\\/_____/\\\\_\\\\/ \\\\_\\\\/ \\\\/_/ \\\\_\\\\/ \\\\_\\\\/ \\\\_\\\\/  /_/_/     \\n                                                                                                                                                  \\n\\n\\n*/\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n#define PI radians(180.0)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat p1m1(float v) {\\n  return v * 0.5 + 0.5;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\n#define NUM_EDGE_POINTS_PER_CIRCLE 256.\\n#define NUM_SUBDIVISIONS_PER_CIRCLE 2.\\n#define NUM_POINTS_PER_DIVISION (NUM_EDGE_POINTS_PER_CIRCLE * 6.)\\n#define NUM_POINTS_PER_CIRCLE (NUM_SUBDIVISIONS_PER_CIRCLE * NUM_POINTS_PER_DIVISION) \\nvoid getCirclePoint(const float id, const float inner, const float start, const float end, out vec3 pos, out vec2 uv) {\\n  float edgeId = mod(id, NUM_POINTS_PER_DIVISION);\\n  float ux = floor(edgeId / 6.) + mod(edgeId, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\\n  float sub = floor(id / NUM_POINTS_PER_DIVISION);\\n  float subV = sub / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\\n  float level = subV + vy / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\\n  float v = mix(inner, 1., level);\\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\\n  float s = sin(a);\\n  float c = cos(a);\\n  float x = c * v;\\n  float y = s * v;\\n  float z = 0.;\\n  pos = vec3(x, y, z);  \\n  uv  = vec2(floor(edgeId / 6.) / NUM_EDGE_POINTS_PER_CIRCLE, subV);\\n}\\n\\nfloat goop(float t) {\\n  return sin(t) + sin(t * 0.27) + sin(t * 0.13) + sin(t * 0.73);\\n}\\n\\nvoid main() {\\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\\n  float pointId = mod(vertexId, NUM_POINTS_PER_CIRCLE);\\n//  float sideId = floor(circleId / 2.);\\n//  float side = mix(-1., 1., step(0.5, mod(circleId, 2.)));\\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\\n  float cu = circleId / numCircles;\\n  vec3 pos;\\n  float edgeId = mod(vertexId, NUM_POINTS_PER_DIVISION);\\n  float ux = floor(edgeId / 6.) + mod(edgeId, 2.);\\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\\n  float u2 = floor(edgeId / 6.) / NUM_EDGE_POINTS_PER_CIRCLE;\\n  float snd = texture2D(sound, vec2(mix(0.0, 0.25, hash(u2)), 0.0)).a;\\n  float inner = mix(0.5, 1.0, pow(snd + .3, 5.0));//0.9; //mix(0.0, 0.5, p1m1(sin(goop(circleId) + time * 0.1)));\\n  float start = fract(hash(circleId * 0.33));\\n  float end   = start + 1.;//start + hash(sideId + 1.);\\n  vec2 uv;\\n  getCirclePoint(pointId, inner, start, end, pos, uv); \\n  \\n  \\n  vec3 offset = vec3(m1p1(hash(circleId * floor(time * 1.2) * 0.123)), m1p1(hash(circleId * 0.37)), -m1p1(circleId / numCircles));\\n  //offset = vec3(0);\\n  vec3 aspect = vec3(1, resolution.x / resolution.y, 1);\\n  \\n  mat4 mat = ident(); \\n  mat *= scale(aspect);\\n  mat *= trans(offset);\\n  mat *= uniformScale(mix(0.2, 0.3, pow(snd, 1.)));\\n  gl_Position = vec4((mat * vec4(pos, 1)).xyz, 1);\\n  gl_PointSize = 4.;\\n\\n  vec3 cc = mix(vec3(1), vec3(0), mod(circleId, 2.0));\\n  vec3 fl = mix(vec3(0,1,1), vec3(.5,1,1), mod(time * 60.0, 2.0)); \\n  vec3 c2 = mix(cc, fl, step(0.8, snd));\\n  float hue = fract(circleId);//, 1., step(0.75, snd));\\n  float sat = step(0.5, snd);\\n  float val = mod(circleId, 2.);step(0.50, snd);\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1.);\\n  v_color.rgb = c2;\\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\\n}//sss\"}",
  "screenshotURL": "data/images/images-ll09yg2jjjvmza1r3-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "gTyYDCLoLz6KxnJGB"
}