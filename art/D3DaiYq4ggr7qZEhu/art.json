{
  "_id": "D3DaiYq4ggr7qZEhu",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1523407251746"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1523407251746"
    }
  },
  "origId": "snffEbJSrbtrEQvka",
  "name": "test for K Machine frag 3",
  "notes": "http://glslsandbox.com/e#38484.0",
  "rank": {
    "$numberDouble": "1.1270651764999429"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/user-158087960/studiomix-douzirec-06-2007-flac\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"//#ifdef  GL_ES\\n//precision  highp float;\\n//#endif \\n\\n//uniform  float time;\\n//uniform  vec2 mouse;\\n//uniform  vec2 vertexResolution;\\n\\nconst float eps = 10e-6;\\nconst int max_steps = 128;\\n\\nmat4 rot = mat4(cos(0.8), sin(0.8), 0, 0,\\n\\t\\t-sin(0.8), cos(0.8), 0, 0,\\n\\t\\t0, \\t0, \\t1, \\t0,\\n\\t\\t0, \\t0, \\t0, \\t1);\\n\\nfloat sphere(vec3 rayPos, vec3 pos, float radius){\\n    return length(rayPos - pos) - radius;\\n}\\n\\nfloat plane(vec3 rayPos, vec3 pos, vec3 normal){\\n  return dot(rayPos - pos,normal.xyz);\\n}\\n\\nfloat box(vec3 rayPos, vec3 pos, vec3 bounds ){\\n  return length(max(abs(rayPos - pos) - bounds, 0.0));\\n}\\n\\nvec3 repeat(vec3 rayPos, vec3 pos, vec3 modulo){\\n\\treturn mod(rayPos - pos,modulo) - 0.5 * modulo;\\n}\\n\\nvec3 transform(vec3 rayPos, vec3 pos, mat4 m){\\n    return (/*inverse*/(m)*vec4((rayPos - pos), 1.0)).xyz;\\n}\\n\\nfloat scene(vec3 rayPos){\\n\\tfloat result = plane(rayPos, vec3(0, -1, 0), vec3(0,1,0));\\n\\tresult = min(result, sphere(repeat(rayPos, vec3(0,0,5), vec3(2,2,2)),vec3(0), 0.25));\\n\\tresult = min(result, box(transform(rayPos, vec3(1,0,3), rot),vec3(0), vec3(0.25,0.25,0.25)));\\n\\treturn result;\\n}\\n\\nvec3 getNormal(vec3 rayPos){\\n    vec2 e = vec2(1.0,-1.0) * 0.5773 * 0.0005;\\n    return normalize(e.xyy * scene(rayPos + e.xyy) + \\n\\t\\t     e.yyx * scene(rayPos + e.yyx) + \\n\\t\\t     e.yxy * scene(rayPos + e.yxy) + \\n\\t\\t     e.xxx * scene(rayPos + e.xxx));\\n}\\n\\nvec3 sphereTrace(vec3 origin, vec3 direction){\\n\\tfloat t = 0.0;\\n\\t\\n\\tfor(int i = 0; i < max_steps; ++i) {\\n\\t\\tvec3 pos = origin + t * direction;\\n\\t\\t//float d = sphere(pos, vec3(0,0,2), 0.25);\\n\\t\\tfloat d = scene(pos);\\n\\n\\t\\tif (d <= eps * t) {\\n\\t\\t\\t//return vec3(float(i) / float(max_steps));\\n\\t\\t\\treturn (getNormal(pos) + 1.0) * 0.5;\\n\\t\\t}\\n\\t\\tt += d;\\n\\t}\\n\\treturn vec3(-1.0);\\n}\\n\\nvoid main( void ) {float finalDesiredPointSize = 2.;\\nfloat maxFinalSquareSideSize = floor(sqrt(vertexCount));\\nfloat finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\\nfloat maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\\nvec2 vertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\\nfloat finalVertexCount = vertexResolution.x*vertexResolution.y;\\nfloat finalVertexId = mod(vertexId,finalVertexCount);\\nfloat x = mod(finalVertexId, vertexResolution.x);\\nfloat y = floor(finalVertexId / vertexResolution.x);\\nvec2 simFragCoord = vec2(x,y);//simfragCoord will replace the gl_FragCoord of fragment shader\\nfloat u_i = (x /vertexResolution.x);\\nfloat v_i = (y /vertexResolution.y);\\nfloat sizeFactor = finalDesiredPointSize*vertexResolution.x/resolution.x;\\nfloat ux = sizeFactor*(u_i - 0.5);\\nfloat vy = sizeFactor*(v_i - 0.5);\\ngl_PointSize = finalDesiredPointSize;\\ngl_Position = vec4(ux, vy, 0., 1.);\\nvec2 surfacePosition = vec2(ux,vy);\\n\\n\\tvec3 camPos = vec3(0.0);\\n\\tvec2 pixelPos = (-vertexResolution.xy + 2.0 * simFragCoord.xy) / vertexResolution.y;\\n\\tvec3 direction = normalize(vec3(pixelPos - camPos.xy, 2.0));\\n\\n\\tvec3 col = vec3(0.7, 0.9, 1.0) + direction.y * 0.618;\\n\\n\\tvec3 result = sphereTrace(camPos, direction);\\n\\tif( result.x >= 0.0)\\n\\t{\\n\\t\\tcol = result;\\n\\t}\\n\\t\\n\\tv_color = vec4(col, 1.0);\\n}\"}",
  "screenshotURL": "data/images/images-iv6my733oapidpd36-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "5"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "oxudB9AQ8JCJjy3Fu"
}