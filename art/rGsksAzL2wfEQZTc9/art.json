{
  "_id": "rGsksAzL2wfEQZTc9",
  "owner": {
    "_id": "PaTtiG9fc6wWxh69k",
    "createdAt": {
      "$date": {
        "$numberLong": "1501018355084"
      }
    },
    "username": "sylistine",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/3a93b17a430d08943deebdfb93d4cef3?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1601961470683"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1602054144777"
    }
  },
  "origId": null,
  "name": "Spiral",
  "notes": "undecided on what to do with music on this one, but it's a start",
  "rank": {
    "$numberDouble": "1.7009890661213252"
  },
  "private": false,
  "unlisted": false,
  "username": "sylistine",
  "avatarUrl": "https://secure.gravatar.com/avatar/3a93b17a430d08943deebdfb93d4cef3?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/dzasterpeace/somewhere",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI radians(180.)\n#define NUM_SEGMENTS 4.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 5.0\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 scale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotX( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, -s, 0,\n      0, s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nstruct vertexData {\n  vec3 position;\n  vec2 uv;\n  vec3 normal;\n};\n  \n  vec3 quadPos(float vId) {\n    float vIdQuad = mod(vId, 6.);    // 0 1 2 3 4 5\n    \n    float vIdTri = mod(vIdQuad, 3.); // 0 1 2 0 1 2\n    float tId = floor(vIdQuad / 3.); // 0 0 0 1 1 1\n    \n    float x = mod(vIdQuad, 2.);      // 0 1 0 1 0 1\n    float yRaw = floor(vIdTri / 2.); // 0 0 1 0 0 1\n    float y = abs(yRaw - tId);       // 0 0 1 1 1 0\n    return vec3(x, y, 0.);\n  }\n\nvertexData get_VertexData(float vId, float vCount) {\n  float triId = floor(vId / 3.);\n  float triVertexId = mod(vId, 3.);\n  float quadCount = floor(vCount / 6.);\n  float quadIdx = floor(triId/2.);\n  \n  vec2 planeSize = vec2(floor(quadCount / 32.), 32.);\n  float xId = floor(quadIdx / (planeSize.y * 2.));\n  float yId = mod(quadIdx, planeSize.y * 2.);\n  float zId = floor(yId / planeSize.y);\n  vec3 quadId = vec3(xId, mod(yId, planeSize.y), 1.);\n  \n  float xPos = mod(vId, 2.) + quadId.x;\n  float yPos = abs(floor(triVertexId / 2.) - mod(triId, 2.)) + quadId.y;\n  \n  vec3 position = vec3(xPos, yPos, (zId*2.+1.)*0.01);\n  vec3 offset = vec3(-planeSize.x * 0.25, -planeSize.y*0.5, 0.);\n  //vec3 position = vec3(xPos, sin(yPos/quadSize.y * PI * 2.), cos(yPos/quadSize.y * PI * 2.));\n  //vec3 offset = vec3(-quadSize.x * 0.5, 0., 0.);\n  position += offset;\n  \n  vec3 normal = vec3(0., 0., -1.) + vec3(0., 0., 2.)*zId;\n  \n  float spinStrength = 4.;\n  mat4 spiral = rotX(((position.x+time*8.)/planeSize.x)*PI*spinStrength);\n  position = (spiral * vec4(position, 1.)).xyz;\n  \n  vec2 uv = vec2(xPos/(planeSize.x+1.), yPos/(planeSize.y+1.));\n  \n  vertexData data;\n  data.position = position;\n  data.uv = uv;\n  data.normal = (spiral * vec4(normal, 0.)).xyz;\n  return data;\n}\n\nvoid main() {\n  float vTriId = mod(vertexId, 3.);\n  vertexData v = get_VertexData(vertexId, vertexCount);\n  \n  vec3 v0 = get_VertexData(vertexId - vTriId, vertexCount).position;\n  vec3 v1 = get_VertexData(vertexId - (vTriId - 1.), vertexCount).position;\n  vec3 v2 = get_VertexData(vertexId - (vTriId - 2.), vertexCount).position;\n  vec3 e1 = v0 - v1;\n  vec3 e2 = v2 - v1;\n  vec3 normal = cross(e1, e2);\n  \n  normal = v.normal;\n  vec2 m = mouse * PI * 0.5;\n  vec3 lightPos = vec3(0., sin(m.y), -cos(m.y));\n  vec3 lightDir = normalize(lightPos);\n  vec3 lightColor = hsv2rgb(vec3(v.uv.x + time * 0.1, 1.0, 1.0));\n  float ambientLight = 0.1;\n  \n  mat4 view = trans(vec3(0., 0., -50.));\n  //mat4 proj = scale(1./pow(2., 8.));\n  mat4 proj = persp(PI * 0.5, resolution.x / resolution.y, 0.1, 100.);\n  gl_Position = proj * view * vec4(v.position, 1.);\n  \n  float directLightStrength = clamp(dot(normal, lightDir), 0., 1.);\n  v_color = vec4(clamp(directLightStrength + ambientLight, 0.0, 1.0) * lightColor, 1.);\n  //v_color = vec4(hsv2rgb(vec3(v.uv.x+time*0.5, 1.0, 1.0)), 1.);\n  gl_PointSize = 1.;\n}"
  },
  "screenshotURL": "data/images/images-kyahbhq14imcddtpn-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "192"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "gDSXRjizio9dWfNCW"
}