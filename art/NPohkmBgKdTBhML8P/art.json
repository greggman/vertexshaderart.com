{
  "_id": "NPohkmBgKdTBhML8P",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1451762849535
  },
  "modifiedAt": {
    "$date": 1451763123912
  },
  "origId": null,
  "name": "uniformgrid",
  "notes": "",
  "rank": 10.792157381275368,
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 151,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/*\n\nUniform Grid Based on VertexCount and window dimensions\n\nChange the count and/or size the window\n\n*/\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  float across = floor(sqrt(vertexCount * resolution.x / resolution.y));\n  float down   = floor(vertexCount / across);\n  \n  float gx = mod(vertexId, across);\n  float gy = floor(vertexId / across);\n  \n  float u = gx / (across - 1.);\n  float v = gy / (down   - 1.);\n  \n  float x = u * 2. - 1.;\n  float y = v * 2. - 1.;\n  vec2 xy = vec2(x, y);\n  gl_Position = vec4(xy, 0, 1);\n\n  float hue = u * v;\n  float sat = 1.0;\n  float val = 1.0;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n  gl_PointSize  = resolution.x / across * 0.5;\n}\n"
  },
  "screenshotURL": "data/images/images-r6t9cel985nash18l-thumbnail.jpg",
  "hasSound": "",
  "views": 173,
  "likes": 2,
  "revisionId": "odbRYxSCssrwKiy96"
}