{
  "_id": "iJobHmTq8ahMEWFSG",
  "owner": {
    "_id": "PaTtiG9fc6wWxh69k",
    "createdAt": {
      "$date": {
        "$numberLong": "1501018355084"
      }
    },
    "username": "sylistine",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/3a93b17a430d08943deebdfb93d4cef3?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1600668508426"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1600942479802"
    }
  },
  "origId": null,
  "name": "new-desu-dance",
  "notes": "Still in vogue to be dead.\n\nstole a bunch of boilerplate from gman",
  "rank": {
    "$numberDouble": "1.837571803538919"
  },
  "private": false,
  "unlisted": false,
  "username": "sylistine",
  "avatarUrl": "https://secure.gravatar.com/avatar/3a93b17a430d08943deebdfb93d4cef3?default=retro&size=200",
  "settings": "{\"num\":57536,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/griffinmcelroy/wonderland-round-three?in=griffinmcelroy/sets/the-adventure-zone-ost\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define PI radians(180.)\\n#define TAU radians(360.)\\n#define CircleDepth 16.0;\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\nvec2 circleVertexPos(float vertexId) {\\n  float theta = PI * 2.0 / CircleDepth;\\n  \\n  float triId = floor(vertexId / 3.0);\\n  float triVertexId = mod(vertexId, 3.0);\\n  float thetaMultiplier = triId + triVertexId;\\n  \\n  float t = theta * thetaMultiplier;\\n  float r = step(triVertexId, 1.5);\\n  \\n  return vec2(cos(t), sin(t)) * r;\\n}\\n\\nvoid main() {\\n  vec3 cameraPos = vec3(0.0, 0.0, 0.0);\\n  \\n  float vPerCircle = 3.0 * CircleDepth;\\n  float cId = floor(vertexId / vPerCircle);\\n  float circleCount = floor(vertexCount / vPerCircle);\\n  float gridWidth = 54.;\\n  vec2 gridSize = vec2(gridWidth, floor(circleCount / gridWidth));\\n  vec2 gridId = vec2(mod(cId, gridSize.x), floor(cId / gridSize.x));\\n  gridId -= gridSize*0.5;\\n  vec2 gridUv = gridId / (gridSize * 0.5);\\n  float centerDist = length(gridId);\\n  \\n  float angle = atan(abs(gridId.x), gridId.y) / (PI);\\n  float blurAngle = PI / 128.;\\n  \\n  vec2 sUV = vec2(angle, 0.0);\\n  sUV.y *= 0.1;\\n  sUV.x *= 0.33;\\n  \\n  int iterId = 1;\\n  sUV.x -= blurAngle * 0.0 * 0.5;\\n  float snd = 0.0;\\n  for (int i = 0; i <= 0; i++) {\\n    if (sUV.x < 0.0) {\\n      sUV.x += blurAngle;\\n      continue;\\n    }\\n    if (sUV.x > 1.0) {\\n      break;\\n    }\\n    float strength = 1.0 / float(iterId);\\n    snd = snd * (1.0 - strength) + texture2D(sound, sUV).a * strength;\\n    sUV.x += blurAngle;\\n    iterId++;\\n  }\\n    \\n  snd *= 0.8+sUV.x; // enhance strength of high-end values\\n  snd = smoothstep(0.2, 0.8, snd);\\n  snd = pow(snd, 4.); // enhance enhance enhance\\n  \\n  \\n  vec3 circlePos = vec3(gridId, 20.-snd-centerDist);\\n  //vec3 circleNormal = cameraPos - circlePos;\\n  \\n  vec3 vertexPos = vec3(circleVertexPos(vertexId), 0.0);\\n  //vertexPos *= mix(0.25, sqrt(2.), pow(snd, 2.0));\\n  \\n  mat4 P = persp(PI*0.5, resolution.x / resolution.y, 0.1, 100.);\\n  float sinT = sin(time*0.25)*0.0625*PI;\\n  vec4 lookDir = (rotY(sinT) * vec4(0.0, 0.0, 1.0, 1.0));\\n  mat4 V = cameraLookAt(cameraPos, lookDir.xyz, vec3(0.0, 1.0, 0.0));\\n  \\n  gl_Position = P * V * vec4(vertexPos + circlePos, 1.0);\\n  v_color = vec4(snd, 0.0, 0.0, 1.0);\\n  //v_color = vec4(hsv2rgb(vec3(snd, 1.0, 1.0)), 1.0);\\n}\"}",
  "screenshotURL": "data/images/images-k210otrzy5415ev5i-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "181"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "7zLn69JLAQLrjzHeA"
}