{
  "_id": "hNysLh7LeD77n8RsG",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1551799475125"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1551801915994"
    }
  },
  "origId": "RKtpsEbtLZPFtvxRA",
  "name": "cube trajectory up TEST simp",
  "notes": "",
  "rank": {
    "$numberDouble": "1.2063009576868682"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":72000,\"mode\":\"TRI_STRIP\",\"sound\":\"https://soundcloud.com/djapsara/apsara-afterdark-031-on-frisky-radio-may-2017\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n#define PI radians(180.0)\\n \\n#define kShapeVertexCount 36.0\\n#define kVertexPerShape 6.0\\n#define numberOfShapesPerGroup 5.0\\n#define fakeVerticeNumber 72000\\n\\n//const float travelSpeed = -100.;\\nconst float dim = 120.;\\nconst float off = 0.1;\\n\\n/////////////////////////////\\n//K Machine parameters\\n/////////////////////////////\\n\\n//KDrawmode=GL_TRIANGLE_STRIP\\n//KVerticesNumber=72000\\n\\n#define tubeSpeedFactor 0.9 //KParameter 0.>>4.\\n#define cudeSpeedFactor 80. //KParameter 0.>>150.\\n#define SizeFactorX 1. //KParameter 1.>>10.\\n#define radiusSizeFactor 0.1 //KParameter 0.05>>0.2\\n#define cubeSizeFactor 1. //KParameter 0.5>>40.\\n#define cubeScaleFactorY 2. //KParameter 0.5>>40.\\n#define cubeScaleFactorZ 1. //KParameter 0.5>>40.\\n\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 lookAt(vec3 _eye, vec3 _targ, vec3 _up) {\\n  vec3 zAx = normalize(_eye - _targ);\\n  vec3 xAx = normalize(cross(_up, zAx));\\n  vec3 yAx = cross(zAx, xAx);\\n\\n  return mat4(\\n    xAx, 0.,\\n    yAx, 0.,\\n    zAx, 0.,\\n    _eye, 1.);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\n\\nvec3 getTrajPoint(const float _id) {\\n  return vec3(\\n    sin(_id * 0.99),\\n    sin(_id * 2.43),\\n    sin(_id * 1.57));\\n}\\n \\nvoid getPosAndAxisMat(const float _rel, const float _delta, out mat3 _axis, out mat3 _pos)\\n{\\n  \\n  float pg = _rel + _delta;\\n  \\n  vec3 r0 = getTrajPoint(pg + off * 0.);\\n  vec3 r1 = getTrajPoint(pg + off * 1.);\\n  vec3 r2 = getTrajPoint(pg + off * 2.);\\n  \\n  _pos = mat3(\\n    getTrajPoint(pg + off * 0.),\\n    getTrajPoint(pg + off * 1.),\\n    getTrajPoint(pg + off * 2.));\\n  \\n  vec3 s0 = normalize(_pos[1] - _pos[0]);\\n  vec3 s1 = normalize(_pos[2] - _pos[1]);\\n  \\n  vec4 zaxis = vec4(normalize(s1 - s0),1.);\\n  vec4 xaxis = vec4(normalize(cross(s0, s1)),1.);\\n  vec4 yaxis = vec4(normalize(cross(zaxis.xyz, xaxis.xyz)),1.);\\n \\n  _axis = mat3(\\n    xaxis,\\n    yaxis,\\n    zaxis);\\n\\n\\n}\\nvoid getTrajMat(float _shapeId, float _shapeCount, float _timeB, out mat4 _wmat, out mat4 _emat) {\\n  \\n  \\n  float prog = (_shapeId / _shapeCount)+_timeB;\\n  \\n  mat3 axis, mPos;\\n\\n  getPosAndAxisMat((_shapeId / _shapeCount), _timeB, axis, mPos);\\n\\n  //position matrix\\n  _wmat = mat4(\\n    vec4(axis[0], 0),\\n    vec4(axis[1], 0),\\n    vec4(axis[2], 0),\\n    vec4(mPos[0] * dim, 1)); \\n  \\n  //orientation matrix\\n  vec3 eye    = mPos[0] * dim + axis[2] * 1.;\\n  vec3 target = mPos[1] * dim + axis[2];\\n  vec3 up     = axis[1];\\n  \\n  mat4 cmat = lookAt(eye, target, up);\\n  _emat = inverse(cmat);\\n  \\n  \\n}\\n\\n\\n#define kShapeVertexCount 36.0\\n#define kVertexPerShape 6.0\\n\\nvec3 shapeVertex(float _vId, out vec4 _nI)\\n{\\n    float faceId = floor(_vId / kVertexPerShape);\\n    float vtxId = mod(_vId, kVertexPerShape);\\n    vec2 fp;\\n    vec3 v;\\n    \\n    if(vtxId <= 1.0) {\\n        fp = vec2(1.0, 1.0);\\n    }\\n    else if(vtxId == 2.0) {\\n        fp = vec2(-1.0, 1.0);\\n    }\\n    else if(vtxId == 3.0) {\\n        fp = vec2(1.0, -1.0);\\n    }\\n    else {\\n        fp = vec2(-1.0, -1.0);\\n    }\\n    \\n    if(faceId == 0.0) {\\n        \\n        v = vec3(fp.x, fp.y, 1.0);\\n        _nI = vec4(0.0, 0.0, 1.0, faceId);\\n    }\\n    else if(faceId == 1.0) {\\n        \\n        v = vec3(-fp.x, fp.y, -1.0);\\n        _nI = vec4(0.0, 0.0, -1.0, faceId);\\n    }\\n    else if(faceId == 2.0) {\\n        \\n        v = vec3(fp.x, 1.0, -fp.y);\\n        _nI = vec4(0.0, 1.0, 0.0, faceId);\\n    }\\n    else if(faceId == 3.0) {\\n        \\n        v = vec3(fp.x, -1.0, fp.y);\\n        _nI = vec4(0.0, -1.0, 0.0, faceId);\\n    }\\n    else if(faceId == 4.0) {\\n        \\n        v = vec3(-1.0, fp.y, -fp.x);\\n        _nI = vec4(-1.0, 0.0, 0.0, faceId);\\n    }\\n    else {\\n        \\n        v = vec3(1.0, fp.y, fp.x);\\n        _nI = vec4(1.0, 0.0, 0.0, faceId);\\n    }\\n    \\n    return v;\\n}\\n\\n\\nmat4 rotationMatrix(vec3 axis, float angle)\\n{\\n    axis = normalize(axis);\\n    float s = sin(angle);\\n    float c = cos(angle);\\n    float oc = 1.0 - c;\\n    \\n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\\n                0.0,                                0.0,                                0.0,                                1.0);\\n}\\n\\nvec3 shade(vec3 _eye, vec3 _p, vec3 _n, vec3 _dfscol, float _amb, vec2 _spec)\\n{\\n    vec3 rgb;\\n    vec3 lit = normalize(vec3(1.0, 1.0, 4.0));\\n    \\n    float diffuse = max(0.0, dot(_n, lit)) * (1.0 - _amb) + _amb;\\n    \\n    vec3 h = normalize(normalize(_eye - _p) + lit);\\n    float specular = 1.0;\\n    if(diffuse > 0.0) {\\n        specular = max(0.,dot(_n, h));\\n    }\\n    \\n    rgb = diffuse * _dfscol + specular * _spec.y;\\n    \\n    return rgb;\\n}\\n\\n\\n\\nvoid main() {\\n  \\n    //shape\\n    float shapeCount = floor(vertexCount / kShapeVertexCount);\\n    float shapeId = floor(vertexId / kShapeVertexCount);\\n    float shapeVertexId = mod(vertexId, kShapeVertexCount);\\n    float shapeRelId = shapeId/shapeCount;\\n    \\n    //group\\n    float groupId = floor(shapeId/numberOfShapesPerGroup);\\n    float groupCount = floor(shapeCount/numberOfShapesPerGroup);\\n    float shapeIdInGroup = mod(shapeId,numberOfShapesPerGroup);\\n    float relGroupId = shapeIdInGroup/numberOfShapesPerGroup;\\n    float snd = 2.*texture2D(sound, vec2(shapeRelId, 0.)).a;\\n  \\n  \\n  float timeB = time * tubeSpeedFactor;\\n\\n /* \\n  //Static eye\\n  vec3 eye = vec3(0.5, 0.5, 2.5)*dim;\\n  vec3 target = vec3(0.5, 0.5, 0.)*dim;\\n  vec3 up     = vec3(0.5, 0.5, 1.5);\\n  */\\n  \\n  \\n  //Following eye\\n  \\n\\n  mat3 axis, sPos;// = getAxisMat(0., timeB);\\n  getPosAndAxisMat(0., timeB, axis, sPos);\\n  /*\\n //rotation around eye z axis\\n  mat4 rotMat = rotationMatrix(zaxis, time*PI);\\n  xaxis = (rotMat*vec4(xaxis,1.)).xyz;\\n  yaxis = (rotMat*vec4(yaxis,1.)).xyz;\\n  */\\n  //\\n  vec3 eye = sPos[0] * dim + axis[0].xyz * 1.;\\n  vec3 target = sPos[2] * dim + axis[2];\\n  vec3 up = axis[1];\\n  \\n  mat4 vmat = inverse(lookAt(eye, target, up));\\n  \\n\\n    vec4 cNorm;\\n  \\n    vec3 cubep = shapeVertex(shapeVertexId, cNorm);;\\n      \\n    mat4 scaleMat = scale(vec3(1.*cubeSizeFactor,cubeScaleFactorY*cubeSizeFactor,cubeScaleFactorZ*cubeSizeFactor));\\n    \\n    cubep = (scaleMat*vec4(cubep,1.)).xyz;\\n  \\n    mat4 zrot = rotZ(relGroupId*2.*PI);\\n    cubep = (zrot*vec4(cubep,1.)).xyz;\\n  \\n     //create the circle group\\n    \\n  \\n    \\n    float radius = 100.*radiusSizeFactor;\\n    cubep.x+= radius*sin(2.*PI*relGroupId);\\n    cubep.y+= radius*cos(2.*PI*relGroupId);\\n  //cubep.z = mod(time*2.,3.);\\n  //cubep = vec3(cubep.x , cubep.y+sndFactor*snd, cubep.z+lineId*patternSize +mod(time*speedFactor,patternSize));//position\\n    \\n  vec3 pos;\\n  \\n  //shapeId = mod(shapeId+time, shapeCount);\\n\\n  mat4 posmat, rotmat;\\n\\n  getTrajMat(mod(shapeId-time*cudeSpeedFactor,shapeCount), shapeCount, timeB, posmat, rotmat);\\n   \\n  //shape orientation\\n  cubep = (vec4(cubep.xyz,1.)*rotmat).xyz;\\n  cNorm *= rotmat;\\n  \\n  //shape position\\n  cubep+= (posmat * vec4(0.,0.,0., 1)).xyz;\\n \\n  vec3 finalcolor = shade(eye, cubep, cNorm.xyz, vec3(1.), 0.6, vec2(64.0, .8));\\n  gl_PointSize = 2.;\\n  mat4 pmat = persp(radians(60.0), resolution.x / resolution.y, .1, 1000.0);\\n  gl_Position = pmat * vmat * vec4(cubep, 1);\\n  v_color = vec4(finalcolor,1.);\\n}\\n\"}",
  "screenshotURL": "data/images/images-skabcsnam3xwarxt9-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "7"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "gZW7gjhqki4KLkeqj"
}