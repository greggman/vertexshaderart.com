{
  "_id": "Xf8ywY5kqr6qLRr2F",
  "owner": {
    "_id": "yumJxCTi3otBwEFh4",
    "createdAt": {
      "$date": {
        "$numberLong": "1618264688331"
      }
    },
    "username": "chriscamplin",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/5798c9f697b3fea48de32ade2ba3e54c?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1676920361059"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1676924971482"
    }
  },
  "origId": "HoKSKN5bu2omsjRi7",
  "name": "etch a sketch",
  "notes": "",
  "rank": {
    "$numberDouble": "1.7875429080729066"
  },
  "private": false,
  "unlisted": false,
  "username": "chriscamplin",
  "avatarUrl": "https://secure.gravatar.com/avatar/5798c9f697b3fea48de32ade2ba3e54c?default=retro&size=200",
  "settings": "{\"num\":100000,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/chris-camplin/arpo-marx\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\nstruct point {\\n  vec3 position;\\n  float a;\\n  float b;\\n  float rad;\\n  float snd;\\n};\\n \\nmat4 rotX(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0, -s, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotY(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nvoid main() {\\n  float numPointsPerCircle = 3.;\\n  float circleId = floor(vertexId / numPointsPerCircle);\\n  float numCircles = floor(vertexCount / numPointsPerCircle);\\n\\n  float sliceId = floor(vertexId / 6.0);\\n  float oddSlice = mod(sliceId, 2.0); // ) if it's even, one if it's odd\\n  float cols = floor(sqrt(numCircles));\\n  float rows = floor(numCircles / cols);\\n  // vertex ID is number of the vertex\\n  float x = mod(circleId, rows); // divide by 10 keep the remainder, \\n  float y = floor(circleId / rows); //. floor throws away the remainder 0000 1111 2222\\n\\n  float snd = pow(texture2D(sound, vec2(0.00025, 0.00025)).a, 20.);\\n\\n  float v=vertexId/10.0;\\n  int num=int(mouse.x*15.0+15.0+snd);\\n  int den=int(exp(mouse.y*5.0+5.0*snd)+snd);\\n  float frac=1.0-float(num)/float(den);\\n  vec3 xyz=vec3(sin(v),cos(v)*sin(v*frac), cos(v))*2.0;\\n\\n  for(int i = 0; i < 1; i++) {\\n    xyz*=abs(xyz)/dot(xyz, xyz)-vec3(snd);\\n    //xyz*=abs(xyz)/dot(xyz, xyz)-vec3(snd);\\n  }\\n  vec3 aspect = vec3(1, resolution.x / resolution.y, 1);\\n  \\tvec4 pos = vec4(xyz * aspect, 1);\\n  \\tmat4 mat = ident();\\n  \\t//mat *= scale(vec3(1, aspect, 1));\\n    mat *= rotX(time);\\n    mat *= rotY(radians(-45.)*time*.5);\\n  \\tmat *= rotZ(time);\\n  gl_Position = pos*mat;\\n  \\n    vec4 color = vec4(1,1,snd, 1);\\n\\n   vec4 finalColor = mix(color, background, snd);\\n  v_color = finalColor;\\n}\"}",
  "screenshotURL": "data/images/images-g5rjv9b4talrgrvqh-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "58"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "jsHGQR5SmLfhEsCte"
}