{
  "_id": "oNxBgiL2gw39fW6DS",
  "owner": {
    "_id": "ZBHrEZGrgA6JBJGt7",
    "createdAt": {
      "$date": 1463104654911
    },
    "username": "mipmap",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/2840df8e29cba840a5b7f90f66bc66cd?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1463105112548
  },
  "modifiedAt": {
    "$date": 1463105112548
  },
  "origId": "ZZ2MBTXKXSRzbure5",
  "name": "msh conveyor",
  "notes": "[Inspired by this](http://lightprocesses.tumblr.com/post/111678252500/horizon-coded-in-processing-10-frames-related) I somehow ended up here",
  "rank": 1.6347064243477132,
  "private": false,
  "unlisted": false,
  "username": "mipmap",
  "avatarUrl": "https://secure.gravatar.com/avatar/2840df8e29cba840a5b7f90f66bc66cd?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/boostmusic/boosttv-004-tk5-slow-light",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/*\n\nvertexshaderart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nmat4 rotX(float angle) {\n\n    float s = sin( angle );\n    float c = cos( angle );\n\n    return mat4(\n      1, 0, 0, 0,\n      0, c, s, 0,\n      0,-s, c, 0,\n      0, 0, 0, 1);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  #if 0\n  return mat4(\n    1, 0, 0, trans[0],\n    0, 1, 0, trans[1],\n    0, 0, 1, trans[2],\n    0, 0, 0, 1);\n  #else\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n  #endif\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b07 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) ;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat p1m1(float v) {\n  return v * .5 + .5;\n}\n\nfloat inRange(float v, float minV, float maxV) {\n  return step(minV, v) * step(v, maxV);\n}\n\nfloat at(float v, float target) {\n  return inRange(v, target - 0.1, target + 0.1);\n}\n\n\nvoid main() {\n  float across = floor(sqrt(vertexCount * resolution.x / resolution.y)) * 6.;\n  float down   = floor(vertexCount / across) * 6.;\n  \n  float gx = mod(vertexId, across);\n  float gy = floor(vertexId / across);\n  \n  float u = gx / (across - 1.);\n  float v = gy / (down   - 1.);\n  float c = u;\n  float s = 1. - pow(1. - p1m1(sin(time * 0.2 + c * PI * 2. + PI * 0.5)), 4.);\n  s = s * p1m1(sin(u * p1m1(sin(time * 0.111)) * 2.1));\n  \n  float x = u * 2. - 1.;\n  float y = m1p1(fract(v + mix(-1., 1., mod(gx, 2.)) * time * 0.02 * m1p1(1. - u))) * 4.;\n\n  x += sin(time * 0.04 + y * (p1m1(sin(time * 0.123)) + 0.1) * 10.) * 0.1;\n\n  float snd = 0.;\n  const int cnt = 8;\n  for (int i = 0; i < cnt; ++i) {\n   snd += texture2D(sound, vec2(p1m1(x) * 0.1, float(i) * 3. / soundRes.y + p1m1(sin(PI * 2. * fract(p1m1(y)))))).a;\n  }\n  snd /= float(cnt);\n  \n  vec3 p = vec3(x, y, -1.5 + s * 1.);\n  \n  mat4 m = persp(radians(125.), 1. + 0. * resolution.x / resolution.y, 0.1, 10.);\n  m *= rotZ(time * -0.01 + u);\n \n  gl_Position = m * vec4(p, 1.);\n\n  float hue = p1m1(s) * 0.4 + time * 0.02;\n  float sat = 0.5 + snd;\n  float val = 1. - snd * 0.5;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n  gl_PointSize  = resolution.x / across * 0.5 / pow(p.z, 1.4);\n}\n"
  },
  "screenshotURL": "data/images/images-8820rb4t44itmoalq-thumbnail.jpg",
  "hasSound": true,
  "views": 130,
  "likes": 1,
  "revisionId": "L4TfFX2CHo5HZR47u"
}