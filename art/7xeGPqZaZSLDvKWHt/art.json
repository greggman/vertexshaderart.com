{
  "_id": "7xeGPqZaZSLDvKWHt",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1531242931004"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1531242931004"
    }
  },
  "origId": "zQMGMroYDChPD5qbu",
  "name": "raymarched cube",
  "notes": "",
  "rank": {
    "$numberDouble": "1.9695901713669246"
  },
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 50000,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "// --------------------------------------------------------\n// Spectrum colour palette\n// IQ https://www.shadertoy.com/view/ll2GD3\n// --------------------------------------------------------\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 spectrum(float n) {\n    return pal( n, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\n\n// --------------------------------------------------------\n// HG_SDF https://www.shadertoy.com/view/Xs3GRB\n// --------------------------------------------------------\n\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n\n// --------------------------------------------------------\n// Geometry\n// --------------------------------------------------------\n\nfloat map(vec3 p) {\n  \tvec3 offset = vec3(\n    \tcos(time),\n      \tsin(time),\n      \tcos(time * 2.)\n    );\n  \tp -= offset * .25; \n  \tpR(p.xy, time);\n  \tpR(p.zx, time * .5);  \t\n\n  \treturn -fBox(p, vec3(.7));\n}\n\n\n// --------------------------------------------------------\n// Raymarch\n// --------------------------------------------------------\n\nconst float MAX_TRACE_DISTANCE = 10.;\nconst float INTERSECTION_PRECISION = .001;\nconst int NUM_OF_TRACE_STEPS = 10;\n\n\nfloat trace(vec3 rayDir) {\n\n  \tfloat currentDist = INTERSECTION_PRECISION * 2.;\n  \tfloat rayLen = 0.;\n  \n\tfor(int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n\t\tif (currentDist < INTERSECTION_PRECISION || rayLen > MAX_TRACE_DISTANCE) {\n            break;\n        }\n    \tcurrentDist = map(rayDir * rayLen);\n      \trayLen += currentDist;\n\t}\n  \n  \treturn rayLen;\n}\n\n\n// --------------------------------------------------------\n// Seed points, camera, and display\n// gman https://www.vertexshaderart.com/art/7TrYkuK4aHzLqvZ7r\n// --------------------------------------------------------\n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\n\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\nvoid main() {\n  float numQuads = floor(vertexCount / 6.);\n  float around = 100.;\n  float down = numQuads / around;\n  float quadId = floor(vertexId / 6.);\n  \n  float qx = mod(quadId, around);\n  float qy = floor(quadId / around);\n  \n  // 0--1 3\n  // | / /|\n  // |/ / |\n  // 2 4--5\n  //\n  // 0 1 0 1 0 1\n  // 0 0 1 0 1 1\n  \n  float edgeId = mod(vertexId, 6.);\n  float ux = mod(edgeId, 2.);\n  float vy = mod(floor(edgeId / 2.) + floor(edgeId / 3.), 2.); \n  \n  float qu = (qx + ux) / around;\n  float qv = (qy + vy) / down;\n  \n  float r = sin(qv * PI);\n  float x = cos(qu * PI * 2.) * r;\n  float z = sin(qu * PI * 2.) * r;\n  \n  vec3 pos = vec3(x, cos(qv * PI), z);\n  \n  pos *= trace(pos);\n  \n  float tm = time * .5;\n  float rd = 3.;\n  mat4 mat = persp(PI * 0.25, resolution.x / resolution.y, 0.1, 100.);\n  vec3 eye = vec3(\n    cos(tm) * rd,\n    cos(tm) * rd,\n    sin(tm) * rd\n  );\n  vec3 target = vec3(0);\n  vec3 up = vec3(0,1,0);\n  \n  mat *= cameraLookAt(eye, target, up);  \n  \n  vec4 pos4 = mat * vec4(pos, 1);\n  \n  gl_Position = pos4;\n  gl_PointSize = 4.;\n\n  vec3 col = vec3(spectrum(vertexId / vertexCount));\n  col *= smoothstep(rd*2., rd, pos4.z);\n  v_color = vec4(col, 1.);\n  \n  \n}"
  },
  "screenshotURL": "data/images/images-cki246ynuklbc9fxo-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "139"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "XzxJeeTCYHjksykKv"
}