{
  "_id": "NitinB9Gc5jPZZ4vh",
  "owner": {
    "_id": "C2utQTT3TWar9FrqK",
    "createdAt": {
      "$date": {
        "$numberLong": "1655222020443"
      }
    },
    "username": "watermeloon",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/e0a1c061d10e360fcf5646229dd6e29a?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1655570394048"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1655570394048"
    }
  },
  "origId": "PtxL78jLv4jyfZCi9",
  "name": "base",
  "notes": "basic sphere",
  "rank": {
    "$numberDouble": "1.300947672171848"
  },
  "private": true,
  "unlisted": false,
  "username": "watermeloon",
  "avatarUrl": "https://secure.gravatar.com/avatar/e0a1c061d10e360fcf5646229dd6e29a?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "#define PI radians(180.)\n\n//returns the evenly distributed points\n//https://stackoverflow.com/questions/9600801/evenly\n//-distributing-n-points-on-a-sphere\nvec3 FIBO(float rad, float id, float sum){\n\n  \t//golden angle in radians\n  float phi = PI * (3. - sqrt(5.));\n\n  \t// y goes from 1 to -1\n  float y = 1. - (id / (sum - 1.)) * 2.;  \n  float radius = sqrt(1. - y * y);\n\n  float theta = phi * id;\n\n  float x = cos(theta) * radius;\n  float z = sin(theta) * radius;\n  \t\n  vec3 point = vec3(x * rad, y * rad, z * rad);\n  \n  return point;\n}\n\n//X axis rotation\nmat4 rotateX(float angleInRadians){\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n \n//Y axis rotation\nmat4 rotateY(float angleInRadians){\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n//Z axis rotation\nmat4 rotateZ(float angleInRadians){\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\n//OpenGL perspective function //gman\n//\n//fov: how much you can see\n//aspect: ratio of how wide the screen is\n//zNear: the distance from the near clipping plane\n//zFar: the distance from the far clipping plane\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\n//looking at the object //gman\nmat4 look_at(vec3 eye, vec3 target, vec3 up) {\n  vec3 zx = normalize(eye - target);\n  vec3 xx = normalize(cross(up, zx));\n  vec3 yx = cross(zx, xx);\n\n  return mat4(\n    xx, 0,\n    yx, 0,\n    zx, 0,\n    eye, 1);\n}\n\n//inverse of a 4x4 matrix //gman\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nvoid main() {\n  vec4 point;\n  float radius = 0.7;\n  point = vec4(FIBO(radius, vertexId, floor(vertexCount / 10.)), 1.);\n  \n  point *= rotateX(time * .2);\n  point *= rotateY(time * .2);\n  point *= rotateZ(time * .2);\n  \n  gl_Position = vec4(point.x * resolution.y/resolution.x, point.y, point.z, 1.);\n  \n  float color_norm = (gl_Position.z + 2.) / 2.;\n  color_norm -= .2;\n  //color_norm -= .6; back is visible too\n  vec4 color = vec4(color_norm, color_norm, color_norm, 1);\n  v_color = color;\n  \n  gl_PointSize = 1.;\n  gl_PointSize -= gl_Position.z * .15;\n  \n\n}"
  },
  "screenshotURL": "data/images/images-gej2k6vs6xchkpqer-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "2"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "Awsed3oWXrSKm7jQT"
}