{
  "_id": "cznhWtArrLFqxJgAf",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1608842208340
  },
  "modifiedAt": {
    "$date": 1608842208340
  },
  "origId": null,
  "name": "Oklab Color Space",
  "notes": "[https://bottosson.github.io/posts/oklab/](https://bottosson.github.io/posts/oklab/)",
  "rank": 1.4650392331767552,
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 20000,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "#define PI radians(180.)\n#define NUM_SEGMENTS 2.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 1.0\n\nfloat cbrt(float n) {\n  float x = 1.0;\n  for (int i = 0; i < 10; ++i) {\n    x = (2.0 * x + n / (x * x)) / 3.0;\n  }\n  return x;\n}\n\nvec3 rgb2oklab(vec3 c) \n{\n    float l = dot(c, vec3(0.4121656120, 0.5362752080, 0.0514575653));\n    float m = dot(c, vec3(0.2118591070, 0.6807189584, 0.1074065790));\n    float s = dot(c, vec3(0.0883097947, 0.2818474174, 0.6302613616));\n\n    float l_ = cbrt(l);\n    float m_ = cbrt(m);\n    float s_ = cbrt(s);\n\n    return vec3(\n        0.2104542553*l_ + 0.7936177850*m_ - 0.0040720468*s_,\n        1.9779984951*l_ - 2.4285922050*m_ + 0.4505937099*s_,\n        0.0259040371*l_ + 0.7827717662*m_ - 0.8086757660*s_);\n}\n\nvec3 oklab2rgb(vec3 c) \n{\n    float l_ = c.x + 0.3963377774 * c.y + 0.2158037573 * c.z;\n    float m_ = c.x - 0.1055613458 * c.y - 0.0638541728 * c.z;\n    float s_ = c.x - 0.0894841775 * c.y - 1.2914855480 * c.z;\n\n    float l = l_*l_*l_;\n    float m = m_*m_*m_;\n    float s = s_*s_*s_;\n\n    return vec3(\n        + 4.0767245293*l - 3.3072168827*m + 0.2307590544*s,\n        - 1.2681437731*l + 2.6093323231*m - 0.3411344290*s,\n        - 0.0041119885*l - 0.7034763098*m + 1.7068625689*s);\n}\n\nvec3 hsl2rgb(vec3 c) {\n  float C = c.y;\n  float h = c.x;\n  float a = C * cos(h * PI * 2.0);\n  float b = C * sin(h * PI * 2.0);\n  float L = c.z;\n  return oklab2rgb(vec3(L,a,b));\n}\n\nvoid main() {\n  float across = floor(sqrt(vertexCount));\n  float down = floor(vertexCount / across);\n  \n  float x = mod(vertexId, across);\n  float y = floor(vertexId / across);\n  \n  float u = x / (across - 1.0);\n  float v = y / (down - 1.0);\n  \n  float xu = u * 2.0 - 1.0;\n  float yv = v * 2.0 - 1.0;\n  \n  gl_Position = vec4(xu, yv, 0, 1);\n  gl_PointSize = 10.0;\n\n  v_color= vec4(hsl2rgb(vec3(u, 0.2, 1.)), 1);\n  \n}"
  },
  "screenshotURL": "data/images/images-ur30c1be3rakpj5fh-thumbnail.jpg",
  "hasSound": "",
  "views": 2,
  "likes": 0,
  "revisionId": "uCvH6HqmbWEvdAJ4J"
}