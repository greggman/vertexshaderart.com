{
  "_id": "J4JLEuTrJFshLPKeg",
  "owner": {
    "_id": "RfHaub5KYDRmJTzBN",
    "createdAt": {
      "$date": "1629553450441"
    },
    "username": "przemyslawzaworski",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/3a3abcfa29dc9b0fa9fd2fb25ff10892?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1639261039069"
  },
  "modifiedAt": {
    "$date": "1639261039069"
  },
  "origId": null,
  "name": "Bezier Curves",
  "notes": "",
  "rank": "1.8912016255681943",
  "private": false,
  "unlisted": false,
  "username": "przemyslawzaworski",
  "avatarUrl": "https://secure.gravatar.com/avatar/3a3abcfa29dc9b0fa9fd2fb25ff10892?default=retro&size=200",
  "settings": {
    "num": 65536,
    "mode": "LINES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "// https://en.wikipedia.org/wiki/B%C3%A9zier_curve\nvec2 BezierCurve (vec2 a, vec2 b, vec2 c, vec2 d, float t)\n{\n\tfloat x = a.x * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * b.x * t * (1.0 - t) * (1.0 - t) + 3.0 * c.x * t * t * (1.0 - t) + d.x * t * t * t;\n\tfloat y = a.y * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * b.y * t * (1.0 - t) * (1.0 - t) + 3.0 * c.y * t * t * (1.0 - t) + d.y * t * t * t;  \n\treturn vec2 (x, y);\n}\n\n// https://www.shadertoy.com/view/4djSRW\n// Returns value in range -1..1\nvec4 Hash (float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n\tp4 += dot(p4, p4.wzxy + 33.33);\n\treturn fract((p4.xxyz + p4.yzzw) * p4.zywx) * 2.0 - 1.0;\n}\n\n// https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/mod.xhtml\nfloat Mod (float x, float y)\n{\n\treturn x - y * floor(x / y);\n}\n\nvoid main() \n{\n\tfloat strand = 64.0; // amount of vertices per strand\n\tfloat instance = floor(vertexId / strand); // instance ID\n\tfloat id = Mod(vertexId, strand); // vertex ID\n\tfloat t = max((id + Mod(id, 2.0) - 1.0), 0.0) / (strand - 1.0); // interpolator\n\tvec4 n = Hash(instance); // noise\n\tvec2 coords = BezierCurve(vec2(n.x + sin(time), n.y - cos(time)), n.xy, n.zw, vec2(-sin(time), cos(time)), t);\n\tgl_Position = vec4(coords, 0, 1);\n\tv_color = vec4(n.xyz, 1);\n}"
  },
  "screenshotURL": "data/images/images-5fjdc82zhrln5r5vb-thumbnail.jpg",
  "hasSound": "",
  "views": "227",
  "likes": "1",
  "revisionId": "2a9igbyFJXQ3ScHwb"
}