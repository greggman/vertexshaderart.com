{
  "_id": "ctdaXFjXNjTiss8Kh",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1468395002526"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1494052478975"
    }
  },
  "origId": null,
  "name": "circles",
  "notes": "",
  "rank": {
    "$numberDouble": "1.3569610692192962"
  },
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 40000,
    "mode": "LINES",
    "sound": "https://soundcloud.com/graham-panter/lotus",
    "lineSize": "CSS",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n\nvoid main() {\n  float pointsAroundCircle = 240.;\n  float pointsPerCircle = pointsAroundCircle * 2.;\n  float numCircles = floor(vertexCount / pointsPerCircle);\n  float circleId = floor(vertexId / pointsPerCircle);\n  float vId = mod(vertexId, pointsPerCircle);\n  float pointId = floor(vId / 2.) + mod(vId, 2.);\n  float pointV = pointId / (pointsAroundCircle - 1.);\n  \n  float circleV = circleId / (numCircles - 1.);\n  float odd = mod(circleId, 2.);\n  float quad = mod(floor(circleId / 2.), 2.);\n  \n  float tm = time * 4. - circleV;\n  float angle = mix(-PI, PI, pointV) + sin(tm + pointV * PI * 8.) * .05;\n  float c = cos(angle);\n  float s = sin(angle);\n  \n  vec2 aspect = vec2(1, resolution.x / resolution.y);\n  float off = mix(.0, 0.953, circleV);\n\n  float su = hash(pointV * 13.7);\n  float snd = texture2D(sound, vec2(mix(0.001, 0.115, su), circleV * 0.2)).a;\n    \n  float q = (odd + quad * 2.) / 3.;\n  float sq = texture2D(sound, vec2(mix(0.001, 0.115, 0.), 0)).a;\n  \n  vec2 xy = vec2(c, s) * mix(1. , 1. + off, pow(snd, 5.));\n  float scale = mix(\n     mix(\n       mix(.4, .5, circleV),\n       mix(-.4, -.3, circleV),\n       odd),\n     mix(\n       mix(.1, .15, circleV),\n       mix(-.1, -.05, circleV),\n       odd),\n     quad) + pow(sq, 10.) * .1;\n  \n  gl_Position = vec4(xy * aspect * scale, circleV, 1);\n\n  float hue = 0.5 + odd * .5 + quad * .125;\n  v_color = vec4(hsv2rgb(vec3(hue, 1, 1)), 1. - circleV);\n  v_color.rgb *= v_color.a;\n}"
  },
  "screenshotURL": "data/images/images-48z002kn4oniobgni-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "452"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "HuZegYQmFtAwEvaW9"
}