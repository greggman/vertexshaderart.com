{
  "_id": "uXbjeauxDQaEZBKPg",
  "owner": {
    "_id": "8nH6oSTzSsTCTnYiB",
    "createdAt": {
      "$date": 1598957828167
    },
    "username": "hornet",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/eb6c8d6cd2e064d55df92d041373e1c9?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1598958078243
  },
  "modifiedAt": {
    "$date": 1598958166775
  },
  "origId": null,
  "name": "teh points",
  "notes": "based on https://www.vertexshaderart.com/art/jDNMJCu4S7DSRconL",
  "rank": 1.1131648903021911,
  "private": false,
  "unlisted": true,
  "username": "hornet",
  "avatarUrl": "https://secure.gravatar.com/avatar/eb6c8d6cd2e064d55df92d041373e1c9?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/*\n\n                                                                                                                                                           \n                                                      \n     _  ._ _|_  _      _ |_   _.  _|  _  ._ _. ._ _|_ \n \\/ (/_ |   |_ (/_ >< _> | | (_| (_| (/_ | (_| |   |_ \n                                                      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n#define PI radians( 180. )\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n\nmat4 rotX( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0,-s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  #if 0\n  return mat4(\n    1, 0, 0, trans[0],\n    0, 1, 0, trans[1],\n    0, 0, 1, trans[2],\n    0, 0, 0, 1);\n  #else\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n  #endif\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12_float(vec2 p)\n{\n    #define HASHSCALE1 .1031\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat p1m1(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inRange(float v, float minV, float maxV) {\n  return step(minV, v) * step(v, maxV);\n}\n\nfloat at(float v, float target) {\n  return inRange(v, target - 0.1, target + 0.1);\n}\n\nvoid getShapePoint(const float numPointsPerFace, const float id, const mat4 wvp, out vec4 pos) {\n  float numPointsPerShape = pow(numPointsPerFace, 3.);\n  float numPointsPerWhat = numPointsPerFace * numPointsPerFace;\n  float aId = mod(id, numPointsPerFace);\n  float a   = aId / numPointsPerFace;\n  float bId = mod(floor(id / numPointsPerFace), numPointsPerFace);\n  float b   = bId / numPointsPerFace;\n  float cId = floor(id / numPointsPerWhat);\n  \n  float c   = cId / numPointsPerFace;\n  \n  c += hash11( id );\n  \n  float a0  = a * PI * 2.;\n  float b0  = b * PI * 2.;\n  float c0  = c * PI * 2.;\n  \n  \n  \n  mat4 m = wvp;\n  m *= rotZ(c0);\n  m *= rotY(b0);\n  m *= rotY(a0);\n  pos = m * vec4(1,1,1,1);\n}\n\n\nvoid main() { \n  \tfloat animTime = time;\n  \n  \tfloat orbitAngle = animTime * 0.03456;\n  \tfloat elevation = sin(animTime * 0.223);\n  \tfloat fOrbitDistance = 30.;\n  \n    vec3 target = vec3(0, 0, 0);\n    vec3 eye = vec3(0, 0, 10);\n  \t     eye = vec3( sin(orbitAngle) * fOrbitDistance , sin(elevation * 1.11) * 10. , cos(orbitAngle)* fOrbitDistance ) ;\n    vec3 up = vec3(0,1,0);\n  \n    float numPointsPerFace = 4.;\n    float numPointsPerShape = pow(numPointsPerFace, 3.);\n    float shapeId = floor(vertexId / numPointsPerShape); \n    float shapeCount = floor(vertexCount / numPointsPerShape);\n    float shapeV = shapeId / shapeCount;\n    float invShapeV = 1. - shapeV;\n  \n    float size = floor(pow(shapeCount, 1./3.));\n    vec3 p = vec3(\n      mod(shapeId, size),\n      mod(floor(shapeId / size), size),\n      floor(floor(shapeId / size) / size));\n    vec3 pv = p / size;\n    pv = vec3(0,0,0);\n  \n    float snd = 0.;\n  \n    vec4 pos;\n    mat4 m = ident();\n    m *= persp(45., resolution.x / resolution.y, 0.1, 60.);\n    m *= cameraLookAt(eye, target, up);\n\n  \t//m *= rotY( 0.5+0.5*sin(time * 0.051 + shapeId * sin(time * 0.13) * 0.07) );\n    //m *= rotZ( 0.5+0.5*sin(time * 0.073 + shapeId * sin(time * 0.21) * 0.06));\n\n  \n  \tm *= rotY( sin(time * 0.051 + 0.125 * shapeId * 0.07 ) );\n    m *= rotZ( sin(time * 0.073 + shapeId * 0.06 ) );\n  \n    m *= uniformScale(10. * invShapeV);\n    getShapePoint(numPointsPerFace, vertexId, m, pos);\n\n    gl_Position = pos;\n    gl_PointSize = 4.;\n    float z = p1m1(pos.z / pos.w);\n  \n  \t// Final output color\n    //float hue = time * 0.01 + shapeV * 0.1;\n    //float sat = 1.;\n    //float val = 1.;\n    //v_color = vec4(hsv2rgb(vec3(hue, sat, val)), invShapeV + 0.1);\n  \n  \tv_color = 0.25*vec4(0.7, 0.6, 0.5, 0.0);\n}\n"
  },
  "screenshotURL": "data/images/images-6uyv98z49slhu41rk-thumbnail.jpg",
  "hasSound": "",
  "views": 2,
  "likes": 1,
  "revisionId": "SA35dctYm2y8DXWkA"
}