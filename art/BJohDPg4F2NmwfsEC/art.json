{
  "_id": "BJohDPg4F2NmwfsEC",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1515952485989"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1515952485989"
    }
  },
  "origId": "mP36iPeKidJ9NCRwX",
  "name": "black and white resolutioned simplified",
  "notes": "",
  "rank": {
    "$numberDouble": "1.0432376873896376"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/billx/tandava-billx-remix\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0.9921568627450981,1,1],\"shader\":\"#define ITERS 40\\n#define M_PI 3.1415926535897932384626433832795\\n\\n\\nvoid main ()\\n{\\n   float maxFinalSquareSideSize = floor(sqrt(vertexCount));\\n  float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\\n  \\n  //first the number of elements in a line\\n  float across = floor(maxFinalSquareSideSize);// *resolution.x/resolution.y);\\n  \\n  //we want to keep the resolution >> across/down must be the same as resolution.x/resolution.y\\n  //across = across*resolution.x/resolution.y;\\n  \\n  //then the number of possible lines with the given vertexCount\\n  float down = floor(finalMaxVertexCount / across);\\n  \\n  //we can now calculate the final number of elements\\n  float finalVertexCount = across*down;\\n  \\n  //and the consequent finalVertexId\\n  float finalVertexId = mod(vertexId,finalVertexCount);\\n  \\n  //Now we calculate the position of the elements based on their finalVertexId\\n  float x = mod(finalVertexId, across);\\n  float y = floor(finalVertexId / across);\\n  \\n  float u = (x /across);//  * (across/resolution.x);// (across - 1.0);\\n  float v = (y /down);//  * (across/resolution.x);// (down - 1.0);\\n  \\n  float ux =  ((u * (across/resolution.x))* 2.0 - 1.0* (across/resolution.x));//(u * 2.0 - 1.0)  * (across/resolution.x);\\n  float vy =  (v * (across/resolution.x )* 2.0 - 1.0* (across/resolution.x));//(v  * 2.0 - 1.0) * (across/resolution.x);\\n  \\n  float udnd = u;\\n  if(u>0.5)\\n    udnd =  1.-u;\\n  \\n  float snd = texture2D(sound, vec2(0.,  udnd)).a;\\n  //apply fragment logic\\n\\n\\t//float colorCount = 8.;//+ snd/10.;\\n\\n\\tvec2 position = vec2(u,v);\\n  \\n\\tposition.x = abs(position.x - 0.5);\\n    \\n  /*\\n  if(v>0.5)\\n    {\\n\\n      position.x =   mod(position.x,0.5);\\n    }\\n*/\\n    if(v>0.5)\\n      position.y =   (1. -position.y);\\n  \\n\\tfloat j = 1.0;\\n\\tj += position.y + position.x/position.y;\\n\\t//j *= 1.;\\n\\tj = mod(j + time, 1.0);\\n\\t\\n\\tfloat i = mod(position.x  * 1. + 1.*cos(time/12.), sin(time/12.0) + 2.0);\\n\\t\\n    i = mod(position.y * 7. * j, i / j);\\n  \\n\\ti *= 5.;\\n\\t\\n\\t//i = mod(i - time/2.0 - j, colorCount);\\n\\t\\n\\t\\n \\n  gl_Position = vec4(ux, vy, 0, 1);\\n  \\n  gl_PointSize = 1.;//(resolution.y/numAcrossDown) * 1.;//(resolution.y/numAcrossDown)*2.-1.;\\n\\n  v_color = vec4( vec3(mod(floor(i),2.)), 1.0 );\\n  \\n  //if(v_color == vec4(1.,1.,1.,1.))\\n  //gl_Position.x = distance(vec2(ux,vy), vec2(0.,0.));\\n  //gl_Position.y = distance(vec2(vy,ux), vec2(0.,0.));\\n  //if(v>0.5)\\n  //    v_color = vec4( vec3(0.,0.,0.), 1.0 );\\n\\n}\"}",
  "screenshotURL": "data/images/images-dvwb9p0uzwcrngetg-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "3"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "6ogXHQhK2wtbZGe52"
}