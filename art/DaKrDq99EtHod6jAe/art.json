{
  "_id": "DaKrDq99EtHod6jAe",
  "owner": {
    "_id": "vWQZQrMg9M6JE8pX9",
    "createdAt": {
      "$date": {
        "$numberLong": "1575718900497"
      }
    },
    "username": "evan_chen",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/cf83fa7e8a58a2de525a1b42e8550220?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1577612271274"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1577718027846"
    }
  },
  "origId": null,
  "name": "compare 2 hash",
  "notes": "",
  "rank": {
    "$numberDouble": "1.656556424735273"
  },
  "private": false,
  "unlisted": false,
  "username": "evan_chen",
  "avatarUrl": "https://secure.gravatar.com/avatar/cf83fa7e8a58a2de525a1b42e8550220?default=retro&size=200",
  "settings": {
    "num": 11804,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0.11372549019607843,
      0.3411764705882353,
      1
    ],
    "shader": "/*                                                                                                                                              \n .___               __ .                                                                                                                        \n [__ .  , _.._     /  `|_  _ ._                                                                                                                 \n [___ \\/ (_][ )____\\__.[ )(/,[ )                                                                                                                \n                                                                                                                                                \n  ,        ,    ,            .  .      .    ._                                                                                                  \n -+- _  __-+-  -+-.    , _   |__| _. __|_   |,. .._  _.                                                                                         \n  | (/,_)  |    |  \\/\\/ (_)  |  |(_]_) [ )  | (_|[ )(_.                                                                                         \n                                                                                                                                                \n                                                                                                                                                \n                                                                                                                                                \n                                                                                                                                                \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@07/12/2019\n@https://www.shadertoy.com/view/4djSRW                                                                                                                                                 \n*/                                                                                                                                              \n\n\n\n\n\n//test for the hash function used @gman\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n \n//https://www.shadertoy.com/view/4djSRW\nfloat hashOld12(vec2 p)\n{\n    // Two typical hashes...\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n    \n    // This one is better, but it still stretches out quite quickly...\n    // But it's really quite bad on my Mac(!)\n    //return fract(sin(dot(p, vec2(1.0,113.0)))*43758.5453123);\n\n}\n\nvec3 hashOld33( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123);\n}\n\n\n\n\nfloat w2NDC(float v) {\n  return v * 2. - 1.;\n}\n\nvoid main()\n{  \n   float d = floor(sqrt(vertexCount)) ;\n   float a = floor(vertexCount / d) ; \n   float x = mod(vertexId , a ) ;\n   float y = floor(vertexId / a ) ; \n\n   float u = w2NDC(x / (a -1.)) ; //in NDC \n   float v = w2NDC(y / (a -1.)) ; //in NDC \n   float aspect = resolution.x/ resolution.y ;\n  \n   if(vertexId < 1000.)\n   {\n     gl_Position = vec4( 0.  , w2NDC(vertexId / aspect * 0.01 ) , 0.  , 1. ) ; \n     gl_PointSize = 20. ; \n     v_color = vec4(1. , 0.02 , 0.3 , 1.) ; \n   }\n  else if(vertexId < 3000. && vertexId > 1000.  )\n  {\n\tfloat ux = w2NDC(hashOld12(vec2(vertexId * u))) ;\n    if(ux < 0. )\n    {  \n      gl_Position = vec4(ux, w2NDC(hashOld12(vec2(vertexId * v))) * v, 0. , 1. );\n\n      gl_PointSize = 5.; \n      v_color = vec4(1.) ;\n    }\n    \n    ux =  w2NDC(hashOld33(vec3(vertexId * u)).x );  \n    if(ux > 0. )\n    {\n       gl_Position = vec4( w2NDC(hashOld33(vec3(vertexId * u)).x ), w2NDC(hashOld12(vec2(vertexId * v))) * v, 0. , 1. ) * 1.;\n      gl_PointSize = 5.; \n      v_color = vec4(1.) ;\n    }\n  }\n}"
  },
  "screenshotURL": "data/images/images-kikaqqv5evbr3tf82-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "233"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "MrK3AhWFtZ2m8SuxH"
}