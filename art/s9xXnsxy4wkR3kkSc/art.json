{
  "_id": "s9xXnsxy4wkR3kkSc",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1450537124201"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1450986156301"
    }
  },
  "origId": "yWSCEoXnFJxXAZyBo",
  "name": "splot",
  "notes": "",
  "rank": {
    "$numberDouble": "10.608069872157596"
  },
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":99840,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/satoshiimano/fizzy-life-satoshiimano\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,0.14901960784313725,0.011764705882352941,1],\"shader\":\"/*\\n\\n                                                             \\n             _               _         _                 _   \\n _ _ ___ ___| |_ ___ _ _ ___| |_ ___ _| |___ ___ ___ ___| |_ \\n| | | -_|  _|  _| -_|_'_|_ -|   | .'| . | -_|  _| .'|  _|  _|\\n \\\\_/|___|_| |_| |___|_,_|___|_|_|__,|___|___|_| |__,|_| |_|  \\n                                                             \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n*/\\n\\n#define PI radians(180.)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\nmat4 rotX(float angle) {\\n\\n    float s = sin( angle );\\n    float c = cos( angle );\\n\\n    return mat4(\\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0,-s, c, 0,\\n      0, 0, 0, 1);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  #if 0\\n  return mat4(\\n    1, 0, 0, trans[0],\\n    0, 1, 0, trans[1],\\n    0, 0, 1, trans[2],\\n    0, 0, 0, 1);\\n  #else\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n  #endif\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n}\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p)\\n{\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat p1m1(float v) {\\n  return v * .5 + .5;\\n}\\n\\nfloat inRange(float v, float minV, float maxV) {\\n  return step(minV, v) * step(v, maxV);\\n}\\n\\nfloat at(float v, float target) {\\n  return inRange(v, target - 0.1, target + 0.1);\\n}\\n\\nfloat hashp(float p) {\\n  return m1p1(hash(p));\\n}\\n\\n\\n#define SEGS 16.\\nvoid main() {\\n  float pointsPerSphere = SEGS * (SEGS * 0.5) * 6.;\\n  float pointsPerPair = pointsPerSphere * 2.;\\n  float sphereId = floor(vertexId / pointsPerSphere);\\n  float pairId = floor(vertexId / pointsPerPair);\\n  float numPairs = floor(vertexCount / pointsPerPair);\\n  float su = pairId / numPairs;\\n  \\n  float v = mod(vertexId, pointsPerSphere);\\n  float vertex = mod(v, 6.);\\n  v = (v-vertex)/6.;\\n  float a1 = mod(v, SEGS);\\n  v = (v-a1)/SEGS;\\n  float a2 = v-(SEGS / 4.);\\n  \\n  float a1n = (a1+.5)/SEGS*2.*PI;\\n  float a2n = (a2+.5)/SEGS*2.*PI;\\n  \\n  a1 += mod(vertex,2.);\\n  a2 += vertex==2.||vertex>=4.?1.:0.;\\n  \\n  a1 = a1/SEGS*2.*PI;\\n  a2 = a2/SEGS*2.*PI;\\n  \\n  vec3 pos = vec3(cos(a1)*cos(a2),sin(a2),sin(a1)*cos(a2));\\n  vec3 norm = vec3(cos(a1n)*cos(a2n),sin(a2n),sin(a1n)*cos(a2n));\\n\\n  /*\\n  float t = time * 0.1;\\n  pos.xz  *= mat2(cos(t),sin(t),-sin(t),cos(t));\\n  pos.yz  *= mat2(cos(t),sin(t),-sin(t),cos(t));\\n  norm.xz *= mat2(cos(t),sin(t),-sin(t),cos(t));\\n  norm.yz *= mat2(cos(t),sin(t),-sin(t),cos(t));\\n  */\\n  \\n  float light = 0.5 + 0.5 * dot(norm, normalize(vec3(1.1, 2.0, -2.0)));\\n  float snd0 = texture2D(sound, vec2(su * 0.2, 0.0)).a;\\n  /*\\n  #define NUM_SAMPLES 8\\n  float csnd = 0.;\\n  for (int i = 0; i < NUM_SAMPLES; ++i) {\\n    csnd += texture2D(sound, vec2(0.05, float(i) / float(NUM_SAMPLES) * 0.1)).a;\\n  }\\n  csnd /= float(NUM_SAMPLES);\\n  */\\n  float csnd = 0.;\\n  float cangle = time * m1p1(hash(pairId)) * 2. + csnd * PI * 2.;\\n  float c = cos(cangle);\\n  float s = sin(cangle);\\n  float r = 2.;\\n  vec3 cameraPos    = vec3(c * r, 1.* sin(time * 0.57), s * r);\\n  vec3 cameraTarget = vec3(0, 0, 0);\\n  vec3 cameraUp     = vec3(0, 1, 0);\\n  float back = 1. - mod(sphereId, 2.);\\n  vec3 center = vec3(hashp(pairId * 0.43), hashp(pairId * 1.39), hashp(pairId * 2.11));\\n  \\n  float aspect = resolution.x / resolution.y;\\n  mat4 cam = lookAt(cameraPos, cameraTarget, cameraUp);\\n  mat4 m = persp(radians(45.), aspect, 0.1, 100.);\\n  m *= inverse(cam);\\n  m *= trans(center);\\n  m *= uniformScale(mix(0.25, 0.6, hash(pairId * 0.37)) * pow(snd0, 2.)) ;\\n  \\n  vec4 cp = m * vec4(pos, 1);\\n  \\n  vec4 cn = m * vec4(center, 1);\\n  vec2 cclip = (cn / cn.w).xy;\\n  vec2 eclip = (cp / cp.w).xy;\\n  vec2 dir = normalize(eclip - cclip) / vec2(aspect, 1) * back;\\n  \\n  gl_Position = vec4(eclip + dir * 0.04, back * 0.1, 1);\\n  \\n  \\n  float hue = mix(0.55, 0.65, hash(pairId));\\n  float sat = mix(0.4, 0.7, hash(pairId * 6.131));\\n  float val = light;\\n  v_color = vec4(\\n      mix(vec3(1), vec3(0), step(0.5, back)), 1);\\n}\"}",
  "screenshotURL": "data/images/images-wf3ynpo84zmn6hf0r-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "374"
  },
  "likes": {
    "$numberInt": "6"
  },
  "revisionId": "zB2LNu3iNdR3ZTRoY"
}