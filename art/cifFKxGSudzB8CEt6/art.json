{
  "_id": "cifFKxGSudzB8CEt6",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1504258872421"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1504258872421"
    }
  },
  "origId": null,
  "name": "cube sym",
  "notes": "",
  "rank": {
    "$numberDouble": "1.829351219730129"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":20000,\"mode\":\"LINES\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,1,1,1],\"shader\":\"\\n//KDrawmode=GL_TRIANGLE_STRIP\\n#define parameter0 30.//KParameter0 10.>>70.\\n#define parameter1 10.//KParameter1 0.>>100.\\n#define parameter2 10.//KParameter2 0.>>100.\\n#define parameter3 0.//KParameter3 0.>>100.\\n#define parameter4 2.//KParameter4 2.>>30.\\n\\n#define HPI 1.570796326795\\n#define PI   3.1415926535898\\n\\nvec3 hashv3(vec3 _v) {\\n    return fract(sin(_v * vec3(43758.5453123, 12345.6789012,76543.2109876)));\\n}\\n\\nvec3 rotX(vec3 _v, float _rad) {\\n    vec2 f = sin(vec2(_rad, _rad + HPI));\\n    vec3 r = _v;\\n    r.y = _v.y * f.y + _v.z * -f.x;\\n    r.z = _v.y * f.x + _v.z *  f.y;\\n    return r;\\n}\\n\\nvec3 rotY(vec3 _v, float _rad) {\\n    vec2 f = sin(vec2(_rad, _rad + HPI));\\n    vec3 r = _v;\\n    r.x =  _v.x *  f.y + _v.z *  f.x;\\n    r.z =  _v.x * -f.x + _v.z *  f.y;\\n    return r;\\n}\\n\\n\\nvec3 rotZ(vec3 _v, float _rad) {\\n    vec2 f = sin(vec2(_rad, _rad + HPI));\\n    vec3 r = _v;\\n    r.x =  _v.x *  f.x + _v.y * f.y;\\n    r.y =  _v.x * -f.y + _v.y * f.x;\\n    return r;\\n}\\n\\nmat4 ROTZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nvec4 perspective(vec3 _v, float _fov, float _near, float _far, vec2 _res) {\\n    vec4 r = vec4(_v, -_v.z);\\n    r.xy *= vec2(_res.y / _res.x, 1.0) / tan(radians(_fov * 0.5));\\n    r.z = (-_v.z * (_far + _near) - 2.0 * _far * _near) / (_far - _near);\\n    return r;\\n}\\n\\nvec3 lookAt(vec3 _v, vec3 _eye, vec3 _look, vec3 _up) {\\n    vec3 z = normalize(_eye - _look);\\n    vec3 x = normalize(cross(_up, z));\\n    vec3 y = cross(z, x);\\n    vec4 r = mat4(x.x, y.x, z.x, 0.0, x.y, y.y, z.y, 0.0, x.z, y.z, z.z, 0.0, 0.0, 0.0, 0.0, 1.0) *mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -_eye.x, -_eye.y, -_eye.z, 1.0)* vec4(_v, 1.0);\\n    return r.xyz;\\n}\\n\\n\\n\\n#define kShapeVertexCount 36.0\\n#define kVertexPerShape 6.0\\n\\n\\nvec3 shapeVertex(float _vId, out vec4 _nI)\\n{\\n    float faceId = floor(_vId / kVertexPerShape);\\n    float vtxId = mod(_vId, kVertexPerShape);\\n    vec2 fp;\\n    vec3 v;\\n    \\n    if(vtxId <= 1.0) {\\n        fp = vec2(1.0, 1.0);\\n    }\\n    else if(vtxId == 2.0) {\\n        fp = vec2(-1.0, 1.0);\\n    }\\n    else if(vtxId == 3.0) {\\n        fp = vec2(1.0, -1.0);\\n    }\\n    else {\\n        fp = vec2(-1.0, -1.0);\\n    }\\n    \\n    if(faceId == 0.0) {\\n        // front\\n        v = vec3(fp.x, fp.y, 1.0);\\n        _nI = vec4(0.0, 0.0, 1.0, faceId);\\n    }\\n    else if(faceId == 1.0) {\\n        // back\\n        v = vec3(-fp.x, fp.y, -1.0);\\n        _nI = vec4(0.0, 0.0, -1.0, faceId);\\n    }\\n    else if(faceId == 2.0) {\\n        // top\\n        v = vec3(fp.x, 1.0, -fp.y);\\n        _nI = vec4(0.0, 1.0, 0.0, faceId);\\n    }\\n    else if(faceId == 3.0) {\\n        // bottom\\n        v = vec3(fp.x, -1.0, fp.y);\\n        _nI = vec4(0.0, -1.0, 0.0, faceId);\\n    }\\n    else if(faceId == 4.0) {\\n        // right\\n        v = vec3(-1.0, fp.y, -fp.x);\\n        _nI = vec4(-1.0, 0.0, 0.0, faceId);\\n    }\\n    else {\\n        // left\\n        v = vec3(1.0, fp.y, fp.x);\\n        _nI = vec4(1.0, 0.0, 0.0, faceId);\\n    }\\n    \\n    return v;\\n}\\n\\n\\n\\n\\n\\nvec3 shade(vec3 _eye, vec3 _p, vec3 _n, vec3 _dfscol, float _amb, vec2 _spec) {\\n    vec3 rgb;\\n    vec3 lit = normalize(vec3(1.0, 1.0, 4.0));\\n    \\n    float diffuse = max(0.0, dot(_n, lit)) * (1.0 - _amb) + _amb;\\n    \\n    vec3 h = normalize(normalize(_eye - _p) + lit);\\n    float specular = 0.0;\\n    if(diffuse > 0.0) {\\n        specular = max(0.0, pow(dot(_n, h), _spec.x));\\n    }\\n    \\n    rgb = diffuse * _dfscol + specular * _spec.y;\\n    \\n    return rgb;\\n}\\n\\nvec3 formation(vec2 _touchPos, vec3 _a, float _t) {\\n    \\n    return vec3( _touchPos.x,  _touchPos.y, _a.z-1.5);\\n}\\n\\nvoid main() {\\n  \\n    float symCount = parameter4;\\n  \\n    float fVertexId = mod(vertexId,vertexCount/symCount);\\n  \\n    float vertexCountToUse = vertexCount;\\n    float vertexIdToUse = mod(fVertexId, vertexCountToUse);\\n    \\n    float shapeCount = floor(vertexCountToUse / kShapeVertexCount);\\n    float shapeId = floor(fVertexId / kShapeVertexCount);\\n    float shapeVertexId = mod(fVertexId, kShapeVertexCount);\\n    \\n    vec3 color;\\n    \\n    float t = shapeId / (shapeCount);\\n    \\n    float aspect = resolution.x / resolution.y;\\n    \\n    vec4 cbNi;\\n    vec3 cubep = shapeVertex(shapeVertexId, cbNi) * parameter0/100.;\\n    \\n    vec3 cubeRot = vec3(parameter1,parameter2,parameter3) * time/10.;\\n    \\n    cubep = rotX(rotY(rotZ(cubep, cubeRot.z), cubeRot.y), cubeRot.x);\\n    \\n  cubep.x += 0.3;\\n  /*\\n   if(vertexId>vertexCount/2.)\\n   {\\n     cubep.x = -cubep.x;\\n   }\\n  */\\n  /*\\n  float shapeId = floor(vertexId/ (vertexCount/symCount));\\n  mat4 rot = ROTZ(shapeId*2.*PI/rotationCout);\\n  vec4 fpos = vec4((vec4(pos, 1)).xyz, 1);\\n  */\\n    cbNi.xyz = rotX(rotY(rotZ(cbNi.xyz, cubeRot.z), cubeRot.y), cubeRot.x);\\n    \\n    vec3 eye = vec3(0.0, 0.0, 3.0);\\n    \\n    color = shade(eye, cubep, cbNi.xyz, vec3(1.,1.,1.), 0.1, vec2(64.0, 0.8));\\n    \\n    vec3 p = lookAt(cubep, eye, vec3(0.0), vec3(0.0, 1.0, 0.0));\\n    gl_Position = perspective(p, 60.0, 0.1, 10.0, resolution);\\n    gl_PointSize = 20.0;\\n    \\n    v_color = vec4(color, 1.0);\\n    \\n}\\n\"}",
  "screenshotURL": "data/images/images-h1l72659gnan00eyg-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "3"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "c5JEnLbCezcwGFnhu"
}