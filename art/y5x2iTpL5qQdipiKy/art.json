{
  "_id": "y5x2iTpL5qQdipiKy",
  "owner": {
    "_id": "oCanjNxeHcQ7gDPmW",
    "createdAt": {
      "$date": "1505499213122"
    },
    "profile": {
      "name": "Zug Zwang",
      "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg"
    },
    "username": "zug"
  },
  "createdAt": {
    "$date": "1571827696324"
  },
  "modifiedAt": {
    "$date": "1571827696324"
  },
  "origId": "G6MPufoeDCrfmHjqf",
  "name": "maggg",
  "notes": "",
  "rank": "1.6704220397317064",
  "private": false,
  "unlisted": false,
  "username": "zug",
  "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "http://soundcloud.com/themusicofma/japanese-bones-royalston-remix-across-the-city-and-into-your-remix",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/* thank you GMAN! */\n\n//KDrawmode=GL_TRIANGLES\n#define kp1 1.//KParameter 0.>>10.\n#define kp2 2.//KParameter 0.>>5.\n#define kp3 -.5//KParameter -4.>>22.\n#define P4  1.//KParameter -1.>>8.\n//KVertices_Number=10000\n\n#define PI radians(222.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, -1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = .3 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 3., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, .71);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis)*P4;\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0.201/sin(kp1*snd),\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye-kp3+snd), 2);  \n  #endif\n  \n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 4.3137*kp3));\n\treturn fract(p2.x * p2.y * 95.4337)*12.;\n}\n\n// times 2 minus 1\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// times .5 plus .5\nfloat t5p5(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float u = ux / numEdgePointsPerCircle;\n  float v = mix(inner, 1., vy);\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float s = sin(a);\n  float c = cos(a);\n  float x = c * v;\n  float y = s +v-s;\n  float z = 0.;\n  pos = vec3(x, y, z-0.25)*s;  \n}\n\n\n#define CUBE_POINTS_PER_FACE 6.\n#define FACES_PER_CUBE 6.\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\n  float sideId = mod(quadId, 3.);\n  float flip   = mix(1., -1., step(1.5, quadId));\n  // 0 1 2  1 2 3\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\n  float a = pointId * PI * 2.5*kp3 / 4. + PI * 3.25;\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\n  vec3 n = vec3(0, 1, 0) * flip;\n  float lr = mod(sideId, 3.);\n  float ud = step(2., sideId);\n  mat4 mat = rotX(lr * PI * 1.5);\n  mat *= rotZ(ud * PI * 0.4);\n  position = (mat * vec4(p,2)).xyz;\n  normal = (mat * vec4(n, 0)).xyz;\n}\n\n#if 1\nvoid main() {\n  float pointId = vertexId;  \n float vertexCount = 16677. *kp1;\n  vec3 pos;\n  vec3 normal;\n  getCubePoint(pointId, pos, normal);\n  float cubeId = floor(pointId / 36.);\n  float numCubes = floor(vertexCount / 36.);\n  float down = floor(sqrt(numCubes));\n  float across = floor(numCubes / down);\n  \n  float cx = mod(cubeId, across);\n  float cy = floor(cubeId / across);\n  \n  float cu = cx / (across - 1.);\n  float cv = cy / (down + 1.3);\n  \n  float ca = cu * 2. - 1.;\n  float cd = cv * 2. - 1.;\n  \n  float snd = texture2D(sound, vec2(mix(0.42, 0.3, abs(atan(ca, cd)) / PI), length(vec2(ca,cd))) * .1).a;\n \n  float tm = time * 0.31;\n  float r = mix(1.0, .60, snd);\n  mat4 mat = persp(radians(60.0), resolution.x / resolution.y, 0.1, 1000.0);\n  vec3 eye = vec3(cos(tm) * 1.3, sin(tm * 1.5*kp2) * .91 + 0.5, sin(tm) * 1.) * r;\n  vec3 target = vec3(-eye.x, -0.4, -eye.z*.76) * 8.5;\n  vec3 up = vec3(0,0.6,0);\n  \n  mat *= cameraLookAt(eye, target, up);\n  mat *= trans(vec3(ca, 0, cd) * 2.);\n  mat *= rotX(pow(snd + .3, 5.) * 2. + abs(ca) * 7.);\n  mat *= rotZ(pow(snd + .8, 5.5) * 1. + abs(cd) * .5);\n  float sc = mix(0.02, 0.25, pow(snd +.1, 5.));\n  mat *= scale(vec3(0.3 * sc, sc, 0.31 * sc));\n  \n  \n  gl_Position = mat * vec4(pos, 1);\n  vec3 n = normalize((mat * vec4(normal, 0)).xyz);\n  \n  vec3 lightDir = normalize(vec3(0.3, 0.4, -0.7));\n  \n\n  float hue = floor(time) * 0.5 + floor(time * 0.42 - length(vec2(ca, cd)) / 1.0) * 0.5; //abs(ca * cd) * 2.;\n  float sat = pow(snd + 0.4, 15.);\n  float val = mix(1.1, 0.5, abs(cd));\n  vec3 color = hsv2rgb(vec3(hue*0.4, sat*snd, val*snd));\n  v_color = vec4(color * (dot(n, lightDir) * 0.165 + 0.5), pow(snd, 3.*P4));\n  v_color.rgb /= v_color.a;\n}\n#endif\n\n"
  },
  "screenshotURL": "data/images/images-mromo8j39eqa9ohuo-thumbnail.jpg",
  "hasSound": true,
  "views": "103",
  "likes": "0",
  "revisionId": "5nqJbwRtWpcGCq75e"
}