{
  "_id": "dtZMYXvfSW4gKJ7Mr",
  "owner": {
    "_id": "a8EF7kNs83hCEsJN6",
    "createdAt": {
      "$date": {
        "$numberLong": "1695812101151"
      }
    },
    "username": "jpaquim",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/374b09dacab582ca17818a391b59a214?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1695824834300"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1695824834300"
    }
  },
  "origId": null,
  "name": "lesson5",
  "notes": "",
  "rank": {
    "$numberDouble": "1.7394678134327677"
  },
  "private": true,
  "unlisted": false,
  "username": "jpaquim",
  "avatarUrl": "https://secure.gravatar.com/avatar/374b09dacab582ca17818a391b59a214?default=retro&size=200",
  "settings": "{\"num\":7825,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/jpaquim/synth-jam-2\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define PI radians(180.)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0., 1.));\\n  vec4 K = vec4(1., 2. / 3., 1. / 3., 3.);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6. - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0., 1.), c.y);\\n}\\n\\nmat4 rotX(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0, -s, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotY(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\nvec2 getCirclePoint(float id, float numCircleSegments) {  \\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\\n  \\n  float angle = ux / numCircleSegments * PI * 2.;\\n  float c = cos(angle);\\n  float s = sin(angle);\\n  \\n  float radius = vy + 1.;\\n  \\n  float x = c * radius;\\n  float y = s * radius;\\n  \\n  return vec2(x, y);\\n}\\n\\nvoid main() {\\n  // float numCircleSegments = 20.;\\n  // float numCircleSegments = 6.;\\n  // float numCircleSegments = 36.;\\n  float numCircleSegments = 12.;\\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\\n  \\n  float numPointsPerCircle = numCircleSegments * 6.;\\n  float circleId = floor(vertexId / numPointsPerCircle);\\n  float numCircles = floor(vertexCount / numPointsPerCircle);\\n  \\n  float sliceId = floor(vertexId / 6.);\\n  float oddSlice = mod(sliceId, 2.);\\n  \\n  float down = floor(sqrt(numCircles));\\n  float across = floor(numCircles / down);\\n  \\n  float x = mod(circleId, across);\\n  float y = floor(circleId / across);\\n  \\n  float u = x / (across - 1.);\\n  float v = y / (across - 1.);\\n  \\n  float xoff = 0.;\\n  // float xoff = sin(time + y * .2) * .1;\\n  float yoff = 0.;\\n  // float yoff = sin(time + x * .3) * .2;\\n  \\n  float ux = u * 2. - 1. + xoff;\\n  float vy = v * 2. - 1. + yoff;\\n  \\n  float su = abs(u - .5) * 2.;\\n  float sv = abs(v - .5) * 2.;\\n  float au = abs(atan(su, sv)) / PI;\\n  float av = length(vec2(su, sv));\\n  float snd = texture2D(sound, vec2(au * .05, av * .25)).a;\\n  \\n  float aspect = resolution.x / resolution.y;\\n  float sc = pow(snd + .2, 5.) * mix(1., 1.1, oddSlice);\\n  \\n  sc *= 20. / across;\\n  \\n  vec4 pos = vec4(circleXY, 0, 1);\\n  mat4 mat = ident();\\n  mat *= scale(vec3(1, aspect, 1));\\n  mat *= rotZ(time * .1);\\n  mat *= trans(vec3(ux, vy, 0) * 1.3);\\n  mat *= rotZ(snd * 20. * sign(ux));\\n  mat *= uniformScale(.03 * sc);\\n  \\n  gl_Position = mat * pos;\\n  \\n  float pump = step(.8, snd);\\n  // float hue = 1.;\\n  // float hue = u * .1 + sin(time + v * 20.) * .05;\\n  float hue = u * .1 + snd * .2 + time * .1;\\n  float sat = 1.;\\n  // float sat = 1. - av;\\n  // float sat = mix(1., -10., av);\\n  // float sat = mix(0., 1., pump);\\n  // float sat = mix(.5, 1., pump);\\n  // float val = 1.;\\n  // float val = sin(time + u * v * 20.) * .5 + .5;\\n  // float val = pow(snd + .2, 5.);\\n  float val = mix(.4, pow(snd + .2, 5.), pump);\\n  \\n  hue = hue + pump * oddSlice * .5 + pump * .33;\\n  val += oddSlice * pump;\\n  \\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\\n}\"}",
  "screenshotURL": "data/images/images-pleifqnnrf1pl2seh-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "ePs32J8vAhzXNffFc"
}