{
  "_id": "yuDv9cWYxgd33kjQ7",
  "owner": {
    "_id": "MqPTcXoEuGA34rGui",
    "createdAt": {
      "$date": {
        "$numberLong": "1497270876730"
      }
    },
    "username": "zugzwang404",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/fec4f7164a172e58419d6bff6d7368b3?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1498384313557"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1498384313557"
    }
  },
  "origId": "TFoeAMv4JnW8NxM4N",
  "name": "incId for k",
  "notes": "",
  "rank": {
    "$numberDouble": "1.3617782137068373"
  },
  "private": false,
  "unlisted": true,
  "username": "zugzwang404",
  "avatarUrl": "https://secure.gravatar.com/avatar/fec4f7164a172e58419d6bff6d7368b3?default=retro&size=200",
  "settings": "{\"num\":98784,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/featurepr/morganj-boothed-like-the-best-feature088\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,1,1,1],\"shader\":\"\\n/*\\n\\nWait for the music to pump \\n\\n*/\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n//KDrawmode=GL_TRIANGLES\\n\\n\\n#define parameter0 3.//KParameter0 0.>>1.\\n#define parameter1 1.//KParameter1 0.1>>1.\\n#define parameter2 1.//KParameter2 0.>>1.\\n#define parameter3 1.//KParameter3 0.5>>3.\\n#define parameter4 1.//KParameter4 0.>>1.\\n#define parameter5 1.//KParameter5 0.>>3.\\n#define parameter6 1.//KParameter6 0.>>2.\\n#define parameter7 1.//KParameter7 0.>>2.\\n\\n\\n\\n\\n#define PI radians(180.)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.4, tan(3.0 / 5.)));\\n  vec4 K = vec4(1.0* parameter2, 2.0 / 3.0 / parameter1, 0.0 / 4.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * (parameter5 - 6.0) - K.www);\\n return c.z * mix(K.xxx, clamp(sin(p * c * .2 ) + K.xxx, 0.4, parameter7), c.y);\\n}\\n\\nmat4 rotX(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      1, parameter2, 0, 2,\\n      parameter3, -c, -s, 1,\\n      0, -s, c, 0,\\n      0, parameter4, 0, 1);  \\n}\\n\\nmat4 rotY(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians * 2.);\\n  \\t\\n    return mat4( \\n      -c, 0, 2. - s, s * c,\\n      0.2, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 1, \\n      s, -1, 0, 1,\\n      0, s*parameter4, 1, 0,\\n      0, 0, 0, 0); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 2, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 4., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a03 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0.2,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 75.4337);\\n}\\n\\n// times 2 minus 1\\nfloat t2m1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\n// times .5 plus .5\\nfloat t5p5(float v) {\\n  return v * 0.5 + 0.5;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  float vy = mod(floor(id / (2. * parameter3 )) + floor(id / 3.), 2.); // change that 3. for cool fx\\n  float u = ux / numEdgePointsPerCircle;\\n  float v = mix(inner, 1., vy);\\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\\n  float s = sin(a);\\n  float c = cos(a - v);\\n  float x = c * v;\\n  float y = s * v;\\n  float z = 0.;\\n  pos = vec3(x, y, z);  \\n}\\n\\n\\n#define CUBE_POINTS_PER_FACE 8.\\n#define FACES_PER_CUBE 8.\\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\\n  float sideId = mod(quadId, 3.);\\n  float flip   = mix(1., -1., step(2.5, quadId));\\n  // 0 1 2  1 2 3\\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\\n  float a = pointId * PI * 2. / 4. + PI * 0.25;\\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\\n  vec3 n = vec3(0, 1, 0) * flip;\\n  float lr = mod(sideId, 2.);\\n  float ud = step(2., sideId);\\n  mat4 mat = rotX(lr * PI * 0.5);\\n  mat *= rotZ(ud * PI * 0.5);\\n  position = (mat * vec4(p, 1)).xyz;\\n  normal = (mat * vec4(n, 0)).xyz;\\n}\\n\\nmat4 mixm(mat4 m1, mat4 m2, float m) {\\n return mat4(\\n    mix(m1[0], m2[0], m),\\n    mix(m1[1], m2[1], m),\\n    mix(m1[2], m2[2], m),\\n    mix(m1[3], m2[3], m));\\n}\\n\\nvoid main() {\\n  float pointId = vertexId;  \\n\\n  vec3 pos;\\n  vec3 normal;\\n  getCubePoint(pointId, pos, normal);\\n  float cubeId = floor(pointId / 36.);\\n  float numCubes = floor(vertexCount / 36.);\\n  float down = floor(sqrt(numCubes) * .5);\\n  float across = floor(numCubes / down);\\n  float cv = cubeId / numCubes;\\n\\n  float uu = mod(cubeId, across);\\n  float vv = floor(cubeId / across);\\n  vec2 uv = vec2(uu, vv) / vec2(across, down);\\n  \\n//  const int hist = 10;\\n//  float s = 0.;\\n//  for (int i = 0; i < hist; ++i) {\\n//    s += texture2D(volume, vec2((2. + .5) / 4., (float(i) + .5) / soundRes.y)).a * \\n//      1.;//float(hist - i);\\n//  }\\n////  s /= float(hist * (hist - 1)) / 2.;\\n//  s /= float(hist);\\n  float s = texture2D(sound, vec2(mix(0.05, .5, hash(cubeId * .723)), 0.)).a;\\n  \\n  float tm = time *  (1. - parameter3);\\n  float rd = 9.;\\n  mat4 pmat = persp(radians(110.0), resolution.x / resolution.y, 0.1, 100.0);\\n  vec3 eye = vec3(cos(tm) * rd, sin(tm * 0.9) * rd * 0.6, sin(tm) * rd);\\n  vec3 target = vec3(0);\\n  vec3 up = vec3(0,1,0);\\n  \\n  mat4 vmat = cameraLookAt(eye, target, up); \\n \\n  mat4 mat = rotY(time * .1);\\n  mat *= lookAt(\\n    normalize(vec3(t2m1(hash(cubeId * 0.123)), t2m1(hash(cubeId * 1.632)), t2m1(hash(cubeId * 0.327)))) * \\n    mix(20., 24.1, s),\\n    vec3(sin(time * 4.), sin(time * 3.17), 0.) * 10. * s,\\n    vec3(0, 1, 0));\\n  \\n  mat4 mvmat = vmat * mat;\\n  \\n  vec3 npos = normalize(mvmat[3].xyz);\\n  \\n  float hue = mix(.0, time * 10., step(.8, s));\\n  float sat = mix(-1.0, 2.2, s);\\n  float val = 1.;//mix(1., 1., step(0.8, s));\\n\\n  \\n  float areaS = 1. - (npos.z * .5 + .5);\\n  mat4 smat = scale(vec3(2, 2, pow(s, 5.) * 100. * areaS + 0.01));\\n  smat *= uniformScale(0.5);\\n  smat *= trans(vec3(0, 0, -1));\\n  \\n  \\n  gl_Position = pmat * mvmat * smat * vec4(pos, 1);\\n  vec3 n = normalize((mat * vec4(normal, 0)).xyz);\\n  \\n  vec3 lightDir = normalize(vec3(1, 0.1, 1));\\n\\n  vec3 color = hsv2rgb(vec3(hue, sat, val));\\n  v_color = vec4(color * (dot(n, lightDir) * 0.5 + 0.5), 1);\\n  v_color.a = mix(0., 2., s);\\n}\\n\\n\"}",
  "screenshotURL": "data/images/images-tqopftfc5r6pp1yfv-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "QhJTjAQ23nmNaBdYp"
}