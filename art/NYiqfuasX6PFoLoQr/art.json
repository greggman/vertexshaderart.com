{
  "_id": "NYiqfuasX6PFoLoQr",
  "owner": {
    "_id": "cZNAKnfHAY6mZAn2h",
    "createdAt": {
      "$date": {
        "$numberLong": "1598366337757"
      }
    },
    "username": "morimea",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/8ff4b4cacdf52d8d31a020cd244c5269?default=retro&size=200",
      "info": "https://www.shadertoy.com/user/morimea"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1615908564541"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1616193476841"
    }
  },
  "origId": null,
  "name": "sphere df sphere",
  "notes": "sphere difference sphere approximation",
  "rank": {
    "$numberDouble": "1.246965383251837"
  },
  "private": false,
  "unlisted": true,
  "username": "morimea",
  "avatarUrl": "https://secure.gravatar.com/avatar/8ff4b4cacdf52d8d31a020cd244c5269?default=retro&size=200",
  "settings": "{\"num\":3072,\"mode\":\"TRIANGLES\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n// number of triangles == pow(2,X)*6\\n// pow(2,2)*6=24\\n// pow(2,14)*6=98304\\n// pow(2,9)*6=3072 ...etc\\n// pow(2,6)*6=384 ...etc\\n\\n// comment for union\\n#define difference\\n\\n\\nfloat sdfDifference( const float a, const float b)\\n{\\n    return max(a, -b);\\n}\\n\\nfloat sphereSDF(vec3 p, float r) {\\n    return length(p) - r;\\n}\\n\\n\\nconst float pi = 3.1415926;\\nconst float degree_to_rad = pi / 180.0;\\n\\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\\n                          vec3 lightPos, vec3 lightIntensity, vec3 N) {\\n    vec3 L = normalize(lightPos - p);\\n    vec3 V = normalize(eye - p);\\n    vec3 R = normalize(reflect(-L, N));\\n    \\n    float dotLN = dot(L, N);\\n    float dotRV = dot(R, V);\\n    \\n    if (dotLN < 0.0) {\\n        return vec3(0.0, 0.0, 0.0);\\n    } \\n    \\n    if (dotRV < 0.0) {\\n        return lightIntensity * (k_d * dotLN);\\n    }\\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\\n}\\n\\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye, vec3 norm) {\\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\\n    vec3 color = ambientLight * k_a;\\n    \\n    vec3 light1Pos = normalize(vec3(mouse.x,mouse.y,.20))*5.;\\n    vec3 light1Intensity = 5.*vec3(0.4, 0.4, 0.4);\\n    \\n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\\n                                  light1Pos,\\n                                  light1Intensity, norm);\\n      \\n    return color;\\n}\\n\\nvec3 color_phong(vec3 p, vec3 ro, vec3 nor, vec3 col){\\n    vec3 K_a = col;\\n    vec3 K_d = K_a;\\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\\n    float shininess = 12.0;\\n    \\n    col = phongIllumination(K_a, K_d, K_s, shininess, p, ro, nor);\\n    return col;\\n}\\n\\n\\nvec3 basic_light(vec3 nor){\\n  \\tvec3 li = normalize(vec3(0.5, 1.0, 1.0));\\n    float dif = clamp(dot(nor, li), 0.0, 1.0);\\n    float amb = max(0.5 + 0.5 * nor.y, 0.0);\\n  \\tvec3 col = vec3(0.88);\\n  \\treturn col*clamp(max(dif, 0.3) * amb, 0.0, 1.0);\\n}\\n\\nmat3 rotx(float a){float s = sin(a);float c = cos(a);return mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, c, s), vec3(0.0, -s, c));  }\\nmat3 roty(float a){float s = sin(a);float c = cos(a);return mat3(vec3(c, 0.0, s), vec3(0.0, 1.0, 0.0), vec3(-s, 0.0, c));}\\nmat3 rotz(float a){float s = sin(a);float c = cos(a);return mat3(vec3(c, s, 0.0), vec3(-s, c, 0.0), vec3(0.0, 0.0, 1.0 ));}\\n\\n\\nmat4 rotXMatrix(float theta)\\n{\\n    float cs = cos(theta);\\n    float ss = sin(theta);\\n \\n    mat4 result = \\n    mat4(vec4(1.0, 0.0, 0.0, 0.0), \\n         vec4(0.0, cs, -ss, 0.0),\\n         vec4(0.0, ss, cs, 0.0),\\n         vec4(0.0, 0.0, 0.0, 1.0) );\\n \\n    return result;\\n}\\n\\nmat4 rotYMatrix(float theta)\\n{\\n    float cs = cos(theta);\\n    float ss = sin(theta);\\n \\n    mat4 result = \\n    mat4(vec4(cs, 0.0, -ss, 0.0), \\n         vec4(0.0, 1.0, 0.0, 0.0),\\n         vec4(ss, 0.0, cs, 0.0),\\n         vec4(0.0, 0.0, 0.0, 1.0) );\\n \\n    return result;\\n}\\n\\nmat4 perspectiveMatrix(float fovYInRad, float aspectRatio)\\n{\\n    float yScale = 1.0 / tan(fovYInRad / 2.0);\\n    float xScale = yScale / aspectRatio;\\n    float zf = 100.0;\\n    float zn = 0.3;\\n\\n    float z1 = zf / (zf - zn);\\n    float z2 = -zn * zf / (zf - zn);\\n\\n    mat4 result = mat4(xScale, 0.0, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 0.0, -z1, -1., 0.0, 0.0, z2, 0.0);\\n\\n    return result;\\n}\\n\\nvec3 meshSqhere(in float id, in float split)\\n{\\n    float d = split * 2.0;\\n    float n = floor(id / 6.0);\\n    vec2 q = vec2(mod(n, d), mod(floor(n / d), d));\\n    vec2 a = q + 0.5 - split;\\n    float s = sign(a.x * a.y);\\n    float c = abs(3.0 - mod(id, 6.0));\\n    vec2 uv = vec2(mod(c, 2.0), abs(step(0.0, s) - floor(c / 2.0)));\\n    uv = floor(uv + q) / split - 1.0;\\n    if (uv.x > abs(uv.y))\\n        uv.y -= (uv.x - abs(uv.y)) * s;\\n    if (-uv.x > abs(uv.y))\\n        uv.y -= (uv.x + abs(uv.y)) * s;\\n    if (uv.y > abs(uv.x))\\n        uv.x -= (uv.y - abs(uv.x)) * s;\\n    if (-uv.y > abs(uv.x))\\n        uv.x -= (uv.y + abs(uv.x)) * s;\\n    return normalize(vec3(uv, 0.8 * (1.0 - pow(max(abs(uv.x), abs(uv.y)), 2.0)) * s));\\n}\\n\\n\\n\\nfloat map(in vec3 p)\\n{\\n    return sphereSDF(p,1.);\\n}\\n\\nvec3 calcNormal(in vec3 p)\\n{\\n    vec2 e = vec2(1.0, -1.0) * 0.002;\\n    return normalize(e.xyy * map(p + e.xyy) + e.yyx * map(p + e.yyx) + e.yxy * map(p + e.yxy) + e.xxx * map(p + e.xxx));\\n}\\n\\nvoid main()\\n{\\n  \\tvec4 sphere1 = vec4(0.,0.,0.,1.);\\n\\tvec4 sphere2 = vec4(0.,.5,0.,1.);\\n  \\n  \\n    mat4 pMatrix = perspectiveMatrix(45.0 * degree_to_rad, resolution.x / resolution.y);\\n    mat4 vMatrix = mat4(1.0);\\n    vMatrix[3].z += -3.5;\\n  \\tvMatrix[3].xyz+=sphere1.xyz;\\n  \\t\\n  \\n    float split = floor(sqrt(floor(vertexCount / 6.0)));\\n    split = floor(split / 2.0);\\n    vec3 p_smooth = meshSqhere(vertexId, split);\\n  \\tvec3 p_flat = meshSqhere(floor(vertexId/3.)*3., split);\\n\\n    vec3 nor_smooth = calcNormal(p_smooth);\\n  \\tvec3 nor_flat = calcNormal(p_flat);\\n    //vec3 col = basic_light(nor_smooth);\\n\\n  \\tfloat d1=sphereSDF(p_smooth-sphere1.xyz,sphere1.w);\\n    float d2=sphereSDF(p_smooth-sphere2.xyz,sphere2.w);\\n  \\tfloat d=sdfDifference(d1,d2);\\n  \\n  \\n  //sphere2\\n    mat4 pMatrix2 = perspectiveMatrix(45.0 * degree_to_rad, resolution.x / resolution.y);\\n    mat4 vMatrix2 = mat4(1.0);\\n    vMatrix2[3].z += -3.5;\\n  \\tvMatrix2[3].xyz+=sphere2.xyz;\\n  #ifdef difference\\n    vMatrix2*=rotYMatrix(1.*pi);\\n  #endif\\n  \\t\\n    float split2 = floor(sqrt(floor(vertexCount / 6.0)));\\n    split2 = floor(split2 / 2.0);\\n    vec3 p_smooth2 = meshSqhere(vertexId, split2)*rotx(0.5);\\n  \\tvec3 p_flat2 = meshSqhere(floor(vertexId/3.)*3., split2)*rotx(0.5);\\n  #ifdef difference\\n    p_smooth2*=-1.;\\n    p_flat2*=-1.;\\n  #endif\\n\\n    vec3 nor_smooth2 = calcNormal(p_smooth2);\\n  \\n  /*\\n    if(d>0.001){\\n      gl_Position = pMatrix2 * vMatrix2 * vec4(p_smooth2, 1.0);\\n      p_smooth=p_smooth2;\\n      p_flat=p_flat2;\\n      nor_smooth=nor_smooth2;\\n    }\\n    else {\\n      gl_Position = pMatrix * vMatrix * vec4(p_smooth, 1.0);\\n    }\\n  */\\n  \\n  \\tgl_Position = pMatrix2 * vMatrix2 * vec4(p_smooth2, 1.0);\\n    gl_Position = min(gl_Position,pMatrix * vMatrix * vec4(p_smooth, 1.0));\\n  \\n  \\tvec3 col=vec3(0.);\\n    if(gl_Position.x<-.15){\\n      vec3 nor = calcNormal(p_flat);\\n      col=color_phong(p_flat,vec3(0.,0.,10.), nor, (nor_flat+1.)/2.);\\n      col *= 0.65 + .35 * floor(mod(floor(vertexId / 3.), 2.));\\n    }else{\\n      vec3 nor = calcNormal(p_smooth);\\n      col=color_phong(p_smooth,vec3(0.,0.,10.), nor, (nor_smooth+1.)/2.);\\n    }\\n  \\n  \\n    v_color = vec4(col, 1.0);\\n}\"}",
  "screenshotURL": "data/images/images-ip6tbvgojtbqp91jt-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "19"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "mZXMqiCocfonBkBqF"
}