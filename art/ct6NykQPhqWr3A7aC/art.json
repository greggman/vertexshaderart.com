{
  "_id": "ct6NykQPhqWr3A7aC",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1538862773390"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1594507096480"
    }
  },
  "origId": "YSrCe2ZHmwiB2d6Kz",
  "name": "mountains",
  "notes": "",
  "rank": {
    "$numberDouble": "1.794424159451506"
  },
  "private": false,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/guigoo-official/acido",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n//Simple study for glslsandbox fragment shader to vertexshaderart vertex shader conversion - WORK IN PROGRESS\n//inspired from http://glslsandbox.com/e#49260.0\n//2 KParameters added for import and control in K Machine (https://itunes.apple.com/app/k-machine/id1095617380?mt=8)\n\n#define ITERS 8.\n\n#define speedFactor 25.//KParameter 1>>100.0\n#define soundFactor 5.0//KParameter 5.0>>30.\n#define sizeFactor 1.0//KParameter 0.2>>2.\n\nvoid main ()  \n{\n  \n  float maxFinalSquareSideSize = floor(sqrt(vertexCount));\n  float finalMaxVertexCount = pow(maxFinalSquareSideSize,2.);\n  \n  float maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\n  \n  //vertexResolution.x = number of elements in a line as x value for local resolution\n  //vertexResolution.y = number of possible lines with the given vertexCount\n  vec2 vertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\n  \n  //Calculate the final number of elements\n  float finalVertexCount = vertexResolution.x*vertexResolution.y;\n  \n  //and adjust finalVertexId\n  float finalVertexId = mod(vertexId,finalVertexCount);\n  \n  //Calculate the position of the elements based on their finalVertexId\n  //simfragCoord <=> gl_FragCoord of the fragment shader\n  \n  vec2 simfragCoord = vec2(mod(finalVertexId, vertexResolution.x),floor(finalVertexId / vertexResolution.x));\n  \n  //relative coordinate of the vertex (cordinates range 0. to 1.)\n  float u = (simfragCoord.x /vertexResolution.x);\n  float v = (simfragCoord.y /vertexResolution.y);\n  \n  //calculate coordinates range -1. to 1.\n \n  float fact = 2.*sizeFactor;\n  float ux = fact*(u - 0.5);\n  float vy = fact*(v - 0.5);\n  \n  //Finally set the position of each vertex of the grid\n  gl_Position = vec4(ux, vy, 0., 1.);\n\n  //Calculate the best possible pointSize to fill the screen\n  gl_PointSize = 2.*resolution.y/vertexResolution.y;\n  \n  //create the surfacePosition (glslsandbox parameter ...not used here)\n  //vec2 surfacePosition = vec2(ux,vy);\n  \n  float snd =  soundFactor*texture2D(sound, vec2(0.,  0.2)).a;\n  //snd+= +0.001*time;//add a little something to avoid total flatnes;\n  \n  //////////////////////////////////////////////////////////////////////////////////////////\n  ///Below we import fragment shader logic/code almost unmodify from glslsandbox\n  //gl_FragCoord is replaced with the new simfragCoord \n  //////////////////////////////////////////////////////////////////////////////////////////\n\n  vec2 position = vec2(simfragCoord.x, simfragCoord.y);\n  vec2 res = vec2(vertexResolution.x, vertexResolution.y);\n  vec2 fragCoord = vec2(u,v);\n  \n   vec3 d = normalize( vec3( (position.xy - res.xy * .5) / vertexResolution.y, .15));\n  \n\tvec3 p, c, f, g=d, o, y1=vec3(1.0,1.5,0.0);\n  \n \to.y = 4. + 4.8*cos((o.x=0.1)*(o.z=time * speedFactor));\n\to.x -= sin(time) + 3.0;\n\n    for( float i=.0; i<ITERS; i+=.05 ){\n        f = fract(c = o += d*i*.1); \n\tp = floor( c )*.4;\n        if( cos(p.z) + sin(p.x) > ++p.y/snd ) {\n\t    \tg = (f.y-.04*cos((c.x+c.z)*10.)>.7?y1:f.x*y1.yxz) / i;\n            break;\n        }\n    }\n    \n  \n  v_color = vec4(g,1.0);\n  \n\n}"
  },
  "screenshotURL": "data/images/images-9nv796me9ziong1hu-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "185"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "YsXn5autsgGLgQfYd"
}