{
  "_id": "z5Wj5jyFwYiwezjLv",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": 1493741221077
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": 1499104426528
  },
  "modifiedAt": {
    "$date": 1499104426528
  },
  "origId": "uPwKetxzwcL2PFZd6",
  "name": "thumpy forest - quick test",
  "notes": "",
  "rank": 1.0441256846338465,
  "private": false,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 45000,
    "mode": "TRI_STRIP",
    "sound": "https://soundcloud.com/djapsara/apsara-afterdark-031-on-frisky-radio-may-2017",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/* 🐧\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n//KDrawmode=GL_TRIANGLE_STRIP\n//KVerticesNumber=45000\n\n#define numTrackPoints 30000//KParameter0 100.>>30000.0\n#define numFunkPoints 3600.0//KParameter1 100.>>3600.0\n#define sectionsAcross 10.//KParameter2 5.>>100.0\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n// times 2 minus 1\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// times .5 plus .5\nfloat t5p5(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\nvec3 getQuadStripPoint(const float id) {\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\n  return vec3(ux, vy, 0);\n}\n\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float u = ux / numEdgePointsPerCircle;\n  float v = mix(inner, 1., vy);\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float s = sin(a);\n  float c = cos(a);\n  float x = c * v;\n  float y = s * v;\n  float z = 0.;\n  pos = vec3(x, y, z);  \n}\n\n\n#define CUBE_POINTS_PER_FACE 6.\n#define FACES_PER_CUBE 6.\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\n  float sideId = mod(quadId, 3.);\n  float flip   = mix(1., -1., step(2.5, quadId));\n  // 0 1 2  1 2 3\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\n  float a = pointId * PI * 2. / 4. + PI * 0.25;\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\n  vec3 n = vec3(0, 1, 0) * flip;\n  float lr = mod(sideId, 2.);\n  float ud = step(2., sideId);\n  mat4 mat = rotX(lr * PI * 0.5);\n  mat *= rotZ(ud * PI * 0.5);\n  position = (mat * vec4(p, 1)).xyz;\n  normal = (mat * vec4(n, 0)).xyz;\n}\n\nfloat Hash( vec2 p) {\n     vec3 p2 = vec3(p.xy,1.0);\n    return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*3758.5453123);\n}\n\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n     vec2 f = fract(p);\n     f *= f * (3.0-2.0*f);\n\n    return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),\n               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),\n               f.y);\n}\n\nfloat fbm(vec2 p) {\n     float v = 0.0;\n     v += noise(p*1.0)*.5;\n//     v += noise(p*2.)*.25;\n//     v += noise(p*4.)*.125;\n     return v;\n}\n\nfloat crv(float v) {\n  return fbm(vec2(v, v * 1.23));\n  //float o = sin(v) + sin(v * 2.1) + sin(v * 4.2) + sin(v * 8.9); \n  //return o / 4.;\n}\n\nvec3 fgetCurvePoint(float t) {\n//  return vec3(sin(-t), sin(t * 0.8), sin(t * 0.6));\n//  return vec3( mod(t, 1.) * 0.01, 0, mod(t, 1.));\n  return vec3(\n    crv(t),\n    crv(t + .3),\n    crv(t + .6)\n  ) * 2. - 1.;\n}  \n\nvec3 getCurvePoint(const float id) {\n  return vec3(\n    sin(id * 0.99),\n    sin(id * 2.43),\n    sin(id * 1.57));\n}\n\nconst float expand = 80.;\n\nvoid track(float vertexId, float vertexCount, float base, out vec3 pos, out vec4 color) {\n  //float sectionsAcross = 10.;\n  float halfSectionsAcross = sectionsAcross / 2.;\n  float pointsPerSection = sectionsAcross * 6.;\n  float sectionPointId = mod(vertexId, pointsPerSection);  \n  float sectionId = floor(vertexId / pointsPerSection);\n  float quadId = floor(sectionPointId / 6.);\n  float numSections = (vertexCount / pointsPerSection);\n  \n  float sideSectionId = mod(quadId, halfSectionsAcross);\n  float vert = step(halfSectionsAcross - 1.1, sideSectionId);\n  \n  float next = mod(floor(vertexId / 2.) + floor(vertexId / 3.), 2.);\n  \n  float sv = (sectionId + next) / (numSections - 1.);\n  float v = sv * 4. + base;\n  \n  float off = 0.2;\n  \n  vec3 r0 = getCurvePoint(v + off * 0.);\n  vec3 r1 = getCurvePoint(v + off * 1.);\n  vec3 r2 = getCurvePoint(v + off * 2.);\n  \n  vec3 s0 = normalize(r1 - r0);\n  vec3 s1 = normalize(r2 - r1);\n  \n  vec3 zaxis = normalize(s1 - s0);\n  vec3 xaxis = normalize(cross(s0, s1));\n  vec3 yaxis = normalize(cross(zaxis, xaxis));\n  \n  mat4 wmat = mat4(\n    vec4(xaxis, 0),\n    vec4(yaxis, 0),\n    vec4(zaxis, 0),\n    vec4(r0 * expand, 1)); \n\n  float lr = mod(vertexId, 2.);\n  float asuc = (sideSectionId + lr) / halfSectionsAcross;;\n  float s = texture2D(sound, vec2(.1, 1. - sv)).a;\n  float s2 = texture2D(sound, vec2(mix(0.05, 0.5, asuc), (1. - sv) * .4)).a;\n  \n  #if 0\n    s = .5;\n    s2 = 0.5;\n  #endif\n  \n  float side = mix(-1., 1., step(halfSectionsAcross, quadId));\n  float su = (sideSectionId + lr * s) / halfSectionsAcross;\n\n  float width = 1.; \n  //float width = mix(1., 2., pow(s2, .5));\n  vec3 pre = mix(\n    vec3(su * halfSectionsAcross * side * width, 0, 0), \n    vec3((halfSectionsAcross - 1.) * side * width, lr * 5. * s, 0), \n    vert); \n  pos = (wmat * vec4(pre * .4, 1)).xyz;\n  vec3 nrm = mix(vec3(0, 1, 0), vec3(sign(pos.x), 0, 0), vert);    \n  \n  float hue = asuc * .1 + pow(s2, 5.) + time * 0.1;\n  float sat = mix(1.2, 0.2, vert);// + (sin(sv * 20.) * 1.5);\n  float val = mix(0.25, 1., pow(s2 + .4, 15.) * pow(s + .4, 15.)) + abs(sin(sv * 40.) * .25);\n  \n  float pump = step(0.5, s2);\n  sat = mix(sat, 1., vert * pump);\n  val = mix(val, 1., vert * pump);\n  hue = mix(hue, hue + .15, vert * pump);\n  \n  //hue += sign(pre.x) * .25;\n  \n  vec3 n = normalize((wmat * vec4(nrm, 0)).xyz);\n  \n  vec3 lightDir = normalize(vec3(-0.3, .3, 0.2));\n\n  vec3 c = hsv2rgb(vec3(hue, sat, val));\n  color = vec4(c * mix(0.5, 1.0, abs(dot(n, lightDir))), 1);\n  \n  //color.rgb = zaxis * .5 + .5; \n  color.a = 1. - pow(sv, 20.0);\n  color.rgb *= color.a;\n}\n\nvoid funk(const float vertexId, float vertexCount, float base, out vec3 pos, out vec4 color) {\n  //float sectionsAcross = 30.;\n  float halfSectionsAcross = sectionsAcross / 2.;\n  float pointsPerSection = sectionsAcross * 6.;\n  float sectionPointId = mod(vertexId, pointsPerSection);  \n  float sectionId = floor(vertexId / pointsPerSection);\n  float quadId = floor(sectionPointId / 6.);\n  float numSections = (vertexCount / pointsPerSection);\n  \n  float sideSectionId = mod(quadId, halfSectionsAcross);\n  float sideV = sideSectionId / halfSectionsAcross;\n  \n  float lr = mod(vertexId, 2.);\n  float next = mod(floor(vertexId / 2.) + floor(vertexId / 3.), 2.);\n  float side = mix(-1., 1., step(halfSectionsAcross, quadId));\n  \n  float sv = (sectionId + next * .4) / (numSections - 1.);\n  float v = sv * .2 + base + .1;\n  \n  float s = texture2D(sound, vec2(.1, mix(0.9, 1.0, (1. - sv)))).a;\n  float s2 = texture2D(sound, vec2(mix(0.05, 0.5, sideV), (1. - sv) * .4)).a;\n    \n  float off = 0.2;\n  \n  vec3 r0 = getCurvePoint(v + off * 0.);\n  vec3 r1 = getCurvePoint(v + off * 1.);\n  vec3 r2 = getCurvePoint(v + off * 2.);\n  \n  vec3 s0 = normalize(r1 - r0);\n  vec3 s1 = normalize(r2 - r1);\n  \n  vec3 tzaxis = normalize(s1 - s0);\n  vec3 txaxis = normalize(cross(s0, s1));\n  vec3 tyaxis = normalize(cross(tzaxis, txaxis));\n  \n  const float height = .05;\n  const float period = 2.;\n  const float speed = 2.;\n  const float lPeriod = 0.5;\n  \n  float sx = (sideV + lr / halfSectionsAcross);\n  float bt = sx * period + time * speed + sv * lPeriod;\n  float bh = sin(bt) * height;\n  \n  vec3 foff = tyaxis * bh;// - tyaxis * height * 0. + txaxis * side * sin(sx * PI) * 0.;\n  float unit = 1. / halfSectionsAcross;\n  \n  float y0 = sin((sx + unit * 1. + sv * lPeriod) * period + time * speed);\n  float y1 = sin((sx + unit * 2. + sv * lPeriod) * period + time * speed);\n  float y2 = sin((sx + unit * 3. + sv * lPeriod) * period + time * speed);\n  \n  r0 += tzaxis * -.01;\n  \n  vec3 rb0 = r0 + tzaxis * (-1. + y0) * height + txaxis * 1. * side * .1 * sx * cos(y0);\n  vec3 rb1 = r0 + tzaxis * (-1. + y1) * height + txaxis * 1. * side * .1 * sx * cos(y1);\n  vec3 rb2 = r0 + tzaxis * (-1. + y2) * height + txaxis * 1. * side * .1 * sx * cos(y2);\n  \n  vec3 sb0 = normalize(rb1 - rb0);\n  vec3 sb1 = normalize(rb2 - rb1);\n  \n  vec3 zaxis = normalize(sb1 - sb0);\n  vec3 xaxis = normalize(cross(sb0, sb1));\n  vec3 yaxis = normalize(cross(zaxis, xaxis));\n  \n  mat4 wmat = mat4(\n    vec4(xaxis, 0),\n    vec4(yaxis, 0),\n    vec4(zaxis, 0),\n    vec4(rb0 * expand, 1)); \n\n  #if 0\n    s = 1.;\n    s2 = 1.;\n  #endif\n  \n  float su = (sideSectionId + lr) / halfSectionsAcross;\n\n  float width = 1.; \n  pos = (wmat * vec4(0, next * s, 0, 1)).xyz;\n  vec3 nrm = vec3(0, 1, 0);\n  \n  float hue = sideV * .2 + time * .1; //sideV * .1 + pow(s2, 5.) + time * 0.1;\n  float sat = 0.3;\n  float val = s;1.;//mix(0.25, 1., pow(s2 + .4, 15.) * pow(s + .4, 15.)) + abs(sin(sv * 40.) * .25);\n  \n  vec3 n = normalize((wmat * vec4(nrm, 0)).xyz);\n  \n  vec3 lightDir = normalize(vec3(-0.3, .3, 0.2));\n\n  vec3 c = hsv2rgb(vec3(hue, sat, val));\n  color = vec4(c * mix(0., 1.0, abs(dot(n, lightDir))), 1);\n}\n\nvoid sky(const float vertexId, float base, const mat4 cmat, out vec3 pos, out vec4 color) {\n  float starId = floor(vertexId / 3.);\n  float pId = mod(vertexId, 3.);\n  pos = normalize(vec3(\n    t2m1(hash(starId * 0.123)),\n    t2m1(hash(starId * 0.353)),\n    t2m1(hash(starId * 0.627)))) * 500.;\n  pos += cmat[0].xyz * 2. * step(0.5, pId);\n  pos += cmat[1].xyz * 2. * step(1.5, pId);\n  float c = hash(starId * 0.017);\n  color = vec4(c, c, c, 1);\n}\n\nvoid main() {\n  //const float numTrackPoints = 30000.0;\n  float finalNumFunkPoints = 3.*numFunkPoints;     // must be multiple of 3\n    \n  //float base = 15.;  // good place to adjust\n  float base = time * 0.5;\n\n  const float coff = 0.14;\n  \n  vec3 b0 = getCurvePoint(base + coff * 0.);\n  vec3 b1 = getCurvePoint(base + coff * 1.);\n  vec3 b2 = getCurvePoint(base + coff * 2.);\n  \n  vec3 c0 = normalize(b1 - b0);\n  vec3 c1 = normalize(b2 - b1);\n  \n  vec3 czaxis = normalize(c1 - c0);\n  vec3 cxaxis = normalize(cross(c0, c1));\n  vec3 cyaxis = normalize(cross(czaxis, cxaxis));\n  \n  mat4 pmat = persp(radians(60.0), resolution.x / resolution.y, .1, 1000.0);\n\n  vec2 ms = vec2(0); //texture2D(touch, vec2(0, 0)).xy + vec2(0, 1);  \n  \n  vec3 eye    = b0 * expand + cyaxis * .001 + czaxis * 2.2;\n  vec3 target = b1 * expand + cyaxis * .002 + czaxis + ms.x * cxaxis * 2. + ms.y * cyaxis * 40.;\n  vec3 up     = cyaxis;\n  \n  mat4 cmat = lookAt(eye, target, up);\n  mat4 vmat = rotZ(asin(up.y) * 1.) * inverse(cmat);\n  \n  vec3 pos;\n  vec4 color;\n  \n  float id = vertexId;\n  if (id < finalNumFunkPoints) {\n    track(id, finalNumFunkPoints, base, pos, color);\n  } else {\n    id -= finalNumFunkPoints;\n    if (id < numFunkPoints) {\n      funk(id, numFunkPoints, base, pos, color);\n    } else {\n      id -= numFunkPoints;\n      sky(id, base, cmat, pos, color);\n    }\n  }\n  \n  gl_Position = pmat * vmat * vec4(pos, 1);\n  v_color = color;\n}\n"
  },
  "screenshotURL": "data/images/images-mm9ouz23izd7d93sl-thumbnail.jpg",
  "hasSound": true,
  "views": 132,
  "likes": 0,
  "revisionId": "WmFTsB5djXcrNdfuj"
}