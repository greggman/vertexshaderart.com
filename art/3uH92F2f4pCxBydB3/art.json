{
  "_id": "3uH92F2f4pCxBydB3",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": "1445777397953"
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1447931420381"
  },
  "modifiedAt": {
    "$date": "1448038286438"
  },
  "origId": null,
  "name": "flowerpower",
  "rank": "10.560755021462072",
  "private": false,
  "username": "gman",
  "settings": {
    "num": 37863,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/kemono/hawaiian-hula-blues",
    "lineSize": "CSS",
    "backgroundColor": [
      0.1568627450980392,
      0.9372549019607843,
      0.34901960784313724,
      1
    ],
    "shader": "// ,---.  ,---.   .-''-.  .-------. ,---------.    .-''-.   _____     __   .-'''-. .---.  .---.    ____     ______         .-''-.  .-------.       ____    .-------. ,---------.  \n// |   /  |   | .'_ _   \\ |  _ _   \\\\          \\ .'_ _   \\  \\   _\\   /  / / _     \\|   |  |_ _|  .'  __ `. |    _ `''.   .'_ _   \\ |  _ _   \\    .'  __ `. |  _ _   \\\\          \\ \n// |  |   |  .'/ ( ` )   '| ( ' )  | `--.  ,---'/ ( ` )   ' .-./ ). /  ' (`' )/`--'|   |  ( ' ) /   '  \\  \\| _ | ) _  \\ / ( ` )   '| ( ' )  |   /   '  \\  \\| ( ' )  | `--.  ,---' \n// |  | _ |  |. (_ o _)  ||(_ o _) /    |   \\  . (_ o _)  | \\ '_ .') .' (_ o _).   |   '-(_{;}_)|___|  /  ||( ''_'  ) |. (_ o _)  ||(_ o _) /   |___|  /  ||(_ o _) /    |   \\    \n// |  _( )_  ||  (_,_)___|| (_,_).' __  :_ _:  |  (_,_)___|(_ (_) _) '   (_,_). '. |      (_,_)    _.-`   || . (_) `. ||  (_,_)___|| (_,_).' __    _.-`   || (_,_).' __  :_ _:    \n// \\ (_ o._) /'  \\   .---.|  |\\ \\  |  | (_I_)  '  \\   .---.  /    \\   \\ .---.  \\  :| _ _--.   | .'   _    ||(_    ._) ''  \\   .---.|  |\\ \\  |  |.'   _    ||  |\\ \\  |  | (_I_)    \n//  \\ (_,_) /  \\  `-'    /|  | \\ `'   /(_(=)_)  \\  `-'    /  `-'`-'    \\\\    `-'  ||( ' ) |   | |  _( )_  ||  (_.\\.' /  \\  `-'    /|  | \\ `'   /|  _( )_  ||  | \\ `'   /(_(=)_)   \n//   \\     /    \\       / |  |  \\    /  (_I_)    \\       /  /  /   \\    \\\\       / (_{;}_)|   | \\ (_ o _) /|       .'    \\       / |  |  \\    / \\ (_ o _) /|  |  \\    /  (_I_)    \n//    `---`      `'-..-'  ''-'   `'-'   '---'     `'-..-'  '--'     '----'`-...-'  '(_,_) '---'  '.(_,_).' '-----'`       `'-..-'  ''-'   `'-'   '.(_,_).' ''-'   `'-'   '---'    \n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\n#define NUM_EDGE_POINTS_PER_PETAL 19.\n#define NUM_POINTS_PER_PETAL ((NUM_EDGE_POINTS_PER_PETAL - 1.) * 3.) \nvoid getPetalPoint(const float flowerId, const float id, out vec3 pos, out float center) {\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\n  center = step(0.5, mod(id, 3.));\n  float u = outId / (NUM_EDGE_POINTS_PER_PETAL - 1.);\n  float a = u * PI * 2.;\n  float s = sin(a);\n  float c = cos(a);\n  float x = s * 0.3;\n  float y = c - 1.;\n  float z = u;\n  pos = vec3(x, y, z) * center + vec3(0, mix(-2.0, 1.0, hash(flowerId * 0.33)) * inv(center), 0);\n  \n}\n\n#define NUM_PETALS_PER_FLOWER 5.\n#define NUM_POINTS_PER_FLOWER (NUM_POINTS_PER_PETAL * NUM_PETALS_PER_FLOWER)\nvoid getFlowerPoint(const float flowerId, const float id, out vec3 pos, out float center) {\n  float petalId = floor(id / NUM_POINTS_PER_PETAL);\n  float pointId = mod(id, NUM_POINTS_PER_PETAL);\n  vec3 petalPos;\n  getPetalPoint(flowerId, pointId, petalPos, center);\n  mat4 mat = rotZ(petalId / NUM_PETALS_PER_FLOWER * PI * 2.);\n  pos = (mat * vec4(petalPos, 1)).xyz;\n}\n\nvoid main() {\n  vec3 aspect = vec3(resolution.y / resolution.x, 1, 0.0001);\n  float id = vertexId;\n  float numFlowers = floor(vertexCount / NUM_POINTS_PER_FLOWER);\n  float flowerId = floor(vertexId / NUM_POINTS_PER_FLOWER);// + floor(time * 100.);\n  float sOff = 0.0;\n  float sSpread = 0.01;\n  const int numSamples = 5;\n  float snd = 0.;\n  for (int i = 0; i < numSamples; ++i) {\n    vec2 uv = vec2(flowerId / numFlowers * 0.25, sOff + sSpread * float(i));\n    snd += texture2D(sound, uv).a * float(numSamples - i);\n  }\n  snd /= float(numSamples * (numSamples + 1)) / 2.5;\n  vec3 offset = vec3(m1p1(hash(flowerId)) / aspect.x, m1p1(hash(flowerId * 1.37)), -m1p1(flowerId / 10.));\n  vec3 pos;\n  float center;\n  getFlowerPoint(flowerId, id, pos, center);\n  mat4 mat = ident(); \n  mat *= scale(aspect);\n  mat *= trans(offset);\n  mat *= rotZ(time * mix(-1., 1., hash(flowerId * 1.54)));\n  mat *= uniformScale(mix(0.1, 0.2, hash(flowerId)) + pow(snd, 5.0) * 0.1);\n  gl_Position = vec4((mat * vec4(pos, 1)).xyz, 1);\n  \n\n  float hue = mix(-0.2, 0.2, fract(time * 0.1 + flowerId * 0.13 + center * 0.1));\n  float sat = mix(.4, .7, hash(flowerId * 0.7));\n  float val = mix(mix(0.5, 1.0, hash(flowerId * 0.27)), 0.0, center * inv(hash(flowerId * 0.73)));\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 0.0 + pow(snd + 0.3, 5.0));\n  v_color = vec4(v_color.xyz * v_color.a, v_color.a);\n}"
  },
  "screenshotURL": "data/images/images-g98mqi3h4mez1wgeo-thumbnail.jpg",
  "hasSound": true,
  "views": "401",
  "likes": "7",
  "revisionId": "f4qb3vqjf7EEtrcXg",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}