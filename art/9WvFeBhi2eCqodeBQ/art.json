{
  "_id": "9WvFeBhi2eCqodeBQ",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1538561492812"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1538562357112"
    }
  },
  "origId": "eh4QC67q3gssnkYYv",
  "name": "simple frag to vertex formula",
  "notes": "http://glslsandbox.com/e#42523.0",
  "rank": {
    "$numberDouble": "1.2932503640724173"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":10000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/merzbow/pulse-vegan-part-1\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define ITERS 40\\n#define M_PI 3.1415926535897932384626433832795\\n\\n#define DEBUG 1\\n#define TAU 6.28318530718\\n\\n//KDrawmode=GL_POINTS\\n//KVerticesNumber=100000\\n\\n#define soundFactor 1.0//KParameter 1.0>>5.\\n#define screenSizeRation 0.5//KParameter 0.5>>1.\\n\\nfloat pattern(vec2 p){p.x*=.866;p.x-=p.y*.5;p=mod(p,1.);return p.x+p.y<1.?0.:1.;}\\n\\nvoid main ()\\n{\\n  //vec2 desiredPixelResolution = vec2(floor(resolution.x*screenSizeRation),floor(resolution.y*screenSizeRation));\\n  \\n  float ratioXforY = resolution.x/resolution.y;\\n  \\n  //can't use all vertices\\n  //need to find the max value compatible with our ratio\\n  //we need to resolve\\n  //1. finalVertexCount = finalVertexResolution.x * finalVertexResolution.y\\n  //2. finalVertexResolution.x/finalVertexResolution.y = ratioXforY\\n\\n  float finalVertexCount = floor(vertexCount*ratioXforY);\\n  \\n  vec2 finalVertexResolution = vec2(sqrt(ratioXforY * finalVertexCount), sqrt(ratioXforY * finalVertexCount)/ratioXforY);\\n  \\n  float finalVertexId = mod(vertexId, finalVertexCount);\\n  \\n  //position vertices indexes\\n  float x = mod(finalVertexId,  finalVertexResolution.x);\\n  float y = floor(finalVertexId /  finalVertexResolution.y);\\n  \\n  //positions 0.>>1.\\n  float u = (x / finalVertexResolution.x);\\n  float v = (y / finalVertexResolution.y);\\n  \\n  //positions -1.>>1.\\n  float ux = ( u  * 2.0 - 1.0) * (finalVertexResolution.x/resolution.x);\\n  float vy = ( v * 2.0 - 1.0)* (finalVertexResolution.y/resolution.y);\\n  \\n  vec2 p = vec2(x,y);\\n \\n  \\n\\tvec2 uv1= vec2(ux,vy);//(p.xy*2.-desiredPixelResolution.xy)/min(desiredPixelResolution.x,desiredPixelResolution.y); \\n\\n\\tfloat dp = dot(uv1,uv1);\\n\\tuv1 /= 1.-dp*dp;\\n  \\n\\tfloat a=0.,d=dot(uv1,uv1),s=0.,t=fract(time*.3),v1=0.;\\n\\tfor(int i=0;i<8;i++){s=fract(t+a);v+=pattern(uv1*(pow(2.,(1.-s)*8.))*.5)*sin(fract(t+a)*3.14);a+=.125;}\\n\\t\\n \\n\\n  gl_PointSize = 1.;//desiredPixelResolution.x/desiredPixelResolution.x;//(resolution.y/finalResolution.y)*2.-1.;\\n\\n  v_color = vec4(mix(vec3(.7,.8,1),vec3(.8,.8,.9),d)*v*.25,1);;\\n    \\n  gl_Position = vec4(ux, vy, 0, 1);\\n  \\n\\n}\"}",
  "screenshotURL": "data/images/images-mfz9nifj6u4fr68x2-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "MePZ3Bio3ZipGbFty"
}