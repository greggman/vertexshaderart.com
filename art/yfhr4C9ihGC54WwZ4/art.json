{
  "_id": "yfhr4C9ihGC54WwZ4",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1642494761595"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1642494761595"
    }
  },
  "origId": "foJQ7C4rZnwuJSDxD",
  "name": "unnamed",
  "notes": "",
  "rank": {
    "$numberDouble": "1.8017110541860986"
  },
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 7491,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/caseandpoint/case-point-upgrade-free-download",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "// Block Party - @P_Malin\n\n//#define WALK\n\n//#define COLOR_PASTEL\n//#define COLOR_VIVID\n#define COLOR_SUNSET\n\n#ifdef COLOR_PASTEL\n\nvec3 gSunColor = vec3(1.0, 0.9, 0.1) * 10.0;  \n\nvec3 gSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 4.0;\nvec3 gSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 5.0;\n\nfloat gFogDensity = 0.01;\n\nvec3 gFloorColor = vec3(0.8, 1.0, 0.8);\nvec3 gCubeColor = vec3(1.0, 0.8, 0.8);\nfloat gExposure = 1.0;\n\nfloat gCubeColorRandom = 0.4;\n\n#endif\n\n#ifdef COLOR_VIVID\n\nvec3 gSunColor = vec3(1.0, 0.9, 0.1) * 10.0;  \n\nvec3 gSkyTop =  vec3( 0.21, 0.2, 0.8 ) * 0.5;\nvec3 gSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\n\nfloat gFogDensity = 0.05;\n\nvec3 gFloorColor = vec3(0.4, 0.4, 1.0);\nvec3 gCubeColor = vec3(1.0, 0.1, 1.0);\nfloat gExposure = 1.0;\n\nfloat gCubeColorRandom = 0.9;\n\n#endif\n\n#ifdef COLOR_SUNSET\nvec3 gSunColor = vec3(1.0, 0.2, 0.1) * 10.0;  \n\nvec3 gSkyTop = vec3( 1.0, 0.8, 0.5 ) * 0.5;\nvec3 gSkyBottom =  vec3( 0.8, 0.2, 0.1 ) * 1.5;\n\nfloat gFogDensity = 0.05;\n\nvec3 gFloorColor = vec3(1.0, 0.5, 0.5);\nvec3 gCubeColor = vec3(1.0, 0.5, 1.0);\nfloat gExposure = 1.0;\n\nfloat gCubeColorRandom = 0.5;\n\n#endif\n\n#define MOVE_OUTWARDS\n\nfloat fAOAmount = 0.8;\nfloat gFloorHeight = -1.0;\nfloat g_cameraFar = 1000.0;\n\n#define PI radians( 180.0 )\n\n\nvec3 GetSunDir()\n{\n  \treturn normalize( vec3( 1.0, 0.3, -0.5 ) );\n}\n\n\nvoid GetQuadInfo( const float vertexIndex, out vec2 quadVertId, out float quadId )\n{\n    float twoTriVertexIndex = mod( vertexIndex, 6.0 );\n    float triVertexIndex = mod( vertexIndex, 3.0 );\n  \n    if \t\t( twoTriVertexIndex < 0.5 ) quadVertId = vec2( 0.0, 0.0 );\n    else if\t( twoTriVertexIndex < 1.5 )\tquadVertId = vec2( 1.0, 0.0 );\n    else if ( twoTriVertexIndex < 2.5 )\tquadVertId = vec2( 0.0, 1.0 );\n    else if ( twoTriVertexIndex < 3.5 )\tquadVertId = vec2( 1.0, 0.0 );\n    else if ( twoTriVertexIndex < 4.5 )\tquadVertId = vec2( 1.0, 1.0 );\n    else \t\t\t\t\t\t\t\tquadVertId = vec2( 0.0, 1.0 );\n\n    quadId = floor( vertexIndex / 6.0 );\n}\n\n\nvoid GetQuadTileInfo( const vec2 quadVertId, const float quadId, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\n{\n    vQuadTileIndex.x = floor( mod( quadId, vDim.x ) );\n    vQuadTileIndex.y = floor( quadId / vDim.x );\n\n  \tvQuadUV.x = floor(quadVertId.x + vQuadTileIndex.x);\n    vQuadUV.y = floor(quadVertId.y + vQuadTileIndex.y);\n\n    vQuadUV = vQuadUV * (1.0 / vDim);\n}\n\n\nvoid GetQuadTileInfo( const float vertexIndex, const vec2 vDim, out vec2 vQuadTileIndex, out vec2 vQuadUV )\n{\n  \tvec2 quadVertId;\n  \tfloat quadId;\n\tGetQuadInfo( vertexIndex, quadVertId, quadId );  \n  \tGetQuadTileInfo( quadVertId, quadId, vDim, vQuadTileIndex, vQuadUV );   \n}\n\n\nvoid GetMatrixFromZY( const vec3 vZ, const vec3 vY, out mat3 m )\n{\n   vec3 vX = normalize( cross( vY, vZ ) );\n   vec3 vOrthoY = normalize( cross( vZ, vX ) );\n   m[0] = vX;\n   m[1] = vOrthoY;\n   m[2] = vZ;\n}\n\n\nvoid GetMatrixFromZ( vec3 vZAxis, out mat3 m )\n{\n  \tvec3 vZ = normalize(vZAxis);\n   \tvec3 vY = vec3( 0.0, 1.0, 0.0 );\n  \tif ( abs(vZ.y) > 0.99 )\n    {\n       vY = vec3( 1.0, 0.0, 0.0 );\n    }\n  \tGetMatrixFromZY( vZ, vY, m );\n}\n\n\nstruct SceneVertex\n{\n  \tvec3 vWorldPos;\n  \tvec3 vColor;\n  \tfloat fAlpha;\n};\n\n\nfloat GetCosSunRadius()\n{\n  return 0.01;\n}\n\n\nfloat GetSunIntensity()\n{  \t\n  \treturn 0.001;\n}\n\n\nvec3 GetSkyColor( vec3 vViewDir )\n{\n\treturn mix( gSkyBottom, gSkyTop, max( 0.0, vViewDir.y ) );\n}\n\n\nvec3 GetBackdropColor( vec3 vViewDir )\n{\n  \tfloat VdotL = dot( normalize(vViewDir), GetSunDir() );\n  \n  \tVdotL = clamp( VdotL, 0.0, 1.0 );\n  \n  \tfloat fShade = .150;\n\n  \tfShade = acos( VdotL ) * (1.70 / PI);\n  \n  \tfloat fCosSunRadius = GetCosSunRadius();\n  \n  \tfShade = max( 0.0, (fShade - fCosSunRadius) / (1.0 - fCosSunRadius) );    \n  \n  \tfShade = GetSunIntensity() / max( 0.00010, pow(fShade, 1.5) );\n  \n  \tvec3 vColor = vec3(0.0);\n    vColor += GetSkyColor( vViewDir );\n      \n    vColor += vec3( fShade * gSunColor );\n    return vColor;\n}\n\n\n#define g_backdropSegments \t\t\t12.0\n#define g_backdropSlices \t\t\t16.0\n#define g_backdropQuads \t\t\t( g_backdropSegments * g_backdropSlices )\n#define g_backdropVertexCount \t\t( g_backdropQuads * 3.0 )\n\n\nvoid GenerateBackdropVertex( const float vertexIndex, const vec3 vCameraPos, out SceneVertex outSceneVertex )\n{\n    vec2 vBackdropDim = vec2( g_backdropSegments, g_backdropSlices );\n    \n  \tvec2 vQuadTileIndex;\n    vec2 vUV;  \n  \tGetQuadTileInfo( vertexIndex, vBackdropDim, vQuadTileIndex, vUV );\n\n    float fSlicePos = 0.0;\n  \n  \tfloat fSunMeshPinch = 5.0;\n  \n  \tif (vUV.y > 0.0)\n    {\n      \tfloat t = pow( vUV.y, fSunMeshPinch );\n  \t\tfloat fCosSunRadius = GetCosSunRadius();\n      \tfSlicePos = fCosSunRadius + t * (1.0- fCosSunRadius);\n    }\n    \n  \tvec3 vSpherePos;\n  \tfloat fElevation = fSlicePos * PI;\n  \tvSpherePos.z = cos( fElevation );\n\n  \tfloat fHeading = vUV.x * PI * 2.0;\n  \tfloat fSliceRadius = sqrt( 1.0 - vSpherePos.z * vSpherePos.z );\n  \tvSpherePos.x = sin( fHeading ) * fSliceRadius;\n  \tvSpherePos.y = cos( fHeading ) * fSliceRadius;\n  \n\tmat3 m;\n  \n  \tGetMatrixFromZ( GetSunDir(), m );\n    \n  \tvec3 vLocalSpherePos = m * vSpherePos;\n\n  \tfloat fBackdropDistance = g_cameraFar; \n  \tvec3 vWorldSpherePos = vLocalSpherePos * fBackdropDistance;\n\n  \tvWorldSpherePos += vCameraPos;\n  \n    outSceneVertex.vWorldPos = vWorldSpherePos;\n      \n  \toutSceneVertex.vColor = GetBackdropColor( vLocalSpherePos );\n\n  \toutSceneVertex.fAlpha = 1.0;\n}  \n\n\n#define g_cubeFaces\t\t\t\t\t6.0\n#define g_cubeVerticesPerFace\t\t( g_cubeFaces * 2.0 * 3.0 )\n#define g_cubeVertexCount \t\t\t( g_cubeVerticesPerFace * g_cubeFaces )\n\n//                   6          7\n//                    +----------+\n//                   /|         /|\n//                2 / |       3/ |\n//                 +----------+  |\n//                 |  |       |  |\n//      Y   Z      | 4|       | 5|\n//                 |  +-------|--+\n//      ^ /        | /        | /\n//      |/        0|/        1|/\n//      +--> X     +----------+\n  \nvec3 GetCubeVertex( float fVertexIndex )\n{\n\tvec3 fResult = vec3( 1.0 );\n  \n  \tfloat f = fVertexIndex / 8.0;\n  \tif ( fract( f * 4.0 ) < 0.5 )\n    {\n    \tfResult.x = -fResult.x;\n    }\n  \n  \tif ( fract( f * 2.0 ) < 0.5 )\n    {\n    \tfResult.y = -fResult.y;\n    }\n\n  \tif ( fract( f ) < 0.5 )\n    {\n    \tfResult.z = -fResult.z;\n    }\n  \n  \treturn fResult;\n}\n\n\nvoid GetCubeVertex( const float vertexIndex, const mat3 mRot, const vec3 vTrans, out vec3 vWorldPos, out vec3 vWorldNormal )\n{\n  \tfloat fFaceIndex = floor( vertexIndex / g_cubeFaces );\n\n  \tvec3 v0, v1, v2, v3;\n  \n  \tif ( fFaceIndex < 0.5 )\n    {\n      \tv0 = GetCubeVertex( 0.0 );\n      \tv1 = GetCubeVertex( 2.0 );\n      \tv2 = GetCubeVertex( 3.0 );\n      \tv3 = GetCubeVertex( 1.0 );\n    }\n  \telse if ( fFaceIndex < 1.5 )\n    {\n      \tv0 = GetCubeVertex( 5.0 );\n      \tv1 = GetCubeVertex( 7.0 );\n      \tv2 = GetCubeVertex( 6.0 );\n      \tv3 = GetCubeVertex( 4.0 );\n    }\n  \telse if ( fFaceIndex < 2.5 )\n    {\n      \tv0 = GetCubeVertex( 1.0 );\n      \tv1 = GetCubeVertex( 3.0 );\n      \tv2 = GetCubeVertex( 7.0 );\n      \tv3 = GetCubeVertex( 5.0 );\n    }\n  \telse if ( fFaceIndex < 3.5 )\n    {\n      \tv0 = GetCubeVertex( 4.0 );\n      \tv1 = GetCubeVertex( 6.0 );\n      \tv2 = GetCubeVertex( 2.0 );\n      \tv3 = GetCubeVertex( 0.0 );\n    }\n  \telse if ( fFaceIndex < 4.5 )\n    {\n      \tv0 = GetCubeVertex( 2.0 );\n      \tv1 = GetCubeVertex( 6.0 );\n      \tv2 = GetCubeVertex( 7.0 );\n      \tv3 = GetCubeVertex( 3.0 );\n    }\n  \telse\n    {\n      \tv0 = GetCubeVertex( 1.0 );\n      \tv1 = GetCubeVertex( 5.0 );\n      \tv2 = GetCubeVertex( 4.0 );\n      \tv3 = GetCubeVertex( 0.0 );\n    }\n  \n  \tv0 = v0 * mRot + vTrans;\n  \tv1 = v1 * mRot + vTrans;\n  \tv2 = v2 * mRot + vTrans;\n  \tv3 = v3 * mRot + vTrans;\n  \n  \tfloat fFaceVertexIndex = mod( vertexIndex, 6.0 );\n  \n  \tif ( fFaceVertexIndex < 0.5 )\n    {\n\t  \tvWorldPos = v0;\n    }\n  \telse if ( fFaceVertexIndex < 1.5 )\n    {\n\t  \tvWorldPos = v1;\n    }\n  \telse if ( fFaceVertexIndex < 2.5 )\n    {\n\t  \tvWorldPos = v2;\n    }\n  \telse if ( fFaceVertexIndex < 3.5 )\n    {\n\t  \tvWorldPos = v0;\n    }\n  \telse if ( fFaceVertexIndex < 4.5 )\n    {\n\t  \tvWorldPos = v2;\n    }\n  \telse\n    {\n\t  \tvWorldPos = v3;\n    }\n  \n  \tvWorldNormal = normalize( cross( v1 - v0, v2 - v0 ) );  \n}\n\n\nvec3 GetSunLighting( const vec3 vNormal )\n{\n  \tvec3 vLight = -GetSunDir();\n  \n  \tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\n \t  \n  \treturn gSunColor * NdotL;\n}\n\n\nvec3 GetSunSpec( const vec3 vPos, const vec3 vNormal, const vec3 vCameraPos )\n{\n  \tvec3 vLight = -GetSunDir();\n\n  \tvec3 vView = normalize( vCameraPos - vPos );\n  \n  \tvec3 vH = normalize( vView - vLight );\n  \n  \tfloat NdotH = max( 0.0, dot( vNormal, vH ) );\n  \tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\n \n  \tfloat f = mix( 0.01, 1.0, pow( 1.0 - NdotL, 5.0 ) );\n  \n  \treturn gSunColor * pow( NdotH, 20.0 ) * NdotL * f * 4.0;\n}\n\n\nvec3 GetSkyLighting( const vec3 vNormal )\n{\n  \tvec3 vSkyLight = normalize( vec3( -1.0, -2.0, -0.5 ) );\n  \n  \tfloat fSkyBlend = vNormal.y * 0.5 + 0.5;\n \n  \treturn mix( gSkyBottom, gSkyTop, fSkyBlend );\n}\n\n\nvoid GenerateCubeVertex( const float vertexIndex, const mat3 mRot, const vec3 vTrans, const vec3 vCubeCol, const float fStage, const vec3 vCameraPos, out SceneVertex outSceneVertex )\n{  \n  \tvec3 vNormal;\n  \n\tGetCubeVertex( vertexIndex, mRot, vTrans, outSceneVertex.vWorldPos, vNormal );\n  \n  \toutSceneVertex.vColor = vec3( 0.0 );\n  \n  \toutSceneVertex.fAlpha = 1.0;  \n  \n  \tfloat h = outSceneVertex.vWorldPos.y - gFloorHeight;\n  \tif ( fStage < 0.5 )\n    {\n\t    outSceneVertex.vColor += GetSkyLighting( vNormal );\n      \toutSceneVertex.vColor *= mix( 1.0, fAOAmount, clamp( h, 0.0, 1.0 ) );\n      \n  \t\toutSceneVertex.vColor += GetSunLighting( vNormal );\n      \n      \toutSceneVertex.vColor *= vCubeCol;      \n      \n      \toutSceneVertex.vColor += GetSunSpec( outSceneVertex.vWorldPos, vNormal, vCameraPos );\n    }\n  \telse\n    {\n      \tvec3 vSunDir = GetSunDir();\n      \toutSceneVertex.vWorldPos.x += h * -vSunDir.x;\n      \toutSceneVertex.vWorldPos.z += h * -vSunDir.z;\n      \toutSceneVertex.vWorldPos.y = gFloorHeight;\n      \n        outSceneVertex.vColor += GetSkyLighting( normalize(vec3(1.0, 1.0, 0.0)) );\n\n      \toutSceneVertex.vColor *= gFloorColor;\n    }  \n}\n\n\nvoid ApplyFog( const vec3 vCameraPos, inout SceneVertex sceneVertex )\n{\n  \tvec3 vViewOffset = sceneVertex.vWorldPos - vCameraPos;\n  \tfloat fDist = length( vViewOffset );\n  \n  \tvec3 vViewDir = normalize( vViewOffset );\n  \n  \tfloat fFogBlend = exp2( fDist * -gFogDensity );\n  \n  \tvec3 vFogColor = GetBackdropColor( vViewDir );\n    \n  \tsceneVertex.vColor = mix( vFogColor, sceneVertex.vColor, fFogBlend );\n}\n\n\n#define g_floorTileX 16.0\n#define g_floorTileY 16.0\n#define g_floorTileCount ( g_floorTileX * g_floorTileY )\n#define g_floorVertexCount ( g_floorTileCount * 6.0 )\n\nvoid GenerateFloorVertex( const float vertexIndex, out SceneVertex outSceneVertex )\n{\n  \tvec2 vDim = vec2( g_floorTileX, g_floorTileY );\n  \tvec2 vQuadTileIndex;\n  \tvec2 vQuadUV;\n  \n\tGetQuadTileInfo( vertexIndex, vDim, vQuadTileIndex, vQuadUV );  \n\n  \toutSceneVertex.vWorldPos.xz = (vQuadUV * 2.0 - 1.0) * 1000.0;\n  \toutSceneVertex.vWorldPos.y = gFloorHeight - 0.01;\n  \toutSceneVertex.fAlpha = 1.0;\n  \toutSceneVertex.vColor = vec3(0.0);\n\n  \tvec3 vNormal = vec3( 0.0, 1.0, 0.0 );\n  \toutSceneVertex.vColor += GetSkyLighting( vNormal );\n  \toutSceneVertex.vColor += GetSunLighting( vNormal );\n  \n  \toutSceneVertex.vColor *= gFloorColor;\n}\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n\nmat3 RotMatrixY( float fAngle )\n{\n    float s = sin( fAngle );\n    float c = cos( fAngle );\n  \t\n    return mat3( c, 0.0, s, \n                         0.0, 1.0, 0.0,\n                         -s, 0.0, c );\n  \n}\n\n\nmat3 RotMatrixZ( float fAngle )\n{\n    float s = sin( fAngle );\n    float c = cos( fAngle );\n  \t\n    return mat3( c, s, 0.0, \n                 -s, c, 0.0,\n                 0.0, 0.0, 1.0 );\n  \n}\n\nvoid GetCubePosition( float fCubeId, out mat3 mCubeRot, out vec3 vCubeOrigin, out vec3 vCubeCol )\n{  \n  \tfloat fSeed = fCubeId;\n  \tfloat fPositionBase = fCubeId;\n#ifdef MOVE_OUTWARDS\n  \tfSeed -= floor(time);\n  \tfPositionBase += mod(time, 1.0);\n#endif  \n  \tfloat fSize = hash(fSeed * 1.234);\n  \tfSize = fSize * fSize;\n\n  \tvCubeOrigin = vec3( 0.0, 0.0, 0.0 );\n\n\t\n    float r = sqrt(fPositionBase) * 1.987;\n  \tfloat fTheta = r * (0.3 * PI * 2.0);//log2(r) * 10.0;\n    vCubeOrigin.x = sin(fTheta) * r;\n    vCubeOrigin.z = cos(fTheta) * r;\n  \n    float fScale = fSize * 0.5 + 0.5;\n  \n#ifdef MOVE_OUTWARDS\n  \tfScale *= clamp(r , 0.0, 1.0);\n#endif  \n  \n  \tfloat roll = 0.0;\n#ifdef WALK\n  \troll = r * PI * 2.0 * fScale;\n#endif\n  \n  \tmCubeRot = RotMatrixZ(roll);\n  \tmCubeRot *= RotMatrixY(fTheta);\n    mCubeRot *= fScale;\n  \t\n  \tfloat fMinY = 10.0;\n  \t\n  \tfloat f = 0.0;\n  \tfor( int i=0; i<8; i++)\n    {\n      \tvec3 vert = GetCubeVertex(f) * mCubeRot;\n\t  \tfMinY = min( fMinY, vert.y );\n      \tf+= 1.0;\n    }\n  \n  \tvCubeOrigin.y = gFloorHeight;\n  \tvCubeOrigin.y += -fMinY;\n  \n  \tfloat jump = 0.0;\n\n  \tfloat o = 10.0 / 240.0;\n  \tfloat v = 0.0;\n    float a = 0.011;\n  \n  \tfor(int i=0; i<10; i++)\n    {\n        float off = 0.1;\n        float spread = 0.3;      \n        float speed  = 0.002;\n      \n        float snd = texture2D(sound, vec2(off + spread * fSize, r * speed + o)).a;\n\n      \tsnd = snd * snd * (1.0 + 0.5 * (1.0 - fSize));\n      \n      \to = o - (1.0 / 240.0);\n      \n      \tv = v - 0.1;\n      \ta = a * 1.5;\n      \tv += snd * a;\n      \tjump = jump + v;\n      \n      \tif( jump < 0.0)\n        {\n          \tv = 0.0;\n          \tjump = 0.0;\n        }\n    }\n\n  \tvCubeOrigin.y += jump * 6.0;\n  \n  \tvec3 vRandCol;\n  \tvRandCol.x = hash( fSeed );\n  \tvRandCol.y = hash( fSeed * 1.234);\n  \tvRandCol.z = hash( fSeed * 2.345);\n  \n  \tvCubeCol = mix( gCubeColor, vRandCol, gCubeColorRandom );\n}\n\n\nvoid main()\n{ \n  \tSceneVertex sceneVertex;\n  \n  \tvec2 vMouse = mouse;\n  \n  \tfloat fov = 1.5;\n  \n  \tfloat fMouseX = (vMouse.x * 0.5 + 0.5);\n  \tfMouseX = fMouseX * fMouseX;\n  \n  \tfloat animTime = time;\n  \n  \tfloat orbitAngle = animTime * 0.3456 + 4.0;\n  \tfloat elevation = -0.02 + (sin(animTime * 0.223 - PI * 0.5) * 0.5 + 0.5) * 0.5;\n  \tfloat fOrbitDistance = 5.0 + (cos(animTime * 0.2345) * 0.5 + 0.5 ) * 40.0;\n  \n  \tvec3 vCameraTarget = vec3( 0.0, 1.0, 0.0 );\n  \tvec3 vCameraPos = vCameraTarget + vec3( sin(orbitAngle) * cos(elevation), sin(elevation), cos(orbitAngle) * cos(elevation) ) * fOrbitDistance;\n  \tvec3 vCameraUp = vec3( 0.1, 1.0, 0.0 );\n  \n  \tif( false )\n    {\n      vCameraPos = vec3( 10.0, 6.0, 30.0 );\n      vCameraTarget = vec3( 0.0, 0.0, 0.0 );\n      vCameraUp = vec3( 0.0, 1.0, 0.0);\n    }\n  \n  \tvec3 vCameraForwards = normalize(vCameraTarget - vCameraPos);\n  \n  \tmat3 mCamera;\n    GetMatrixFromZY( vCameraForwards, normalize(vCameraUp), mCamera );\n  \n  \tfloat vertexIndex = vertexId;\n  \n  \n  \tif ( vertexIndex >= 0.0 && vertexIndex < g_backdropVertexCount )\n    {\n    \tGenerateBackdropVertex( vertexIndex, vCameraPos, sceneVertex );\n    }\n  \tvertexIndex -= g_backdropVertexCount;\n  \n  \tif ( vertexIndex >= 0.0 && vertexIndex < g_floorVertexCount )\n    {\n    \tGenerateFloorVertex( vertexIndex, sceneVertex );\n\t  \tApplyFog( vCameraPos, sceneVertex );\n    }\n  \tvertexIndex -= g_floorVertexCount;\n  \n  \tif ( vertexIndex >= 0.0 )\n    {\n        float fCubeIndex = floor( vertexIndex / g_cubeVertexCount );\n        float fCubeStage = mod( fCubeIndex, 2.0 );\n        float fCubeId = floor(fCubeIndex / 2.0);\n        float fCubeVertex = mod( vertexIndex, g_cubeVertexCount );\n\n        {\n          \tmat3 mCube;\n          \tvec3 vCubeOrigin;\n          \tvec3 vCubeCol;\n          \t\n\t        GetCubePosition( fCubeId, mCube, vCubeOrigin, vCubeCol );\n\n            GenerateCubeVertex( fCubeVertex, mCube, vCubeOrigin, vCubeCol, fCubeStage, vCameraPos, sceneVertex );\n\t\t  \tApplyFog( vCameraPos, sceneVertex );\n\n            fCubeId += 1.0;\n        }\n    }\n\n\n    // Fianl output position\n\tvec3 vViewPos = sceneVertex.vWorldPos;\n    vViewPos -= vCameraPos;\n  \tvViewPos =  vViewPos * mCamera;\n  \t\n  \tvec2 vFov = vec2( 1.0, resolution.x / resolution.y ) * fov;\n  \tvec2 vScreenPos = vViewPos.xy * vFov;\n\n\tgl_Position = vec4( vScreenPos.xy, -1.0, vViewPos.z );\n    \n  \t// Final output color\n  \tfloat fExposure = min( gExposure, time * 0.51 );\n  \tvec3 vFinalColor = sqrt( vec3(1.0) - exp2( sceneVertex.vColor * -fExposure ) );\n  \n  \tv_color = vec4(vFinalColor * sceneVertex.fAlpha, sceneVertex.fAlpha);    \n}"
  },
  "screenshotURL": "data/images/images-02ag42uhfgbxn62pb-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "59"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "ZC6rrScZpER2NY7gB"
}