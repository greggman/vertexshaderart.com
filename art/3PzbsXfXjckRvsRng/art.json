{
  "_id": "3PzbsXfXjckRvsRng",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1448993608409"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1448993608409"
    }
  },
  "origId": "PpwJ5uNXyzHCnWSZJ",
  "name": "spectrum-helper",
  "rank": {
    "$numberDouble": "1.223557744549508"
  },
  "private": true,
  "unlisted": false,
  "username": "gman",
  "settings": {
    "num": 98304,
    "mode": "LINES",
    "sound": "https://soundcloud.com/silver-romance/acdc-thunder-struck",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define NUM_SEGMENTS 1024.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 1.0\n#define NUM_LINES_DOWN 64.0\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat inRange(float v, float low, float high) {\n  return step(low, v) * step(v, high);\n}\n\nvoid main() {\n  // produces 0,1, 1,2, 2,3, ...\n  float point = floor(mod(vertexId, NUM_POINTS) / 2.0) + mod(vertexId, 2.0) * STEP;\n  // line count\n  float count = floor(vertexId / NUM_POINTS);\n\n  float u = point / NUM_SEGMENTS;    // 0 <-> 1 across line\n  float v = count / NUM_LINES_DOWN;  // 0 <-> 1 by line\n  float invV = 1.0 - v;\n\n  // Match each line to a specific row in the sound texture\n  float historyV = (v * NUM_LINES_DOWN + 0.5) / soundRes.y;\n  float snd = texture2D(sound, vec2(u, historyV)).a;\n\n  //\n  float x = u * 2.0 - 1.0;\n  float y = v * 2.0 - 1.0;\n  vec2 xy = vec2(\n      x * mix(0.5, 1.0, invV),\n      y + pow(snd, 5.0) * 1.0) / (v + 0.5);\n  gl_Position = vec4(xy * 0.5, 0, 1);\n\n  float hue = u;\n  float sat = invV;\n  float val = invV;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n  float target = 0.018;\n  v_color = mix(v_color, vec4(1), inRange(u, target - 0.01, target + 0.01));\n  \n}"
  },
  "screenshotURL": "data/images/images-6w8qil7xubji8w1h9-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "eEXos2odxmEvcBnua",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}