{
  "_id": "DSH7PskktA2rGgZ6F",
  "owner": {
    "_id": "pNRhszAEASfy6B3Xs",
    "createdAt": {
      "$date": "1453130559425"
    },
    "username": "gaz",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/1383190fac8e70cb725c3d76dbc811ba?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1458742759209"
  },
  "modifiedAt": {
    "$date": "1458858566126"
  },
  "origId": null,
  "name": "Pig",
  "notes": "",
  "rank": "1.8895530749687033",
  "private": false,
  "unlisted": false,
  "username": "gaz",
  "avatarUrl": "https://secure.gravatar.com/avatar/1383190fac8e70cb725c3d76dbc811ba?default=retro&size=200",
  "settings": {
    "num": 83549,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "mat2 rotate(float a) {\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nmat4 perspective(in float fovy, in float aspect, in float near, in float far) {\n    float top = near * tan(radians(fovy * 0.5));\n    float right = top * aspect;\n    float u = right * 2.0;\n    float v = top * 2.0;\n    float w = far - near;\n    return mat4(\n        near * 2.0 / u, 0.0, 0.0, 0.0, 0.0,                  \n        near * 2.0 / v, 0.0, 0.0, 0.0, 0.0,          \n        -(far + near) / w, -1.0, 0.0, 0.0,\n        -(far * near * 2.0) / w, 0.0\n    );    \n}\n\nvec2 meshUV(in float id, in vec2 dim){\n    float quadID = floor(id / 6.0);\n    vec2 pos = vec2(mod(quadID,dim.x), mod(floor(quadID / dim.x),dim.y));\n    float pointID = abs(3.0 - mod(id, 6.0));  \n    vec2 uv;\n    if (fract((pos.x+pos.y)*0.5)<0.1){\n        uv = vec2(1.0-floor(pointID / 2.0),mod(pointID, 2.0));\n    } else {\n        uv = vec2(mod(pointID, 2.0), floor(pointID / 2.0));\n    }\n    uv += pos;\n    uv /= dim;\n    return uv;\n}\n\n\nvec3 meshSqhere(in float id, in float split) {\n  if (true) {\n    // ８面体ベースのMesh\n    float d = split * 2.0;\n    float n = floor(id / 6.0);\n    vec2 q = vec2(mod(n,d), mod(floor(n/d),d));\n    vec2 a = q+0.5-split;\n    float s = sign(a.x*a.y);\n    float c = abs(3.0 - mod(id, 6.0));  \n    vec2 uv = vec2(mod(c, 2.0), abs(step(0.0, s)-floor(c / 2.0)));\n    uv = (uv+q)/split -1.0;    \n    if ( uv.x > abs(uv.y)) uv.y -= (uv.x - abs(uv.y))*s;\n    if (-uv.x > abs(uv.y)) uv.y -= (uv.x + abs(uv.y))*s;\n    if ( uv.y > abs(uv.x)) uv.x -= (uv.y - abs(uv.x))*s;\n    if (-uv.y > abs(uv.x)) uv.x -= (uv.y + abs(uv.x))*s;\n    return normalize(vec3(uv , 0.8*(1.0-pow(max(abs(uv.x),abs(uv.y)),2.0)) *s));\n  }\n  else\n  {  \n    // 平面Meshの２枚使い\n\tvec2 dim = vec2(split);\n\tvec2 uv = meshUV(mod(id, 6.0*dim.x*dim.y), dim);\n    vec3 p = vec3(uv * 2.0 - 1.0 , 0.0);\n    p.z = 0.85*(1.0- pow(max(abs(p.x),abs(p.y)),2.0));\n    p.xz *= sign(floor(id/(6.0*dim.x*dim.y))-0.5);\n    return normalize(p);\n  }\n}\n\nvec3 boss(in vec3 p){\n    vec3 ret = vec3(0.0);\n    ret.y += -0.3 * smoothstep(0.2,0.0, length(abs(p.zx)-vec2(0.4,0.4)))*step(0.0,-p.y);\n    ret.y += 0.2 * smoothstep(0.15,0.0, length(abs(p.zx-vec2(0.4,0.0))-vec2(0.0, 0.4)))*step(0.0, p.y);    \n    ret.z += 0.15 * smoothstep(0.4, 0.3, length(p.yx)) * step(0.0, p.z);\n    ret.z += -0.15 * smoothstep(0.1, 0.0, length(abs(p.yx) - vec2(0.0, 0.15)))*step(0.0, p.z);\n    ret.z += -0.1 * smoothstep(0.1, 0.0, length(abs(p.yx-vec2(0.4,0.0))-vec2(0.0,0.3)))*step(0.0, p.z);\n    ret.z += -0.15 * smoothstep( 0.1, 0.0, length(p.yx - vec2(0.35,0.0))) * step(0.0, -p.z);    \n    return ret;\n}\n\nfloat map(in vec3 p) // distance function\n{   \n    p -= boss(p);\n    return (length(p) - 1.0);\n}\n\nvec3 calcNormal(in vec3 p)\n{\n    vec2 e = vec2(1.0,-1.0)*0.002;\n    return normalize(\n        e.xyy*map(p+e.xyy)+e.yyx*map(p+e.yyx)+ \n        e.yxy*map(p+e.yxy)+e.xxx*map(p+e.xxx));\n}\n\nvoid main() {\n  \n  mat4 pMatrix = perspective(45.0, resolution.x/resolution.y, 0.1, 100.0);\n  mat4 vMatrix = mat4(1.0);\n  vMatrix[3].z = -3.5; \n  float split =  floor(sqrt(floor(vertexCount/6.0)));\n  split = floor(split/2.0);\n  vec3 p = meshSqhere(vertexId, split);\n  p += boss(p);\n  vec3 nor = calcNormal(p);  \n  vec3 col = vec3(0.8,0.5,0.3);\n  vec3 li = normalize(vec3(0.5,1.0,1.0));\n  float dif = clamp(dot(nor,li),0.0,1.0);\n  float amb = max(0.5+0.5*nor.y,0.0); \n  col *= clamp(max(dif,0.3)*amb,0.0,1.0);  \n  p.zx *= rotate(time*0.5);\n  gl_Position = pMatrix *vMatrix  * vec4(p, 1.0);\n  v_color = vec4(col, 1.0);\n}"
  },
  "screenshotURL": "data/images/images-5aqjcrcuwrl0squ63-thumbnail.jpg",
  "hasSound": "",
  "views": "456",
  "likes": "1",
  "revisionId": "ouHkEaRbXSNA9NsoM"
}