{
  "_id": "bN3QdqY39pxGw8csG",
  "owner": {
    "_id": "pNRhszAEASfy6B3Xs",
    "createdAt": {
      "$date": 1453130559425
    },
    "username": "gaz",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/1383190fac8e70cb725c3d76dbc811ba?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1458951994831
  },
  "modifiedAt": {
    "$date": 1459146366446
  },
  "origId": "FvWzPMiZrdqtgEJHY",
  "name": "クラゲ",
  "notes": "",
  "rank": 1.099853875373098,
  "private": false,
  "unlisted": false,
  "username": "gaz",
  "avatarUrl": "https://secure.gravatar.com/avatar/1383190fac8e70cb725c3d76dbc811ba?default=retro&size=200",
  "settings": {
    "num": 32665,
    "mode": "LINES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.592156862745098,
      0.5764705882352941,
      0.49019607843137253,
      1
    ],
    "shader": "vec3 hsv(in float h, in float s, in float v) {\n    return mix(vec3(1.0), clamp((abs(fract(\n        h + vec3(3.0, 2.0, 1.0) / 3.0) * 6.0 - 3.0) - 1.0), 0.0, 1.0), s) * v;\n}\n\nmat4 perspective(in float fovy, in float aspect, in float near, in float far) {\n    float top = near * tan(radians(fovy * 0.5));\n    float right = top * aspect;\n    float u = right * 2.0;\n    float v = top * 2.0;\n    float w = far - near;\n    return mat4(\n        near * 2.0 / u, 0.0, 0.0, 0.0, 0.0,                  \n        near * 2.0 / v, 0.0, 0.0, 0.0, 0.0,          \n        -(far + near) / w, -1.0, 0.0, 0.0,\n        -(far * near * 2.0) / w, 0.0\n    );    \n}\n\nfloat hash(in float n) {\n    return fract(sin(n)*753.5453123);\n}\n    \nvec3 hash31(in float n) {\n    return vec3(hash(n * 0.123), hash(n * 0.456), hash(n * 0.789));        \n}\n\nmat2 rotate(float a) {\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nvec2 meshUV(in float id, in vec2 dim){\n  \tfloat quadId = floor(id / 10.0);\n  \tfloat pointId = mod(id,10.0);\n    \n  \tvec2 pos = vec2(mod(quadId,dim.x),(floor(quadId / dim.x)));\n  \tvec2 p1 = vec2(0,0);\n  \tvec2 p2 = vec2(1,0);\n  \tvec2 p3 = vec2(0,1);\n  \tvec2 p4 = vec2(1,1);\n  \tvec2 uv;\n  \n  \tif (pointId==0.0) uv = p1;\n  \tif (pointId==1.0) uv = p2;\n  \tif (pointId==2.0) uv = p1;\n  \tif (pointId==3.0) uv = p3;\n  \tif (mod(pos.x+pos.y,2.0)<0.5){\n  \t\tif (pointId==4.0) uv = p2;\n  \t\tif (pointId==5.0) uv = p3;\n  \t} else {    \n  \t\tif (pointId==4.0) uv = p1;\n  \t\tif (pointId==5.0) uv = p4;\n  \t}\n  \tif (pointId==6.0) uv = p4;\n  \tif (pointId==7.0) uv = p2;\n  \tif (pointId==8.0) uv = p4;\n  \tif (pointId==9.0) uv = p3;\n    uv += pos;\n    uv /= dim;\n    return uv;\n}\n\nvoid main() {\n\tmat4 pMatrix = perspective(45.0, resolution.x/resolution.y, 0.1, 100.0);\n  \tmat4 vMatrix = mat4(1.0);\n  \tvMatrix[3].z = -3.5; \n  \t\n    vec2 dim = vec2(10);\n    float num = 10.0*dim.x*dim.y;\n    float polyId = floor(vertexId/num);\n    float pointId = mod(vertexId, num);\n    vec3 p = vec3(0);\n    vec2 uv =  meshUV(pointId, dim);\n    p.xy = uv*2.0-1.0;\n    vec3 p1 = p;\n    p.z = 0.85*(1.0- pow(max(abs(p.x),abs(p.y)),2.0));\n    p = normalize(p);\n  \tp = mix(p1,p, 0.7*(smoothstep(0.0,1.0,abs(fract(time*0.2+hash(polyId + 46.12))*2.0-1.0)))+0.3);\n\tp *= 0.35;\n    p.xy *= rotate(time*0.3*hash(polyId + 46.12)+hash(polyId + 78.12));\n    p.yz *= rotate(time*0.5*hash(polyId + 37.12)+hash(polyId + 56.12));  \n    vec3 offset = hash31(polyId * 12.12 + 34.34) * 2.0 - 1.0;\n    vec3 v = hash31(polyId * 56.56 + 78.78) * 2.0 - 1.0;  \n  \toffset = abs(fract(offset + v * time * 0.03) * 2.0 - 1.0) * 2.0 - 1.0;\n    p += offset*2.5;\n  \tgl_Position = pMatrix *vMatrix  * vec4(p, 1.0);\n  \tvec3 col = hsv(hash(polyId * 567.123), 0.5, 0.3);\n  \tv_color = vec4(col, 1.0);\n}\n\n"
  },
  "screenshotURL": "data/images/images-yrushczem24ny5sni-thumbnail.jpg",
  "hasSound": "",
  "views": 248,
  "likes": 0,
  "revisionId": "wr8PEF8PHGX6A8Pes"
}