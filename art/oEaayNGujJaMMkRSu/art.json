{
  "_id": "oEaayNGujJaMMkRSu",
  "owner": {
    "_id": "C2utQTT3TWar9FrqK",
    "createdAt": {
      "$date": {
        "$numberLong": "1655222020443"
      }
    },
    "username": "watermeloon",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/e0a1c061d10e360fcf5646229dd6e29a?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1655326039946"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1655549277607"
    }
  },
  "origId": null,
  "name": "sphere",
  "notes": "based on gman's morp",
  "rank": {
    "$numberDouble": "1.939171183647523"
  },
  "private": false,
  "unlisted": false,
  "username": "watermeloon",
  "avatarUrl": "https://secure.gravatar.com/avatar/e0a1c061d10e360fcf5646229dd6e29a?default=retro&size=200",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/drumandbassarena/azifm-corkscrew\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0.9215686274509803,0.984313725490196,0.9176470588235294,1],\"shader\":\"#define RESOLUTION_OF_MY_DISPLAY 2000.0\\n#define PI radians(180.)\\n\\n//6956\\n \\n//X axis rotation\\nmat4 rotateX(float angleInRadians){\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0, -s, c, 0,\\n      0, 0, 0, 1);  \\n}\\n \\n//Y axis rotation\\nmat4 rotateY(float angleInRadians){\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n//Z axis rotation\\nmat4 rotateZ(float angleInRadians){\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\n//returns the evenly distributed points\\nvec4 FIBO(float rad, float id, float sum){\\n\\n  \\t//golden angle in radians\\n  float phi = PI * (3. - sqrt(5.));\\n\\n  \\t// y goes from 1 to -1\\n  float y = 1. - (id / (sum - 1.)) * 2.;  \\n  float radius = sqrt(1. - y * y);\\n\\n  float theta = phi * id;\\n\\n  float x = cos(theta) * radius;\\n  float z = sin(theta) * radius;\\n  \\t\\n  vec4 point = vec4(x * rad, y * rad, z * rad, 1.);\\n  \\n  float xz = abs(atan(point.x, point.z) - rad / 2.) / PI;\\n  float yy = abs(point.y) * 1.;\\n\\n  float snd = texture2D(sound, vec2(mix(0.1, 0.5, xz), yy)).a;\\n  \\n  point.x *= pow(0.2 + snd, 0.2);\\n  point.y *= pow(0.2 + snd, 0.2);\\n  point.z *= pow(0.2 + snd, 0.2);\\n  \\t\\n  \\n  return point;\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nvoid main(void){\\n  \\n  //rotation velocity\\n  mat4 rotX = rotateX(time * 0.3);\\n  mat4 rotY = rotateY(time * 0.2);\\n  mat4 rotZ = rotateZ(time * 0.3);\\n  \\n  vec4 sphere;\\n  float radius = (abs(sin(time * 0.02)) + 0.9) * .8;\\n  \\n  //initializing the vertices\\n  if(mod(vertexId, 3.) == 0.){\\n    radius *= 0.7;\\n  \\tsphere = FIBO(radius, vertexId, floor(vertexCount / 10.));\\n    //rotation of the sphere\\n  \\tsphere *= rotX;\\n  \\tsphere *= rotY;\\n  \\t//sphere *= rotZ;\\n  }else if(mod(vertexId, 3.) == 1.){\\n    radius *= 0.5;\\n  \\tsphere =  FIBO(radius, vertexId, floor(vertexCount / 10.));\\n    //rotation of the sphere\\n  \\t//sphere *= rotX;\\n  \\tsphere *= rotY;\\n  \\tsphere *= rotZ;\\n  }else{\\n    radius *= 0.4;\\n    sphere =  FIBO(radius * 0.6, vertexId, floor(vertexCount / 10.));\\n    //rotation of the sphere\\n  \\tsphere *= rotX;\\n  \\t//sphere *= rotY;\\n  \\tsphere *= rotZ;\\n  }\\n  \\n  float tm = time * 0.1;\\n  float tm2 = time * 0.13;\\n  \\n  float r  = 2.5;\\n  mat4 mat = persp(radians(60.0), resolution.x / resolution.y, 0.1, 10.0);\\n  vec3 eye = vec3(cos(tm) * r, sin(tm * 0.93) * r, sin(tm) * r);\\n  vec3 target = vec3(0);\\n  vec3 up = vec3(0., sin(tm2), cos(tm2));\\n  \\n  mat *= inverse(lookAt(eye, target, up));\\n  \\n  vec4 denorm = mat * sphere;\\n  \\n  //the sphere\\n  gl_Position = denorm;\\n\\n  //setting a base point size\\n  gl_PointSize =  10.;\\n  //adjusting the point size based on the depth\\n  //gl_PointSize += pow(radius, 4.) * 600.;\\n  //adjustment \\n  gl_PointSize *= 0.03; \\n  //resolution indipendent\\n  gl_PointSize *= resolution.x / RESOLUTION_OF_MY_DISPLAY;\\n  \\n  vec3 color = mix(vec3(0.5, 0, 0), vec3(0, 0, 0.5), sphere.z * 7.3);\\n  v_color = vec4(color, mix(.0, 1., pow(1. * radius * .6 * gl_Position.z, 2.)));\\n  v_color.rgb *= v_color.a;\\n\\n}\\n\"}",
  "screenshotURL": "data/images/images-z3q0env186w8aditu-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "102"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "Duy6d7pjqRaJfAQMq"
}