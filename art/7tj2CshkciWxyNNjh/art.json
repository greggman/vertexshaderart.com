{
  "_id": "7tj2CshkciWxyNNjh",
  "owner": {
    "_id": "CmDKfuGqb3n4wc5um",
    "createdAt": {
      "$date": {
        "$numberLong": "1589106352417"
      }
    },
    "username": "abjeni",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/91501fff291d7e034ce6fecaebc60854?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1589106481903"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1589106481903"
    }
  },
  "origId": null,
  "name": "voxels",
  "notes": "voxels",
  "rank": {
    "$numberDouble": "1.6555370213611929"
  },
  "private": false,
  "unlisted": false,
  "username": "abjeni",
  "avatarUrl": "https://secure.gravatar.com/avatar/91501fff291d7e034ce6fecaebc60854?default=retro&size=200",
  "settings": {
    "num": 20000,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.00784313725490196,
      0.00784313725490196,
      0.00784313725490196,
      1
    ],
    "shader": "#define PI radians(180.)\n#define SIZE 15.0\n#define NUM_CUBES (SIZE*SIZE*SIZE)\n#define NUM_TRIANGLES (NUM_CUBES*18)\n#define NUM_VERTICES (NUM_TRIANGLES*6)\n#define STEP 5.0\n\n#define rot(A) mat2(cos(A),-sin(A),sin(A),cos(A))\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//https://www.shadertoy.com/view/4ttGDH\nvec3 camPath(float t){\n  \n    //return vec3(0, 0, t); // Straight path.\n    //return vec3(-sin(t/2.), sin(t/2.)*.5 + 1.57, t); // Windy path.\n    \n    //float s = sin(t/24.)*cos(t/12.);\n    //return vec3(s*12., 0., t);\n    \n    float a = sin(t * 0.11);\n    float b = cos(t * 0.14);\n    return vec3(a*4. -b*1.5, b*1.7 + a*1.5, t);\n    \n}\n\n//https://www.shadertoy.com/view/4ttGDH\nfloat map(vec3 p){\n \n    p.xy -= camPath(p.z).xy; // Perturb the object around the camera path.\n    \n    p *= 0.4;\n     \n\tp = cos(p*.315*1.25 + sin(p.zxy*.875*1.25)); // 3D sinusoidal mutation.\n    \n    \n    float n = length(p); // Spherize. The result is some mutated, spherical blob-like shapes.\n\n    // It's an easy field to create, but not so great to hone in one. The \"1.4\" fudge factor\n    // is there to get a little extra distance... Obtained by trial and error.\n    return (n - 1.025)*1.33;\n    \n}\n\n\nvoid main() {\n  \n  float speed = 10.0;\n  \n  vec3 wpos = vec3(0);\n  \n  vec3 pos = camPath(time*speed);\n  \n  vec3 lookat = camPath(time*speed+2.0);\n  vec3 forward = normalize(lookat-pos);\n  vec3 left = normalize(cross(vec3(camPath(time*speed+1.0).xy,0),forward));\n  vec3 up = cross(forward,left);\n  \n  float id = vertexId;\n  \n  float numcube = floor(id/18.0);\n  float numquad = floor(id/6.0);\n  float quadid = 3.0-abs(id-numquad*6.0-3.0);\n  float nori = mod(numquad,3.0);\n  //quadid = quadid ^ diri;\n  vec2 quad = vec2(mod(quadid,2.0),mod(floor(quadid*0.5),2.0));\n  \n  \n  vec3 mask;\n  if (nori < 0.5) {\n    mask = vec3(1,0,0);\n  } else if (nori < 1.5) {\n    mask = vec3(0,1,0);\n  } else {\n    mask = vec3(0,0,1);\n  }\n  \n  float size = floor(pow(vertexCount/18.0,1.0/3.0));\n  \n  vec3 blockpos = vec3(\n    mod(floor(numcube),size),\n    mod(floor(numcube/size),size),\n        floor(numcube/size/size))-vec2(floor(size*0.5),0).xxy+floor(pos);\n  \n  bool a = map(blockpos) > 0.0;\n  bool b = map(blockpos+mask) > 0.0;\n  \n  float diri;\n  \n  if (a == b) {\n    gl_Position = vec4(0,0,0,1);\n    return;\n  } else {\n    \n    float diri = 1.0;\n    if (b) {\n      diri = -diri;\n      quad.xy = quad.yx;\n    }\n    \n    vec3 nor = mask*(diri*2.0-1.0);\n\n    wpos += mask.zxy*quad.x;\n    wpos += mask.yzx*quad.y;\n\twpos += mask;\n    wpos += blockpos;\n\n    wpos -= 0.5;\n\n    //wpos += vec3(data.xyz);\n    //wpos += float(gl_VertexID/6);\n    //wpos += u_centerPosition;\n\n\n\n    vec3 p = wpos-pos;//vec3(sin(id+time),cos(id+time),id);\n    \n    p = vec3(-dot(p,left),dot(p,up),dot(p,forward));\n    \n    p.x *= resolution.y/resolution.x;\n\n    gl_Position = vec4(p.xy, p.z*p.z*0.01, p.z);\n\n\n    float hue = (id * 1.001);\n    v_color = vec4(nor*0.5+0.5, 1);\n  }\n}"
  },
  "screenshotURL": "data/images/images-omb48439vokffgmec-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "169"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "63somzC2eGTdHPqnA"
}