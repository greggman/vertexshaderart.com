{
  "_id": "zd2E5vCZduc5JeoFz",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": 1445777397953
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1499272027406
  },
  "modifiedAt": {
    "$date": 1499301648610
  },
  "origId": "d6J9M7EJyoAgw5NcA",
  "name": "cubespace",
  "notes": "",
  "rank": 10.148450586356358,
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/wearethebraveofficial/alan-fitzpatrick-friday-night-dancing-skream-remix",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/* üêß\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n\n\n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n// times 2 minus 1\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// times .5 plus .5\nfloat t5p5(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\nvec3 getQuadStripPoint(const float id) {\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\n  return vec3(ux, vy, 0);\n}\n\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float u = ux / numEdgePointsPerCircle;\n  float v = mix(inner, 1., vy);\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float s = sin(a);\n  float c = cos(a);\n  float x = c * v;\n  float y = s * v;\n  float z = 0.;\n  pos = vec3(x, y, z);  \n}\n\n\n#define CUBE_POINTS_PER_FACE 6.\n#define FACES_PER_CUBE 6.\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\n  float sideId = mod(quadId, 3.);\n  float flip   = mix(1., -1., step(2.5, quadId));\n  // 0 1 2  1 2 3\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\n  float a = pointId * PI * 2. / 4. + PI * 0.25;\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\n  vec3 n = vec3(0, 1, 0) * flip;\n  float lr = mod(sideId, 2.);\n  float ud = step(2., sideId);\n  mat4 mat = rotX(lr * PI * 0.5);\n  mat *= rotZ(ud * PI * 0.5);\n  position = (mat * vec4(p, 1)).xyz;\n  normal = (mat * vec4(n, 0)).xyz;\n}\n\nfloat Hash( vec2 p) {\n     vec3 p2 = vec3(p.xy,1.0);\n    return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*3758.5453123);\n}\n\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n     vec2 f = fract(p);\n     f *= f * (3.0-2.0*f);\n\n    return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),\n               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),\n               f.y);\n}\n\nfloat fbm(vec2 p) {\n     float v = 0.0;\n     v += noise(p*1.0)*.5;\n//     v += noise(p*2.)*.25;\n//     v += noise(p*4.)*.125;\n     return v;\n}\n\nfloat crv(float v) {\n  return fbm(vec2(v, v * 1.23));\n  //float o = sin(v) + sin(v * 2.1) + sin(v * 4.2) + sin(v * 8.9); \n  //return o / 4.;\n}\n\nvec3 fgetCurvePoint(float t) {\n//  return vec3(sin(-t), sin(t * 0.8), sin(t * 0.6));\n//  return vec3( mod(t, 1.) * 0.01, 0, mod(t, 1.));\n  return vec3(\n    crv(t),\n    crv(t + .3),\n    crv(t + .6)\n  ) * 2. - 1.;\n}  \n\nvec3 getCurvePoint(const float id) {\n  return vec3(\n    sin(id * 0.99),\n    sin(id * 2.43),\n    sin(id * 1.57));\n}\n\nconst float expand = 80.0;\n\n\nvoid sky(const float vertexId, const float vertexCount, float base, const mat4 cmat, out vec3 pos, out vec4 color) {\n  float starId = floor(vertexId / 3.);\n  float numStars = floor(vertexCount / 3.);\n  float starV = starId / numStars;\n  \n  float h = hash(starId * 0.017);\n  \n  \n  float pId = mod(vertexId, 3.);\n  //float sz = h * 2.;\n  float sz = clamp(500.0 / min(resolution.x, resolution.y), 2., 200.); \n  \n  pos = normalize(vec3(\n    t2m1(hash(starId * 0.123)),\n    t2m1(hash(starId * 0.353)),\n    t2m1(hash(starId * 0.627)))) * 500. + cmat[3].xyz;\n  pos += cmat[0].xyz * sz * step(0.5, pId);\n  pos += cmat[1].xyz * sz * step(1.5, pId);\n  \n  color = vec4(h, h, h, 1);\n}\n\nvoid cube(const float vertexId, const float vertexCount, const float base, const mat4 cmat, const mat4 vmat, out vec3 pos, out vec4 color) {\n  vec3 cpos;\n  vec3 cnormal;\n  \n  float pointId = vertexId;\n  getCubePoint(pointId, cpos, cnormal);\n  float cubeId = floor(pointId / 36.);\n  float numCubes = floor(vertexCount / 36.);\n  float down = floor(pow(numCubes, .333));\n  float across = floor(floor(numCubes / down) / down);\n  float deep = floor(numCubes / (down * across));\n  \n  float cx = mod(cubeId, across);\n  float cy = mod(floor(cubeId / across) , down);\n  float cz = floor(cubeId / (across * down));\n  \n  float cu = cx / (across - 1.);\n  float cv = cy / (down - 1.);\n  float cw = cz / (deep - 1.);\n  \n  float ca = cu * 2. - 1.;\n  float cd = cv * 2. - 1.;\n  float ce = cw * 2. - 1.;\n  \n  float tm = time * 0.1;\n  mat4 mat = ident();\n \n  const float dim = 640.0;\n  vec3 t = vec3(\n      hash(cubeId * 0.123),\n      hash(cubeId * 0.719),\n      hash(cubeId * 0.347)) * 2. - 1.;\n  \n  \n  \n  float s = texture2D(sound, vec2(\n    mix(0.01, 0.5, hash(cubeId * 0.379)),\n    length(t) * .05)).a;\n\n  float pump = step(0.7, s);\n  \n  \n  \n  #if 0\n    mat *= trans(vec3(ca, ce, cd) * 120.0);\n    mat *= uniformScale(2.);\n  #else\n    mat *= trans(t * dim * .5);\n    mat *= rotX(time * 1. + cubeId);\n    mat *= rotZ(time * 1.1 + cubeId);\n    mat *= uniformScale(mix(4., 20. + pump * 20., pow(s, 5.)));\n   #endif\n  \n  pos = (mat * vec4(cpos, 1)).xyz;\n  vec3 n = normalize((mat * vec4(cnormal, 0)).xyz);\n  \n  \n  float hue = time * .03 + mix(1., 1.1, pump);//abs(ca * cd) * 2.;\n  float sat = 1.;mix(1., 0., abs(ca));\n  float val = 1.;mix(1., 0.5, abs(cd));\n  vec3 tcolor = hsv2rgb(vec3(hue, sat, val));\n  \n  vec3 lightDir = normalize(vec3(0.3, 0.4, -1));\n  vec3 lightPos = vec3(0);\n  vec3 surfaceToLight = normalize(lightPos - pos);\n  vec3 surfaceToView = normalize(cmat[3].xyz - pos);\n  vec3 halfVector = normalize(surfaceToLight + surfaceToView);\n \n  float light = dot(n, surfaceToLight);\n  float specular = pow(clamp(dot(n, halfVector), 0., 1.), 20.);\n  \n  //color = vec4(tcolor * (dot(n, lightDir) * 0.5 + 0.5), 1);  \n  color = vec4(tcolor * light + vec3(specular), 1); \n  \n  color.a = mix(1., 10., pump);\n  color.rgb *= color.a;\n}\n\nvoid main() {\n  const float numCubePoints = 90000.0;\n    \n  //float base = 15.;  // good place to adjust\n  float base = time * 0.125;\n\n  const float coff = 0.14;\n  \n  vec3 b0 = getCurvePoint(base + coff * 0.);\n  vec3 b1 = getCurvePoint(base + coff * 1.);\n  vec3 b2 = getCurvePoint(base + coff * 2.);\n  \n  vec3 c0 = normalize(b1 - b0);\n  vec3 c1 = normalize(b2 - b1);\n  \n  vec3 czaxis = normalize(c1 - c0);\n  vec3 cxaxis = normalize(cross(c0, c1));\n  vec3 cyaxis = normalize(cross(czaxis, cxaxis));\n  \n  mat4 pmat = persp(radians(60.0), resolution.x / resolution.y, .1, 1000.0);\n\n  vec2 ms = vec2(0); //texture2D(touch, vec2(0, 0)).xy + vec2(0, 1);  \n  \n  vec3 eye    = b0 * expand + cyaxis * .001 + czaxis * 2.2;\n  vec3 target = b1 * expand + cyaxis * .002 + czaxis + ms.x * cxaxis * 2. + ms.y * cyaxis * 40.;\n  vec3 up     = cyaxis;\n  \n // eye = vec3(1, 1, 1);\n//  target = vec3(0);\n//  up = vec3(0,1,0);\n  \n  mat4 cmat = lookAt(eye, target, up);\n  mat4 vmat = rotZ(asin(up.y) * 1.) * inverse(cmat);\n  \n  vec3 pos;\n  vec4 color;\n  \n  if (vertexId < numCubePoints) {\n    cube(vertexId, vertexCount, base, cmat, vmat, pos, color);\n  } else {\n    sky(vertexId, vertexCount, base, cmat, pos, color);\n  }\n  \n  gl_Position = pmat * vmat * vec4(pos, 1);\n  v_color = color;\n  \n  float cz = gl_Position.z / gl_Position.w * .5 + .5;\n  v_color.rgb = mix(v_color.rgb, background.rgb, mix(4., 0., cz)); \n  \n}\n"
  },
  "screenshotURL": "data/images/images-92yttslpq6f0cneok-thumbnail.jpg",
  "hasSound": true,
  "views": 47577,
  "likes": 10,
  "revisionId": "nJe2S88pqGbbh4Xb7"
}