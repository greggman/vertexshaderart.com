{
  "_id": "QgXakG4wfDMZ4Au6n",
  "owner": {
    "_id": "aGApaqB439oYBvo86",
    "createdAt": {
      "$date": {
        "$numberLong": "1499871404427"
      }
    },
    "profile": {
      "name": "Ryota Takemoto",
      "avatarUrl": "https://avatars.githubusercontent.com/r21nomi?s=200"
    },
    "username": "r21nomi"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1529239337813"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1529773152539"
    }
  },
  "origId": null,
  "name": "cube",
  "notes": "",
  "rank": {
    "$numberDouble": "1.1484493445971193"
  },
  "private": false,
  "unlisted": false,
  "username": "r21nomi",
  "avatarUrl": "https://avatars.githubusercontent.com/r21nomi?s=200",
  "settings": "{\"num\":16314,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/meiden/meiden-im-hereeeeeee\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,1,1,1],\"shader\":\"float CUBE_SIZE = 0.08;\\n\\nfloat map(float value, float beforeMin, float beforeMax, float afterMin, float afterMax) {\\n\\treturn afterMin + (afterMax - afterMin) * ((value - beforeMin) / (beforeMax - beforeMin));\\n}\\n\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nvec3  saturate(vec3 x)  {\\n\\treturn clamp(x, 0.0, 1.0);\\n}\\n\\nvec3 hue2rgb(float h) {\\n    h = fract(h) * 6.0 - 2.0;\\n    return saturate(vec3(abs(h - 1.0) - 1.0, 2.0 - abs(h), 2.0 - abs(h - 2.0)));\\n}\\n\\nmat3 rotateX(float rad) {\\n    float c = cos(rad);\\n    float s = sin(rad);\\n    return mat3(\\n        1.0, 0.0, 0.0,\\n        0.0, c, s,\\n        0.0, -s, c\\n    );\\n}\\n\\nmat3 rotateY(float rad) {\\n    float c = cos(rad);\\n    float s = sin(rad);\\n    return mat3(\\n        c, 0.0, -s,\\n        0.0, 1.0, 0.0,\\n        s, 0.0, c\\n    );\\n}\\n\\nfloat rotr3(float x, float n) {\\n    return floor(x / pow(2.0, n)) + mod(x * pow(2.0, 3.0 - n), 8.0);\\n}\\n\\nfloat mod2(float x) {\\n    return mod(floor(x), 2.0);\\n}\\n\\nfloat VERTEX_COUNT_FOR_SURFACE = 6.0;\\nfloat SURFACE_COUNT_FOR_CUBE = 6.0;\\nfloat VERTEX_COUNT_FOR_CUBE = VERTEX_COUNT_FOR_SURFACE * SURFACE_COUNT_FOR_CUBE;\\n\\nvec3 cube(in float id) {\\n    float faceId = mod(floor(id / VERTEX_COUNT_FOR_SURFACE), SURFACE_COUNT_FOR_CUBE);\\n    float faceDiv3 = floor(faceId / 3.0);\\n    float faceMod3 = mod(faceId, 3.0);\\n    float quadId = mod(id, VERTEX_COUNT_FOR_SURFACE);\\n    float baseId = faceId * SURFACE_COUNT_FOR_CUBE;\\n    float newVertId = abs(faceDiv3 == 0.0 ? quadId - 2.0 : 3.0 - quadId);\\n  \\n  \\tfloat x = rotr3(newVertId + faceDiv3 * 4.0,  faceMod3);\\n  \\n    return vec3(mod2(x), mod2(x / 2.0), mod2(x / 4.0));\\n}\\n\\nvoid main() {\\n    vec3 cubePosition = cube(vertexId);\\n    float cubeId = floor(vertexId / VERTEX_COUNT_FOR_CUBE);\\n    float faceId = mod(floor(vertexId / VERTEX_COUNT_FOR_SURFACE), SURFACE_COUNT_FOR_CUBE);\\n  \\n  \\tfloat scaleOffset = mod(cubeId, 5.0);\\n  \\tfloat snd = texture2D(sound, vec2(mix(0.1, 0.5, hash(scaleOffset)), hash(scaleOffset) / 5.0)).x;\\n  \\tfloat scaleBySound = 0.2 * mix(0.0, 4.0, pow(snd, 5.0));\\n  \\n    cubePosition -= 0.5; // Fix center for cube.\\n    cubePosition *= scaleBySound * map(sin(time * 10.0 *  fract(cubeId * 0.9)), -1.0, 1.0, 0.5, 1.0);\\n  \\n  \\tcubePosition.x += sin(cubeId) * 0.5;\\n  \\tcubePosition.z += cos(cubeId) * 0.5;\\n  \\n    // Rotate first not to make rotation for whole boxes.\\n    mat3 rotX = rotateX(time);\\n    mat3 rotY = rotateY(time);\\n    cubePosition *= rotX * rotY;\\n \\n    // Layout\\n  \\tfloat cubeCount = 20.0;\\n    float gridX = (fract(cubeId / cubeCount) - 0.5) * 1.5;\\n    float gridY = floor(cubeId / cubeCount) * 0.1 - 1.0;\\n  \\n    cubePosition.x += gridX;\\n    cubePosition.y += gridY;\\n    gl_Position = vec4(cubePosition, 1.0);\\n  \\n  \\tvec3 color = vec3(faceId / SURFACE_COUNT_FOR_CUBE);\\n  \\tcolor += fract(cubeId / 6.0);\\n  \\n\\tfloat pump = step(0.3, snd);\\n  \\tcolor *= hue2rgb(cubeId * 0.5) * pump;\\n  \\tv_color = vec4(color, 1.0);\\n}\"}",
  "screenshotURL": "data/images/images-tqvf2059n0axfkngr-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "272"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "dLaPGixf2HJXaaLKs"
}