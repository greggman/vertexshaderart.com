{
  "_id": "gZjPchBFJAGSk4ZTK",
  "owner": {
    "_id": "Q5T8njsEaGYsK34dZ",
    "createdAt": {
      "$date": {
        "$numberLong": "1448898157107"
      }
    },
    "profile": {
      "name": null,
      "avatarUrl": "https://avatars.githubusercontent.com/8BitRick?s=200"
    },
    "username": "8bitrick"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1449070163109"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1449070163109"
    }
  },
  "origId": null,
  "name": "Simple Music Line",
  "rank": {
    "$numberDouble": "1.589511228354226"
  },
  "private": false,
  "unlisted": false,
  "username": "8bitrick",
  "settings": {
    "num": 50,
    "mode": "LINE_STRIP",
    "sound": "https://soundcloud.com/mortengranau/morten-granau-not-over-yet",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "// Simple Line which responds to music\n// This is intended to be super simple, to learn how to use VertexShaderArt\n// If you're just beginning please feel free to experiment with this or use as a starting point for your shaders\n\nvoid main()\n{\n  // vertex_percent is vertexId mapped to [0..1]\n  float vertex_percent = vertexId / (vertexCount-1.0); // We use -1.0 to ensure a point exists at the end\n  float x = vertex_percent*2.0 - 1.0; // Mapping vertex_percent [0..1] to X screen range, which is [-1..1]\n  \n  // sound texture has (amplitude, history) for (u,v). \n  // u range is [0..1]: 0 is lowest bass, 1 is highest treble\n  // v range is [0..1]: 0 is right now, 1 is 4 seconds in the past\n  // It is all in the alpha channel of the sound texture\n  \n  // Set y position to amplitude in [0..1] range.\n  // Y will be 1.0 at peak amplitude (top of screen) and 0.0 for silence (middle of screen)\n  float y = texture2D(sound,vec2(vertex_percent,0.0)).a; \n  \n  gl_PointSize = 10.0; // Set point size in case want to render points instead of line, not used in line\n  gl_Position = vec4(x,y,0,1); // simply plot onto screen space at z=0 with opacity=1, screen range is [-1..1] for both x and y\n  v_color = vec4(1.0); // Just setting to the color white with opacity=1\n}\n\n//===================================================================================\n// ** Experiment **\n// Try setting primitive to \"POINTS\" in the drop down\n// Type a new number of verts in the text box at top. Try something small like \"10\".\n// Keep adding zeros to 100, 1000, 10000 and watch sampling fidelity increase.\n//===================================================================================\n\n\n// Sometimes looking at code is easier without comments\n// Here it is without my clutter.\n// You can click \"+\" at the top of this window to create a new clean shader.\n// Then cut at paste this code into that shader\n// Don't forget to get a song from SoundCloud to paste into the URL in top right.\n//\n/*\n\nvoid main()\n{\n  float vertex_per = vertexId / (vertexCount-1.0);\n  float x = vertex_per*2.0 - 1.0;\n  float y = texture2D(sound,vec2(vertex_per,0.0)).a;\n  gl_PointSize = 10.0;\n  gl_Position = vec4(x,y,0,1);\n  v_color = vec4(1.0);\n}\n\n*/\n"
  },
  "screenshotURL": "data/images/images-tbc7952hrkj9bo5bp-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "355"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "H7WobSJ52f5N58vas",
  "avatarUrl": "https://avatars.githubusercontent.com/8BitRick?s=200"
}