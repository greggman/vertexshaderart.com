{
  "_id": "GEtBB56A9P7F4wjdG",
  "owner": {
    "_id": "AKayQxJZqd5z7boy2",
    "createdAt": {
      "$date": 1550038451574
    },
    "profile": {
      "first_name": "Archer",
      "last_name": "Wann",
      "avatarUrl": "https://lh5.googleusercontent.com/-yNdyToHV35U/AAAAAAAAAAI/AAAAAAAABxw/qQAHdzq4gr8/photo.jpg",
      "info": "CS student at UVU"
    },
    "username": "archer"
  },
  "createdAt": {
    "$date": 1550170457066
  },
  "modifiedAt": {
    "$date": 1550175080008
  },
  "origId": null,
  "name": "unnamed",
  "notes": "",
  "rank": 1.9602518238914557,
  "private": false,
  "unlisted": true,
  "username": "archer",
  "avatarUrl": "https://lh5.googleusercontent.com/-yNdyToHV35U/AAAAAAAAAAI/AAAAAAAABxw/qQAHdzq4gr8/photo.jpg",
  "settings": {
    "num": 100,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI radians(180.)\n#define NUM_SEGMENTS 2.\n#define NUM_POINTS (NUM_SEGMENTS * 2.)\n#define STEP 1.\n\nvec4 quatFromAxisAngle(vec3 axis, float angle) {\n  vec4 qr;\n  \n  float half_angle = angle/2.;\n  qr.x = axis.x * sin(half_angle);\n  qr.y = axis.y * sin(half_angle);\n  qr.z = axis.z * sin(half_angle);\n  qr.w = cos(half_angle);\n  \n  return qr;\n}\n\nvec4 quatFromPos(vec3 pos) {\n  vec4 qp;\n  \n  qp.x = pos.x;\n  qp.y = pos.y;\n  qp.z = pos.z;\n  qp.w = 0.;\n  \n  return qp;\n}\n\nvec4 quatInverse(vec4 q) {\n return vec4(-q.x, -q.y, -q.z, q.w);\n}\n\nvec4 quatMultiply(vec4 q1, vec4 q2) {\n  vec4 q;\n  \n  q.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);\n  q.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);\n  q.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);\n  q.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);\n  \n  return q;\n}\n\nvec3 rotatePosAboutAxle(vec3 pos, vec3 axis, float angle) {\n  vec4 qr = quatFromAxisAngle(axis, angle);\n  vec4 qp = quatFromPos(pos);\n  vec4 qi = quatInverse(qr);\n  \n  vec4 qtemp = quatMultiply(qr, qp);\n  qtemp = quatMultiply(qtemp, qi);\n  \n  return qtemp.xyz;\n}\n\nvec3 rotatePosXYZ(vec3 pos, vec3 angle) {\n  vec3 rotPos = vec3(pos);\n  \n  rotPos = rotatePosAboutAxle(rotPos, vec3(0, 0, 1), angle.z);\n  rotPos = rotatePosAboutAxle(rotPos, vec3(0, 1, 0), angle.y);\n  rotPos = rotatePosAboutAxle(rotPos, vec3(1, 0, 0), angle.x);\n  \n  return rotPos;\n}\n\nvoid getVertInQuad(const float vert, out float quadId, out vec2 inQuadPos) {\n  \n  float inQuadId = mod(vert, 6.);\n  \n  if (inQuadId == 0.) {\n    inQuadPos = vec2(0, 0);\n  } else if (inQuadId == 1.) {\n    inQuadPos = vec2(1, 0);\n  } else if (inQuadId == 2.) {\n    inQuadPos = vec2(0, 1);\n  } else if (inQuadId == 3.) {\n    inQuadPos = vec2(1, 0);\n  } else if (inQuadId == 4.) {\n    inQuadPos = vec2(1, 1);\n  } else if (inQuadId == 5.) {\n    inQuadPos = vec2(0, 1);\n  }\n  \n  inQuadPos -= 0.5;\n  \n  quadId = floor(vert / 6.);\n}\n\nvoid getQuadInBox(const float quadId, out float boxId, out vec3 quadPos, out vec3 quadAngle) {\n  boxId = floor(quadId / 6.0);\n  \n  quadAngle = vec3(0., 0., 0.);\n  \n  if (boxId == 0.) {\n    quadPos = vec3(0, 0, 1);\n  } else if (boxId == 1.) {\n\tquadPos = vec3(1, 0, 0);\n    quadAngle.y = PI / 2.;\n  } else if (boxId == 2.) {\n\tquadPos = vec3(0, 0, -1);\n    quadAngle.y = PI;\n  } else if (boxId == 3.) {\n\tquadPos = vec3(-1, 0, 0);\n    quadAngle.y = PI * 3. / 2.;\n  } else if (boxId == 4.) {\n\tquadPos = vec3(0, 1, 0);\n    quadAngle.x = PI * 3. / 2.;\n  } else if (boxId == 5.) {\n\tquadPos = vec3(0, -1, 0);\n    quadAngle.x = PI * 1. / 2.;\n  }\n  \n  quadPos /= 2.;\n}\n\nvoid main() {\n  float quadId;\n  vec2 vertPos;\n  getVertInQuad(vertexId, quadId, vertPos);\n  \n  float boxId;\n  vec3 quadPos;\n  vec3 quadRot;\n  getQuadInBox(quadId, boxId, quadPos, quadRot);\n  \n  vec3 truePos = rotatePosXYZ(vec3(vertPos, 0.), quadRot);\n  truePos += quadPos;\n  truePos = rotatePosAboutAxle(truePos, vec3(0, 1, 1), mod(time / 5., 2. * PI));\n  truePos *= 0.1;\n  \n  truePos.z -= .5;\n  \n  gl_Position = vec4(truePos, 1.);\n  v_color = vec4(1., 1., 1., 1.);\n}"
  },
  "screenshotURL": "data/images/images-18v7oi81sokyupuma-thumbnail.jpg",
  "hasSound": "",
  "views": 4,
  "likes": 0,
  "revisionId": "5yTsxt4t7N4nE6ueA"
}