{
  "_id": "hGb3X2yH769jCbfDy",
  "owner": {
    "_id": "pNRhszAEASfy6B3Xs",
    "createdAt": {
      "$date": {
        "$numberLong": "1453130559425"
      }
    },
    "username": "gaz",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/1383190fac8e70cb725c3d76dbc811ba?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1453131558231"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1453245775680"
    }
  },
  "origId": null,
  "name": "Wild Knot",
  "notes": "",
  "rank": {
    "$numberDouble": "1.0172056287773146"
  },
  "private": false,
  "unlisted": false,
  "username": "gaz",
  "avatarUrl": "https://secure.gravatar.com/avatar/1383190fac8e70cb725c3d76dbc811ba?default=retro&size=200",
  "settings": "{\"num\":14680,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/chibi-tech/lolitazia-season\",\"lineSize\":\"CSS\",\"backgroundColor\":[0.011764705882352941,0.3607843137254902,0.47843137254901963,1],\"shader\":\"// http://jsdo.it/gaziya/zQos\\n\\n#define PI 3.14159265359\\n#define PI2 ( PI * 2.0 )\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\n//https://www.shadertoy.com/view/ltXGW2 \\nvec3 gc1,gs1,gc2,gs2,gc3,gs3;\\nfloat freq2;\\n//knot's from dr2 @ https://www.shadertoy.com/view/4ts3zl\\nvoid InitCurve(float tm){\\n\\tfloat t=1.0+sin(tm);\\n\\tfreq2=mix(2.0,5.0,clamp(t-1.0,0.0,1.0));\\n\\tgc1 = mix(vec3 ( 41,   36,   0), mix(vec3 (  32,   94,   16),vec3 ( -22,  11,   0),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\\n\\tgs1 = mix(vec3 (-18,   27,   45),mix(vec3 ( -51,   41,   73),vec3 (-128,   0,   0),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\\n\\tgc2 = mix(vec3 (-83, -113,  -30),mix(vec3 (-104,  113, -211),vec3 (   0,  34,   8),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\\n\\tgs2 = mix(vec3 (-83,   30,  113),mix(vec3 ( -34,    0,  -39),vec3 (   0, -39,  -9),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\\n\\tgc3 = mix(vec3 (-11,   11,  -11),mix(vec3 ( 104,  -68,  -99),vec3 ( -44, -43,  70),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\\n\\tgs3 = mix(vec3 ( 27,  -27,   27),mix(vec3 ( -91, -124,  -21),vec3 ( -78,   0, -40),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\\n}\\nvec3 F (float a)  //dr2's knots\\n{\\n\\treturn (gc1 * cos (a)  + gs1 * sin (a) +\\n\\t\\tgc2 * cos (freq2 * a) + gs2 * sin (freq2 * a) +\\n\\t\\tgc3 * cos (3. * a) + gs3 * sin (3. * a))*0.01;\\n}\\n/////////\\n\\n\\nvec3 func(in float a) {\\n    InitCurve(time);\\n    return F(a * PI2);\\n}        \\n    \\nvec4 quaternion(in vec3 axis, in float theta) {\\n    return vec4(axis * sin(theta / 2.0), cos(theta / 2.0));\\n}\\n\\nvec3 qTransform(in vec4 q, in vec3 v) {\\n    return v + 2.0 * cross(cross(v, q.xyz) - q.w * v, q.xyz);\\n}\\n\\nvec3 map(in vec2 uv) {\\n    const float r = 0.15;\\n    vec3 coord = func(uv.y);\\n    vec3 delta = normalize(func(uv.y + 0.01) - func(uv.y - 0.01));\\n    vec4 q = quaternion(delta, uv.x * PI2);\\n    vec3 p = normalize(cross(\\n        func(uv.y + 0.01) - coord,\\n        func(uv.y - 0.01) - coord\\n        )) * r;\\n    return coord + qTransform(q, p);\\n}    \\n    \\nvec3 normal(in vec2 p) {\\n    vec2 e = vec2(0.001, 0.0);\\n    return normalize(cross(\\n        map(p + e) - map(p - e),\\n        map(p + e.yx) - map(p - e.yx)\\n    ));\\n}\\n    \\nmat4 perspective(in float fovy, in float aspect, in float near, in float far)\\n{\\n    float top = near * tan(fovy * PI / 360.0);\\n    float right = top * aspect;\\n    float u = right * 2.0;\\n    float v = top * 2.0;\\n    float w = far - near;\\n    return mat4(\\n        near * 2.0 / u, 0.0, 0.0, 0.0, 0.0,                  \\n        near * 2.0 / v, 0.0, 0.0, 0.0, 0.0,          \\n        -(far + near) / w, -1.0, 0.0, 0.0,\\n        -(far * near * 2.0) / w, 0.0\\n    );    \\n}\\n\\nmat2 rotate(in float a) {\\n\\treturn mat2(cos(a), sin(a), -sin(a), cos(a));\\t\\n}\\n\\nvoid main() {\\n    float a = floor(vertexId / 6.0);\\n    float b = abs(3.0 - mod(vertexId, 6.0));\\n  \\tfloat polyCount = vertexCount/6.0;\\n  \\tvec2 dim = floor(vec2(sqrt(polyCount/8.0), sqrt(polyCount*8.0)));\\n  \\t//vec2 dim = vec2(32, 256); //vertexCount = 49152\\n    vec2 p = vec2(mod(a, dim.x), floor(a / dim.x));\\n    vec2 offset = vec2(mod(b, 2.0), floor(b / 2.0));\\n    vec2 uv = (p + offset) / dim;\\n    vec3 pos = map(uv);\\n    vec3 nor = normal(uv);\\n    float t = time * 1.2;\\n    pos.xz *= rotate(t);    \\n    nor.xz *= rotate(t);\\n    mat4 vMatrix = mat4(1.0);\\n    vMatrix[3].z = -8.0;    \\n  \\tmat4 pMatrix = perspective(45.0, resolution.x / resolution.y, 0.1, 100.0);\\n    gl_Position = pMatrix * vMatrix * vec4(pos, 1.0);\\n    vec3 light = normalize(vec3(0.2, 0.3, 1.0));\\n  \\tvec3 col = hsv2rgb(vec3(time * 0.03, 0.8, 1.0));\\n  \\tcol *= max(dot(light, nor), 0.2);\\n    col += pow(max(dot(vec3(0, 0, 1), reflect(-light, nor)), 0.0), 50.0);\\n    col = pow(col, vec3(0.8));  \\n  \\tv_color = vec4(col,1.0);\\n}\\n\"}",
  "screenshotURL": "data/images/images-zfzfyo0zrl0msrsq9-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "270"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "c7eoFSRRJGRcoQT2Y"
}