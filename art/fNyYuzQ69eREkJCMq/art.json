{
  "_id": "fNyYuzQ69eREkJCMq",
  "owner": {
    "_id": "vWQZQrMg9M6JE8pX9",
    "createdAt": {
      "$date": {
        "$numberLong": "1575718900497"
      }
    },
    "username": "evan_chen",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/cf83fa7e8a58a2de525a1b42e8550220?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1579398666268"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1579874952997"
    }
  },
  "origId": "5NxpTo5tmZ5jQ3ZE5",
  "name": "影 流 の 花",
  "notes": "",
  "rank": {
    "$numberDouble": "1.2120652882779803"
  },
  "private": false,
  "unlisted": true,
  "username": "evan_chen",
  "avatarUrl": "https://secure.gravatar.com/avatar/cf83fa7e8a58a2de525a1b42e8550220?default=retro&size=200",
  "settings": "{\"num\":6000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/jiangxueer/dj\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,0.8901960784313725,0.8431372549019608,1],\"shader\":\"#pragma once\\n/*                               \\n\\n\\n\\n                                             \\n            \\n\\n                                             \\n                                     \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nFinal View: \\n\\nhttps://www.bilibili.com/video/av84117427/\\n\\n这就是你分手的借口，\\n🕺🕺🕺如果让你重新来过，\\n🕺🕺🕺你会不会爱我，\\n🕺🕺🕺爱情让人拥有快乐，\\n🕺🕺🕺也会带来折磨，\\n🕺🕺🕺曾经和你一起走过传说中的爱河，\\n🕺🕺🕺已经被我泪水淹没，\\n🕺🕺🕺变成痛苦的爱河这就是你分手的借口，🕺🕺🕺 \\n\\n@31/12/2019                                            \\n*/                                           \\n#define PI radians(180.)\\n\\n\\nmat4 mAspect = mat4\\n(\\n  1, 0, 0, 0,\\n  0, resolution.x / resolution.y, 0, 0,\\n  0, 0, 1, 0,\\n  0, 0, 0, 1\\n); \\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n// terrain function from mars shader by reider\\n// https://www.shadertoy.com/view/XdsGWH\\nconst mat2 mr = mat2 (0.84147,  0.54030,\\n\\t\\t\\t\\t\\t  0.54030, -0.84147 );\\nfloat hash2( in float n )\\n{\\n\\treturn fract(sin(n)*43758.5453);\\n}\\nfloat noise(in vec2 x)\\n{\\n\\tvec2 p = floor(x);\\n\\tvec2 f = fract(x);\\n\\t\\t\\n\\tf = f*f*(3.0-2.0*f);\\t\\n\\tfloat n = p.x + p.y*57.0;\\n\\t\\n\\tfloat res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\\n\\t\\t\\t\\t\\tmix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\\n\\treturn res;\\n}\\nfloat fbm( in vec2 p )\\n{\\n\\tfloat f;\\n\\tf  =      0.5000*noise( p ); p = mr*p*2.02;\\n\\tf +=      0.2500*noise( p ); p = mr*p*2.33;\\n\\tf +=      0.1250*noise( p ); p = mr*p*2.01;\\n\\tf +=      0.0625*noise( p ); p = mr*p*5.21;\\n\\t\\n\\treturn f/(0.9375)*smoothstep( 260., 768., p.y ); // flat at beginning\\n}\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\nvec3 getQPoint(const float id) {\\n  float outId = mix(id, 8. - id, step(2.5, id));\\n  float ux = floor(outId / 6.) + mod(outId, 2.);\\n  float vy = mod(floor(outId / 2.) + floor(outId / 3.), 2.); \\n  vec3 pos = vec3(ux, vy, 0);  \\n  return pos;\\n}\\n\\n#pragma region FlowerComponent \\n\\n#define limbVC 1000. \\n#define MajorVC 1000. \\nvoid GenFlower(float offsetX, float offsetX2 , \\n               float offsetY,   \\n  \\t\\t\\t   inout float In_vertexIndex , \\n               out vec3 Pos , \\n               out mat4 model) \\n{\\n  /*Time&Music Setting*/\\n    float ux = mod(In_vertexIndex, 1.) ; \\n    float vy = floor(In_vertexIndex /1. ) ;  \\n    vec4 soundUV = texture2D(sound, vec2(ux,vy)); \\n  \\tfloat pPoint= soundUV.r * 0.25; \\n  \\n  \\tfloat radius = 0. ; \\n   if(In_vertexIndex > 0. && In_vertexIndex < limbVC )\\n  { \\n    float fy = floor(In_vertexIndex / (limbVC ) );\\n    float xOffset = fract( (In_vertexIndex) / (limbVC * 2.)) * 0.2 ;  \\n\\tfloat yOffset = sqrt(xOffset ) ;  \\n    if(soundUV != vec4(0.))\\n    {\\n      if(sin( 3.5 * time)> 0.)\\n          xOffset = sin(yOffset * 100. * pPoint) * 0.025 * pPoint * time * 0.0003; \\n      else \\n          xOffset = -sin(yOffset * 100. * pPoint) * 0.025 * pPoint * time * 0.0003; \\n    }\\n    Pos = vec3(xOffset + offsetX+ offsetX2,- yOffset + offsetY , 0. );\\n  }\\n  In_vertexIndex -= limbVC; \\n  if(In_vertexIndex > 0. && In_vertexIndex < MajorVC) \\n  { \\n    radius = sin(In_vertexIndex * (1.)) * .2  ; \\n    if(mouse.y > -0.6 && mouse.y < 0.1)\\n    { \\n      if(mouse.y > -0.6  && mouse.y < -0.4)\\n      \\tradius = sin(In_vertexIndex * floor(4. * mouse.y)) * .2 ; \\n      if(mouse.y > -0.4 && mouse.y < -0.2)\\n      radius = sin(In_vertexIndex * floor(5.)) * .2 ; \\n      if(mouse.y > -0.2 && mouse.y < -0.1)\\n      \\t\\tradius = sin(In_vertexIndex * floor(3. * mouse.y)) * .2 ;  \\n    }\\n    if(mouse.y > 0.0)\\n      radius = sin(In_vertexIndex * (5. *  pPoint * log(mouse.y))) * .2 ; \\n    float xPos = radius * sin(In_vertexIndex) ; \\n    float yPos = radius * cos(In_vertexIndex) ;  \\n    float zPos = 0.1 ; \\n    Pos = vec3( xPos + offsetX, yPos + offsetY, zPos);\\n   \\n  \\t\\n  } \\n  In_vertexIndex -= MajorVC;\\n // model *= trans(vec3(0. , 0. , 0.)) ;\\n  \\n}\\n\\n#pragma endregion \\n\\n\\n/* -------------------------------- Display ------------------------------- */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* -------------------------------- Display ------------------------------- */\\n#define OffsetX1 -1.\\n#define OffsetX2 +1.\\n#define OffsetX3 0.\\n#define OffsetXX1 -0.04 \\n#define OffsetXX2 +0.04 \\n#define OffsetXX3 0. \\n#define OffsetY1 0.0 \\n#define OffsetY2 0.0 \\nvoid main() \\n{\\n /*UniformSetting*/\\n  mat4 m = persp(radians(45.), resolution.x / resolution.y, 0.1 , 20. );    \\n  vec3 camera = vec3(0. , 0. , 1. ) ;\\n  vec3 target = vec3(0.);\\n  vec3 up     = vec3(0., 1., 0.); \\n  m*= cameraLookAt(camera , target , up);\\n  m*= uniformScale(0.4); \\n  \\n  float vertexIndex = vertexId ;   \\n  vec3 Pos = vec3(0.) ; \\n  float u = mod(vertexId , 10.); \\n  float v = floor(vertexId/ 10.) ;  \\n  \\n /*影流の花*/\\n  GenFlower(OffsetX1, OffsetXX1,  \\n            OffsetY1, vertexIndex , Pos, m);  \\n  \\n  GenFlower(OffsetX2, OffsetXX2,  \\n            OffsetY1, vertexIndex , Pos, m); \\n  \\n  GenFlower(OffsetX3, OffsetXX3, \\n            OffsetY1, vertexIndex , Pos, m); \\n /*Apply*/ \\n  gl_Position = m*vec4(Pos, 1);  \\n  gl_PointSize = 2.; \\n  v_color = vec4(vec3(0.), 1.); \\n  \\n}\\n\\n\\n\\n\\n\"}",
  "screenshotURL": "data/images/images-7l9gc1si4ebpqd981-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "26"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "eW8sDRvJfRBgpHn4k"
}