{
  "_id": "ohBmRghggdTnjtnNi",
  "owner": {
    "_id": "riT2XqRCjGT8bi2Qi",
    "createdAt": {
      "$date": {
        "$numberLong": "1644229841589"
      }
    },
    "username": "evilmandarine",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/89340ad27602758e65227662f476c233?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1644229901617"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1644229901617"
    }
  },
  "origId": "rZcr6zk3jJKzwJ2mD",
  "name": "test01",
  "notes": "music link update",
  "rank": {
    "$numberDouble": "1.1840280803112815"
  },
  "private": true,
  "unlisted": false,
  "username": "evilmandarine",
  "avatarUrl": "https://secure.gravatar.com/avatar/89340ad27602758e65227662f476c233?default=retro&size=200",
  "settings": {
    "num": 20497,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/pornographicrecordings/ken-ishii-play-biting-original",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0.23137254901960785,
      0.7490196078431373,
      1
    ],
    "shader": "/*\n                                                                                                                     \n                         ,--.                          ,--.                ,--.                               ,--.   \n,--.  ,--.,---. ,--.--.,-'  '-. ,---. ,--.  ,--. ,---. |  ,---.  ,--,--. ,-|  | ,---. ,--.--. ,--,--.,--.--.,-'  '-. \n \\  `'  /| .-. :|  .--''-.  .-'| .-. : \\  `'  / (  .-' |  .-.  |' ,-.  |' .-. || .-. :|  .--'' ,-.  ||  .--''-.  .-' \n  \\    / \\   --.|  |     |  |  \\   --. /  /.  \\ .-'  `)|  | |  |\\ '-'  |\\ `-' |\\   --.|  |   \\ '-'  ||  |     |  |   \n   `--'   `----'`--'     `--'   `----''--'  '--'`----' `--' `--' `--`--' `---'  `----'`--'    `--`--'`--'     `--'   \n\n*/\n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\n\nfloat goop(float t) {\n  return sin(t) + sin(t * 0.27) + sin(t * 0.13) + sin(t * 0.73);\n}\n\nvec3 getCenterPoint(const float id, vec2 seed) {\n  float a0 = id + seed.x;\n  float a1 = id + seed.y;\n  return vec3(\n    (sin(a0 * 0.39) + sin(a0 * 0.73) + sin(a0 * 1.27)) / 3.,\n    (sin(a1 * 0.43) + sin(a1 * 0.37) + cos(a1 * 1.73)) / 3.,\n    0);\n}\n\nvoid getQuadPoint(const float quadId, const float pointId, float thickness, vec2 seed, out vec3 pos, out vec2 uv) {\n  vec3 p0 = getCenterPoint(quadId + 0.0, seed);\n  vec3 p1 = getCenterPoint(quadId + 0.1, seed);\n  vec3 p2 = getCenterPoint(quadId + 0.2, seed);\n  vec3 p3 = getCenterPoint(quadId + 0.3, seed);\n  vec3 perp0 = normalize(p2 - p0).yxz * vec3(-1, 1, 0) * thickness;\n  vec3 perp1 = normalize(p3 - p1).yxz * vec3(-1, 1, 0) * thickness;\n  \n  float id = pointId;\n  float ux = mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  \n  pos = vec3(mix(p1, p2, vy) + mix(-1., 1., ux) * mix(perp0, perp1, vy)); \n  uv  = vec2(ux, vy);\n}\n\n#define POINTS_PER_LINE 1800.\n#define QUADS_PER_LINE (POINTS_PER_LINE / 6.)\nvoid main() {\n  float lineId = floor(vertexId / POINTS_PER_LINE);\n  float quadCount = POINTS_PER_LINE / 6.; \n  float pointId = mod(vertexId, 6.);\n  float quadId = floor(mod(vertexId, POINTS_PER_LINE) / 6.);\n  vec3 pos;\n  vec2 uv;\n  \n  float snd0 = texture2D(sound, vec2(0.13 + lineId * 0.05, quadId / quadCount * 0.01)).a;\n  float snd1 = texture2D(sound, vec2(0.14 + lineId * 0.05, quadId / quadCount * 0.01)).a;\n  \n  getQuadPoint(quadId * 0.02 + time * 3.1 * (lineId + 1.), pointId, pow(snd0, 5.0) * 0.25, vec2(pow(snd0, 2.), pow(snd1, 2.0)), pos, uv);  \n  \n  vec3 aspect = vec3(resolution.y / resolution.x, 1, 1);\n  \n  mat4 mat = ident(); \n  mat *= scale(aspect);\n  gl_Position = vec4((mat * vec4(pos, 1)).xyz, 1);\n  gl_Position.z = -m1p1(quadId / quadCount);\n  gl_Position.x += m1p1(lineId / 10.) * 0.4 + (snd1 * snd0) * 0.1;\n  gl_PointSize = 4.;\n\n  float hue = mix(0.95, 1.5, lineId * 0.1);\n  float sat = 1.;\n  float val = 1.;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), quadId / quadCount);\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\n}"
  },
  "screenshotURL": "data/images/images-90o2fttzk5dblbypm-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "1"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "k9XLfxaAFjuW2hhS9"
}