{
  "_id": "trsRykwiAHEtSA98a",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1451234963894"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1451263220369"
    }
  },
  "origId": null,
  "name": "py",
  "notes": "",
  "rank": {
    "$numberDouble": "1.1414899796186069"
  },
  "private": true,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 49311,
    "mode": "LINE_LOOP",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat getX(float t) {\n  return\n    545./23.*sin(t + 37./22.) +\n    35./26.*sin(2.*t + 121./53.) +\n    65./24.*sin(3.*t + 53./30.) +\n    11./39.*sin(4.*t + 61./25.) +\n\n    21./25.*sin(5.*t + 19./11.) +\n    3./22.*sin(6.*t + 15./44.) +\n    13./24.*sin(7.*t + 62./43.) +\n    \n    4./19.*sin(8.*t + 31./38.) + \n    15./32.*sin(9.*t + 36./23.) +\n    3./22.*sin(10.*t + 46./29.) +\n    \n    8./27.*sin(11.+t + 29./16.) +\n    1./34.*sin(12.+t + 89./40.) +\n    //103760./29. +\n    \n    0.;\n}\n\nfloat getY(float t) {\n  return \n    -1./23.*sin(7./24.-10.*t) +\n    482./21.*sin(t+8./5.) +\n    61./50.*sin(2.*t+73./31.) +\n    \n    45./17.*sin(3.*t+110./73.) +\n    23./42.*sin(4.*t+107./48.) +\n    13./14.*sin(5.*t+30./19.) +\n    \n    10./33.*sin(1.)+\n    20./59.*sin(7.*t+27./16.) +\n    3./29.*sin(8.*t+131./39.) +\n    \n    4./27.*sin(9.*t+17./18.) +\n    7./36.*sin(11.*t+53./74.) +\n    3./37.*sin(12.*t+9./8.) -\n   // 11131./37. +\n    \n    0.;\n}\n    \n\nvoid main() {\n  float t = vertexId / vertexCount * PI * 4. * 12.;\n  float x = getX(t);\n  float y = getY(t);\n  vec2 xy = vec2(x, y);\n  gl_Position = vec4(xy * 0.005, 0, 1);\n  gl_PointSize = 2.;\n  \n  v_color = vec4(1);\n}"
  },
  "screenshotURL": "data/images/images-mceng9j354ieuiv68-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "2"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "b8RFGAuhgHohwWjjb"
}