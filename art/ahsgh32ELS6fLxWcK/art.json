{
  "_id": "ahsgh32ELS6fLxWcK",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": 1579363286011
  },
  "modifiedAt": {
    "$date": 1579363286011
  },
  "origId": "jETzmmycobJrRvXH9",
  "name": "SphereDistributionPawel",
  "notes": "",
  "rank": 1.5857408368282497,
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 108,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI radians(180.)\n\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rot(vec3 axis, float angle) {\n    \n    // source: https://gist.github.com/yiwenl/3f804e80d0930e34a0b33359259b556c\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 SampleSpherePos(float idx, float num) {\n  idx += 0.5;\n  float phi = 10.166407384630519631619018026484 * idx;\n  float th_cs = 1.0 - 2.0*idx/num;\n  float th_sn = sqrt(clamp(1.0 - th_cs*th_cs, 0.0, 1.0));\n  return vec3( cos(phi)*th_sn, sin(phi)*th_sn, th_cs );\n}\n\nvoid main() {\n  \n  mat4 mr = rot(vec3(0.1, 0.2, 0.3), time);\n  vec4 vertPos = mr *rotY(time*0.1) * vec4(SampleSpherePos(vertexId, vertexCount), 1.0) + vec4(0,0,-3.0,0);\n  \n  gl_Position = persp(PI*0.25, resolution.x/resolution.y, 0.1, 100.0) * vertPos;\n  gl_PointSize = 30.0; \n\n  v_color = vec4(1,1,0.5,1);\n}"
  },
  "screenshotURL": "data/images/images-cimnc9o070j4ku174-thumbnail.jpg",
  "hasSound": "",
  "views": 72,
  "likes": 0,
  "revisionId": "Z6oWeXcrcCKzvo4z4"
}