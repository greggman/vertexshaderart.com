{
  "_id": "CaPmeZQJn7C9sdRZw",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1551998223044"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1551998223044"
    }
  },
  "origId": "XZuNgqyPsK9ePg5Xv",
  "name": "animalRainbow expe",
  "notes": "",
  "rank": {
    "$numberDouble": "1.5410680550400917"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":10000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/lapixmusic/fugene2crossfade\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define PI radians(180.)\\n\\n//KDrawmode=GL_POINTS\\n//KVerticesNumber=100000\\n\\n#define r  1.3 //KParameter 0.5>>4.\\n#define ocsFreq 1. //KParameter 1.>>4.\\n#define oscAmpFact 10. //KParameter 0.9>>2.\\n#define ocsFreq2 .05 //KParameter 1.>>4.\\n#define propagationFactor 0.5 //KParameter 1.>>4.\\n#define soundFactor 1. //KParameter 1.>>4.\\n#define shapeFactor0 1.25//KParameter 0.>>1.8\\n#define shapeFactor1 10.5 //KParameter 1.25>>2.\\n\\n//Shader functions\\nvec2 v(vec2 p,float s){\\n\\treturn vec2(sin(s*p.y),cos(s*p.x));\\n}\\n\\nvec2 fSym(vec2 _p,float _s, float _h){\\n\\tvec2 k1 = v(_p,_s);\\n\\tvec2 k2 = v(_p+shapeFactor1*_h*k1,_s);\\n\\tvec2 k3 = v(_p+0.5*_h*k2,_s);\\n\\tvec2 k4 = v(_p+_h*k3,_s);\\n\\treturn _h/3.*(0.5*k1+k2+k3+0.5*k4);\\n}\\n\\nvec3 colorize(float hue){\\n\\treturn abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0;\\n}\\n\\n//End shader functions\\n\\n\\n//functions for the shader\\n\\nmat2 rotate2d(float angle) {\\n\\treturn mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\\n}\\n\\n//end functions for the shader\\n\\n\\n//Functions used for camera\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\n\\nvec2 rotate(vec2 f, float deg) \\n{\\n\\treturn vec2(f.x * cos(deg) - f.y * sin(deg), f.x * sin(deg) + f.y * cos(deg));\\n}\\n\\n//End functions used for camera\\n\\n\\nvoid main ()\\n{\\n   //float finalDesiredPointSize = 1.;\\n   float maxFinalSquareSideSize = floor(sqrt(vertexCount));\\n   float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\\n  \\n  //first the number of elements in a line\\n  float across = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\\n  float finalDesiredPointSize = resolution.x/across;\\n  \\n  //then the number of possible lines with the given vertexCount\\n  float down = floor(finalMaxVertexCount / across);\\n  \\n  //we can now calculate the final number of elements\\n  float finalVertexCount = across*down;\\n  \\n  //and the consequent finalVertexId\\n  float finalVertexId = mod(vertexId,finalVertexCount);\\n  \\n  //Now we calculate the position of the elements based on their finalVertexId\\n  float x = mod(finalVertexId, across);\\n  float y = floor(finalVertexId / across);\\n  \\n  float u = (x /across);\\n  float v = (y /down);\\n  \\n  \\n  float u0 = (u * (across*finalDesiredPointSize/resolution.x));\\n  float v0 = (v * (across*finalDesiredPointSize/resolution.x ));\\n  \\n  float ux =  u0 - 0.5*(across*finalDesiredPointSize/resolution.x);\\n  float vy =  v0- 0.5*(across*finalDesiredPointSize/resolution.x);;\\n  \\n  u>0.5?u = 1.-u:u;\\n  v>0.5?v =  1.- v:v;\\n   \\n    \\n  float udnd = u;\\n  if(u>0.5)\\n    udnd =  1.-u;\\n  \\n  float snd = texture2D(sound, vec2(0.,  0.0)).a;\\n  \\n   \\n\\tvec2 fragcoord = vec2(x,y);\\n    vec2 newResolution = vec2(across, down);\\n  \\n  \\n  vec2 aspect = resolution/min(resolution.x, resolution.y);\\n  vec2 uv = vec2(u,v);\\n  vec2 FragCoord = vec2(u,v);\\n\\t\\n  vec2 pos = vec2(u,v);//gl_FragCoord.xy/resolution.xy;\\n  \\n    \\tfloat s = 2.;\\n\\tfloat h = 1.0;\\n\\tvec2 range = aspect * sqrt(2.);\\n  \\n    \\tfor(int i = 0; i<20; i++) {\\n\\t\\tfloat hh = h * log(1./(exp(2.*sin(time*propagationFactor + pos.x*aspect.x + pos.y*aspect.y + float(i) * 0.1))))/5.;\\n \\t\\tuv+=fSym(uv,s,hh);\\n\\t\\ts*=shapeFactor0;\\n\\t\\th/=1.25;\\n\\t    }\\n\\t\\n  v_color =  vec4(colorize(time*0.1 + floor(length(uv)*(3.+15.))/10.),1.); //centered rainbow with 10 visible rings\\n\\t\\n  //camera\\n\\n  float tm = ocsFreq *time;\\n  float tm2 = ocsFreq2*time;\\n  \\n  mat4 mat = persp(radians(60.0), resolution.x / resolution.y, 0.1, 10.0);\\n  vec3 eye = vec3(cos(tm) * r/oscAmpFact, 0.3,  r);\\n\\n  vec3 target = vec3(0.,0.,0.);\\n  vec3 up = vec3(0., sin(tm2), cos(tm2));\\n  \\n  \\n  mat *= cameraLookAt(eye, target, up);\\n  \\n\\n  float depth = soundFactor*(v_color.x+v_color.y+v_color.z)/3.;\\n \\n\\n  vec4 finalPos = vec4(ux, vy, 0.+snd*depth , 1.);\\n  \\n  gl_Position = mat*finalPos;\\n  gl_PointSize = finalDesiredPointSize;\\n  \\n}\\n\\n\"}",
  "screenshotURL": "data/images/images-0sggk7ecw217zo8sl-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "22"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "abyeS8HpD446F7KJ6"
}