{
  "_id": "txxXeHf8AFDuZzxWD",
  "owner": {
    "_id": "oCanjNxeHcQ7gDPmW",
    "createdAt": {
      "$date": {
        "$numberLong": "1505499213122"
      }
    },
    "profile": {
      "name": "Zug Zwang",
      "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg"
    },
    "username": "zug"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1516561758219"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1516561758219"
    }
  },
  "origId": "sEDKEFtcGxZoxbis8",
  "name": "codez",
  "notes": "",
  "rank": {
    "$numberDouble": "1.562584883025491"
  },
  "private": false,
  "unlisted": false,
  "username": "zug",
  "avatarUrl": "https://lh3.googleusercontent.com/-ic9UqwOeGYY/AAAAAAAAAAI/AAAAAAAAABU/vJK2D-kzm0k/photo.jpg",
  "settings": "{\"num\":21019,\"mode\":\"TRI_FAN\",\"sound\":\"https://soundcloud.com/drumcode/pigdan-mexico-drumcode-dc157\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"//KDrawmode=GL_TRIANGLES\\n\\n#define KP0 11. /time\\nvec3 gSunColor = vec3(1.0, 0.2, 1.4) * 10.1;  \\n\\nvec3 gSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\\nvec3 gSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\\n\\nvec3 gCubeColor = vec3(-2.0, 1.0, 1.0);\\nfloat gExposure = 0.3;\\n\\nfloat gCubeColorRandom = 1.0;\\n\\n#define MOVE_OUTWARDS\\n\\nfloat fAOAmount = 0.8;\\nfloat gFloorHeight = -1.0;\\nfloat g_cameraFar = 1000.0;\\n\\n#define PI radians( 180.0 )\\n\\n\\nvec3 GetSunDir()\\n{\\n  \\treturn normalize( vec3( 20.0, 40.3, -20.4  +KP0) );\\n}\\n\\nstruct SceneVertex\\n{\\n  \\tvec3 vWorldPos;\\n  \\tvec3 vColor;\\n  \\tfloat fAlpha;\\n};\\n\\n\\nfloat GetCosSunRadius()\\n{\\n  return 0.1;\\n}\\n\\n\\nfloat GetSunIntensity()\\n{  \\t\\n  \\treturn 0.001;\\n}\\n\\n\\nvec3 GetSkyColor( vec3 vViewDir )\\n{\\n\\treturn mix( gSkyBottom, gSkyTop, max( 0.0, vViewDir.y ) );\\n}\\nconst float g_cubeFaces = 6.0;\\nconst float g_cubeVerticesPerFace = ( 2.0 * 3.0 );\\nconst float g_cubeVertexCount =\\t( g_cubeVerticesPerFace * g_cubeFaces );\\n\\n//                   6          7\\n//                    +----------+\\n//                   /|         /|\\n//                2 / |       3/ |\\n//                 +----------+  |\\n//                 |  |       |  |\\n//      Y   Z      | 4|       | 5|\\n//                 |  +-------|--+\\n//      ^ /        | /        | /\\n//      |/        0|/        1|/\\n//      +--> X     +----------+\\n  \\nvec3 GetCubeVertex( float fVertexIndex )\\n{\\n  \\tfloat f = fVertexIndex / 8.0;\\n\\treturn vec3(\\n      mix(-1., 1., step(0.5, fract(f * 4.))),\\n      mix(-1., 1., step(0.5, fract(f * 2.))), \\n      mix(-1., 1., step(0.5, fract(f))));  \\n}\\n\\n\\nvoid GetCubeVertex( const float vertexIndex, const mat4 mat, out vec3 vWorldPos, out vec3 vWorldNormal )\\n{\\n  \\tfloat fFaceIndex = floor( vertexIndex / g_cubeFaces );\\n\\n  \\tvec3 v0, v1, v2, v3;\\n  \\n  \\tif ( fFaceIndex < 0.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 0.0 );\\n      \\tv1 = GetCubeVertex( 2.0 );\\n      \\tv2 = GetCubeVertex( 3.0 );\\n      \\tv3 = GetCubeVertex( 1.0 );\\n    }\\n  \\telse if ( fFaceIndex < 1.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 5.0 );\\n      \\tv1 = GetCubeVertex( 7.0 );\\n      \\tv2 = GetCubeVertex( 6.0 );\\n      \\tv3 = GetCubeVertex( 4.0 );\\n    }\\n  \\telse if ( fFaceIndex < 2.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 1.0 );\\n      \\tv1 = GetCubeVertex( 3.0 );\\n      \\tv2 = GetCubeVertex( 7.0 );\\n      \\tv3 = GetCubeVertex( 5.0 );\\n    }\\n  \\telse if ( fFaceIndex < 3.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 4.0 );\\n      \\tv1 = GetCubeVertex( 6.0 );\\n      \\tv2 = GetCubeVertex( 2.0 );\\n      \\tv3 = GetCubeVertex( 0.0 );\\n    }\\n  \\telse if ( fFaceIndex < 4.5 )\\n    {\\n      \\tv0 = GetCubeVertex( 2.0 );\\n      \\tv1 = GetCubeVertex( 6.0 );\\n      \\tv2 = GetCubeVertex( 7.0 );\\n      \\tv3 = GetCubeVertex( 3.0 );\\n    }\\n  \\telse\\n    {\\n      \\tv0 = GetCubeVertex( 3.0 );\\n      \\tv1 = GetCubeVertex( 5.0 );\\n      \\tv2 = GetCubeVertex( 4.0 );\\n      \\tv3 = GetCubeVertex( 0.0 );\\n    }\\n  \\tv0 = (mat * vec4(v0, 1)).xyz;\\n  \\tv1 = (mat * vec4(v1, 1)).xyz;\\n  \\tv2 = (mat * vec4(v2, 1)).xyz;\\n  \\tv3 = (mat * vec4(v3, 1)).xyz;\\n  \\n  \\tfloat fFaceVertexIndex = mod( vertexIndex, 6.0 );\\n  \\n  \\tif ( fFaceVertexIndex < 0.15 )\\n    {\\n\\t  \\tvWorldPos = v0;\\n    }\\n  \\telse if ( fFaceVertexIndex < 1.5 )\\n    {\\n\\t  \\tvWorldPos = v1;\\n    }\\n  \\telse if ( fFaceVertexIndex < 12.5 )\\n    {\\n\\t  \\tvWorldPos = v2;\\n    }\\n  \\telse if ( fFaceVertexIndex < 3.5 )\\n    {\\n\\t  \\tvWorldPos = v0;\\n    }\\n  \\telse if ( fFaceVertexIndex < 6.5 )\\n    {\\n\\t  \\tvWorldPos = v2;\\n    }\\n  \\telse\\n    {\\n\\t  \\tvWorldPos = v3;\\n    }\\n  \\n  \\tvWorldNormal = normalize( cross( v1 - v0, v2 - v0 ) );  \\n}\\n\\n\\nvec3 GetSunLighting( const vec3 vNormal )\\n{\\n  \\tvec3 vLight = -GetSunDir();\\n  \\n  \\tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\\n \\t  \\n  \\treturn gSunColor * NdotL;\\n}\\n\\n\\nvec3 GetSunSpec( const vec3 vPos, const vec3 vNormal, const vec3 vCameraPos )\\n{\\n  \\tvec3 vLight = -GetSunDir();\\n\\n  \\tvec3 vView = normalize( vCameraPos - vPos );\\n  \\n  \\tvec3 vH = normalize( vView - vLight );\\n  \\n  \\tfloat NdotH = max( 0.0, dot( vNormal, vH ) );\\n  \\tfloat NdotL = max( 0.0, dot( vNormal, -vLight ) );\\n \\n  \\tfloat f = mix( 0.01, 1.0, pow( 1.0 - NdotL, 5.0 ) );\\n  \\n  \\treturn gSunColor * pow( NdotH, 20.0 ) * NdotL * f * 4.0;\\n}\\n\\n\\nvec3 GetSkyLighting( const vec3 vNormal )\\n{\\n  \\tvec3 vSkyLight = normalize( vec3( -1.0, -2.0, -0.5 ) );\\n  \\n  \\tfloat fSkyBlend = vNormal.y * 0.5 + 0.5;\\n \\n  \\treturn mix( gSkyBottom, gSkyTop, fSkyBlend );\\n}\\n\\n\\nvoid GenerateCubeVertex( const float vertexIndex, const mat4 mat, const vec3 vCubeCol, const vec3 vCameraPos, out SceneVertex outSceneVertex )\\n{  \\n  vec3 vNormal;\\n\\n  GetCubeVertex( vertexIndex, mat, outSceneVertex.vWorldPos, vNormal );\\n\\n  outSceneVertex.vColor = vec3( 0.0 );\\n\\n  outSceneVertex.fAlpha = 1.0;  \\n\\n  float h = outSceneVertex.vWorldPos.y - gFloorHeight;\\n  outSceneVertex.vColor += GetSkyLighting( vNormal );\\n  outSceneVertex.vColor *= mix( 1.0, fAOAmount, clamp( h, 0.0, 1.0 ) );\\n\\n  outSceneVertex.vColor += GetSunLighting( vNormal );\\n\\n  outSceneVertex.vColor *= vCubeCol;      \\n\\n  outSceneVertex.vColor += GetSunSpec( outSceneVertex.vWorldPos, vNormal, vCameraPos );\\n}\\n\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p)\\n{\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  #if 0\\n  return mat4(\\n    1, 0, 0, trans[0],\\n    0, 1, 0, trans[1],\\n    0, 0, 1, trans[2],\\n    0, 0, 0, 1);\\n  #else\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n  #endif\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat p1m1(float v) {\\n  return v * .5 + .5;\\n}\\n\\nfloat inRange(float v, float minV, float maxV) {\\n  return step(minV, v) * step(v, maxV);\\n}\\n\\nfloat at(float v, float target) {\\n  return inRange(v, target - 0.1, target + 0.1);\\n}\\n\\nfloat easeInOutCubic(float pos) {\\n  if (pos < 0.5) {\\n    return 0.5 * pow(pos / 0.5, 3.);\\n  }\\n  pos -= 0.5;\\n  pos /= 0.5;\\n  pos  = 1. - pos;\\n  return (1. - pow(pos, 3.)) * 0.5 + 0.5;\\n}\\n\\nfloat inOut(float v) {\\n  float t = fract(v);\\n  if (t < 0.5) {\\n    return easeInOutCubic(t / 0.5);\\n  }\\n  return easeInOutCubic(2. - t * 2.);\\n}\\n\\nconst float perBlock = 4.;\\n\\nvoid GetCubePosition( float fCubeId, float numCubes, out mat4 mat, out vec4 vCubeCol )\\n{  \\n  \\tfloat fSeed = fCubeId;\\n  \\tfloat fPositionBase = fCubeId;\\n  \\tfloat fSize = 1.0;\\n\\n  \\tvec3 vCubeOrigin = vec3( 0.0, 1.0, 0.0 );\\n  \\n    float across = 48.;\\n    float down = floor(numCubes / across);\\n    float uId = mod(fCubeId, across);\\n    float vId = floor(fCubeId / across);\\n    float u = uId / (across);\\n    float v = vId / down;\\n    float bxId = floor(uId / perBlock);\\n    float bzId = floor(vId / perBlock);\\n    float numRows = floor(numCubes / across);\\n    float numBlocks = floor(numRows / perBlock)-2.0;\\n\\n    float uP = m1p1(u);\\n    float vP = m1p1(v);\\n\\n    float ll = length(vec2(uP, vP * 1.5));\\n    float snd = texture2D(sound, vec2(mix(0.001, 0.0199, uP), ll * 0.3)).a;\\n    //float s2 = 0.;texture2D(sound, vec2(mix(0.02, 0.04, hash(u + v + 2.34)), hash(v) * 0.05)).a;\\n  \\n    vCubeOrigin.x += uP * across * 1.2 + bxId * 0. ;\\n    float vSpace = numRows * 1.4 + numBlocks * 1.;\\n    float z = vP * down * 1.4 + bzId * 0.2;\\n    vCubeOrigin.z += z; \\n    float height = 1.;\\n    //vCubeOrigin.y += pow(sin(time + v * 9.), 1.) * pow(cos(time + u * 8.17), 1.) * 4. * inOut(time * 0.1);\\n  \\n    mat  = ident();\\n    mat *= trans(vCubeOrigin);\\n    //mat *= rotZ(p1m1(snd) * 10.);\\n    //mat *= rotY(p1m1(snd) * 10.);\\n    mat *= uniformScale(mix(0., 3.0, pow(clamp(mix(-0.5, 1., snd), 0., 1.), 7.)));\\n  \\n  \\tvec3 vRandCol;\\n\\n    float st = step(0.9, snd);\\n    float h = 0. + floor(time * 0.0) * 0.1 + easeInOutCubic(fract(time * 0.1)) * 0.1;\\n    vCubeCol.rgb = hsv2rgb(vec3(mix(h, h + 0.5, st), \\n      st,//pow(snd, 0.), \\n      1));\\n    //vCubeCol.rgb = mix(vCubeCol.rgb, vec3(1,0,0), step(0.9, snd));\\n    vCubeCol.rgb = mix(vCubeCol.rgb, vec3(0,0,0), step(0.999, snd));\\n    vCubeCol.a = 0.;vCubeOrigin.z / vSpace;\\n}\\n\\nfloat goop(float t) {\\n  return sin(t) * sin(t * 0.27) * sin(t * 0.13) * sin(t * 0.73);\\n}\\n\\n\\nvoid main()\\n{ \\n  \\tSceneVertex sceneVertex;\\n  \\n  \\tfloat fov = 1.8;\\n  \\n//  \\tvec3 vCameraTarget = vec3( 300, -400.6, 500.0 );\\n//  \\tvec3 vCameraPos = vec3(-45.1, 20., -0.);\\n  \\n  \\tvec3 vCameraTarget = vec3( 0, 0.16, 1.0 );\\n  \\tvec3 vCameraPos = vCameraTarget + vec3(0, 70. - sin(time * 0.1) * 30., sin(time * 0.13) * 50.0);\\n    float ca = 0.004;\\n  \\n // get sick!\\n    ca = time * 0.51;\\n  \\tvec3 vCameraUp = vec3( sin(ca), time *0.3, cos(ca) );\\n // \\tvec3 vCameraUp = vec3( 0, 0, 1 );\\n  \\n  \\tvec3 vCameraForwards = normalize(vCameraTarget - vCameraPos);\\n  \\n  \\tfloat vertexIndex = vertexId;\\n  \\n  \\n    float fCubeId = floor( vertexIndex / g_cubeVertexCount )-1.;\\n    float fCubeVertex = mod( vertexIndex, g_cubeVertexCount );\\n    float fNumCubes = floor( vertexCount / g_cubeVertexCount );\\n  \\n    mat4 mCube;\\n    vec4 vCubeCol;\\n\\n    GetCubePosition( fCubeId, fNumCubes, mCube, vCubeCol );\\n\\n    GenerateCubeVertex( fCubeVertex, mCube, vCubeCol.xyz, vCameraPos, sceneVertex );\\n\\n    mat4 m = persp(radians(45.), resolution.x / resolution.y, (.1), 1000.);\\n    m *= cameraLookAt(vCameraPos, vCameraTarget, vCameraUp);\\n    gl_Position = m * vec4(sceneVertex.vWorldPos, 0.5);\\n    \\n  \\t// Final output color\\n  \\tfloat fExposure = gExposure;// min( gExposure, time * 0.1 );\\n  \\tvec3 vFinalColor = sqrt( vec3(0.7) - exp2( sceneVertex.vColor * -fExposure ) );\\n  \\n  \\tv_color = mix(vec4(vFinalColor, 0.5), background, vCubeCol.a);\\n  \\n}\"}",
  "screenshotURL": "data/images/images-vr3awyne9z1klpayk-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "88"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "YavCup8JaH5wr5vcn"
}