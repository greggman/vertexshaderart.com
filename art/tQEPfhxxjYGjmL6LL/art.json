{
  "_id": "tQEPfhxxjYGjmL6LL",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1623653541713"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1623653541713"
    }
  },
  "origId": "vBDBSAvnH4mCTZ4So",
  "name": "Pixel Stormx",
  "notes": "",
  "rank": {
    "$numberDouble": "1.3712746123061965"
  },
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/7t2names/the-power-tareq-remix\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define NUM_SEGMENTS 28.0\\n#define NUM_POINTS (NUM_SEGMENTS * 4.0)\\n#define PI 3.14159265359\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n#define Kp1 4.//0.1>>3.\\nmat2 rotate2D(float _a) {\\n\\treturn mat2(cos(_a), sin(_a), Kp1\\n                \\n                -sin(_a), cos(_a));\\n}\\n\\nmat4 rotX(float angle) {\\n\\n    float s = sin( angle );\\n    float c = cos( angle );\\n\\n    return mat4(\\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0,-s, c, 0,\\n      0, 0, 0, 1);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nvoid main() {\\n  float numLinesDown = floor(vertexCount / NUM_POINTS);\\n  // produces 0,1, 1,2, 2,3, ...\\n  float point = floor(mod(vertexId, NUM_POINTS) / 2.0) + mod(vertexId, 2.0);\\n  // line count\\n  float count = floor(vertexId / NUM_POINTS);\\n  vec2 ctr = vec2(0.5);\\n  float u = point / NUM_SEGMENTS;  // 0 <-> 1 across line\\n  float v = count / numLinesDown;  // 0 <-> 1 by line\\n  float invV = 1.0 - v;\\n  float s = sin(time * 0.25/2.0)/2.0 +0.25;\\n  // Only use the left most 1/4th of the sound texture\\n  // because there's no action on the right\\n  float historyX = u * 0.25;\\n  // Match each line to a specific row in the sound texture\\n  float historyV = (v * numLinesDown + 0.5) / soundRes.y;\\n  float snd = texture2D(sound, vec2(historyX, historyV)).a;\\n  float x = abs(u * fract(time / PI * 0.25) - 1.0 * snd);\\n  float y = abs(v * fract(time * PI * .25) - 1.0 * snd * s);\\n  float xOff = sin(PI * count + x * 0.35) * 2.0;\\n  float yOff = cos(PI * count + y * 0.005) * 4.0;\\n  vec2 xy = vec2(\\n      x * mix(yOff, s * snd, invV),\\n      y + mod(snd * 2.0, 5.0 * xOff) * 1.0) / (v + xOff);\\n  gl_PointSize = snd * 80. - xOff - yOff; \\n  gl_PointSize *= 20.0 / numLinesDown * snd; \\n  gl_PointSize *= resolution.x /52./dot(s*Kp1,3.*cos(s+time))* xOff; \\n  xy -= ctr;\\n  xy *= rotate2D(snd * PI * 2.0 +s);\\n  xy += ctr;\\n  xy *= pow(xy, ctr + xy);\\n  xy *= -3.;\\n  //xy = fract(xy / 0.1);\\n  vec4 pos = vec4(xy / yOff, -.25*s*xOff/sin(s*sin(time)) , 1.15-xOff);\\n  pos *= rotY(PI * s);\\n  gl_Position = pos;\\n  xy -= vec2(0.5);\\n  xy *= rotate2D(snd * -PI * 2.0);\\n  xy += vec2(0.5);\\n  xy *= mouse;\\n  float hue = snd *s;\\n  hue = smoothstep(xy.x, xy.y, s);\\n  float sat = 1.0*cos(time*6.3*2.);\\n  float val = invV;\\n  vec4 color = vec4(hsv2rgb(vec3(hue, sat, val))+0.95*s, 1);\\n  color *= rotY(PI * snd * s/2.);\\n  //background += 0.1;\\n  vec4 finalColor = mix(color, background, s);\\n  \\n  v_color = finalColor;\\n}\"}",
  "screenshotURL": "data/images/images-ovlffevkxqotbpz1h-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "112"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "M9jittByTCaFWbnjt"
}