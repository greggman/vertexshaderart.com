{
  "_id": "Qdhn9CoweLkKbkKLT",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1548924251448"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1548924251448"
    }
  },
  "origId": null,
  "name": "gl_PointSize",
  "notes": "",
  "rank": {
    "$numberDouble": "1.1465343283548282"
  },
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":15,\"mode\":\"POINTS\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// vertexId    is provided by this site.\\n//             it goes from 0 to vertexCount - 1\\n//\\n// vertexCount is provided vby this site and is set above with the silder\\n//             it is also the value passed to `gl.drawArrays(primitive, offset, vertexCount);\\n// \\n// v_color     is provided by this site. It is the output color the fragment shader will\\n//             use to set the color\\n\\nvoid main() {\\n float u = vertexId / (vertexCount - 1.0);  // get a value that goes from 0 ot 1\\n float x = u * 2.0 - 1.0;  // convert to a value that goes from -1 to 1\\n gl_Position = vec4(x, 0, 0, 1);\\n gl_PointSize = vertexId * 5.;\\n v_color = vec4(1);\\n}\"}",
  "screenshotURL": "data/images/images-p6zvbuv1ese4oyupo-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "21"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "DrohoDKGW7sT5kqao"
}