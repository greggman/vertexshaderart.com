{
  "_id": "7JTyL7fuENPgA9o2H",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1594651971088"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1594651971088"
    }
  },
  "origId": "GxbSZ33B9swmxAmdT",
  "name": "strg",
  "notes": "",
  "rank": {
    "$numberDouble": "1.4286450328953764"
  },
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/deardeermusic/free-download-depeche-mode-strangelove-warung-remix",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "// terrain\n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nmat4 rotX(float angle) {\n\n    float s = sin( angle );\n    float c = cos( angle );\n\n    return mat4(\n      1, 0, 0, 0,\n      0, c, s, 0,\n      0,-s, c, 0,\n      0, 0, 0, 1);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  #if 0\n  return mat4(\n    1, 0, 0, trans[0],\n    0, 1, 0, trans[1],\n    0, 0, 1, trans[2],\n    0, 0, 0, 1);\n  #else\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n  #endif\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat p1m1(float v) {\n  return v * .5 + .5;\n}\n\nfloat inRange(float v, float minV, float maxV) {\n  return step(minV, v) * step(v, maxV);\n}\n\nfloat at(float v, float target) {\n  return inRange(v, target - 0.1, target + 0.1);\n}\n\n// terrain function from mars shader by reider\n// https://www.shadertoy.com/view/XdsGWH\nconst mat2 mr = mat2 (0.84147,  0.54030,\n\t\t\t\t\t  0.54030, -0.84147 );\nfloat hash( in float n )\n{\n\treturn fract(sin(n)*43758.5453);\n}\nfloat noise(in vec2 x)\n{\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n\t\t\n\tf = f*f*(3.0-2.0*f);\t\n\tfloat n = p.x + p.y*57.0;\n\t\n\tfloat res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n\t\t\t\t\tmix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n\treturn res;\n}\nfloat fbm( in vec2 p )\n{\n    float su = fract(p.x * 0.0125);\n    float sv =  1. - (p.y + 0.5) / soundRes.y;\n    float s = \n      sin(time + su * 11.2) + \n      sin(time + sin(su * sv * 2.) * 17.2) + \n      sin(time + sv * 40.0) +\n      sin(time * -5. + sv * 33.) * .2;\n    s *= 0.15;\n    // texture2D(sound, vec2(mix(0.002, 0.253, su), sv)).a;\n    return pow(s, 1.) * 0.5;\n    //return sin(p.y * 4.);\n    //return sin(p.x * PI) * sin(p.y * PI) * 0.5;\n\tfloat f;\n    p.y += time * 0.1;\n\tf  =      0.5000*noise( p ); p = mr*p*2.02;\n\tf +=      0.2500*noise( p ); p = mr*p*2.33;\n\tf +=      0.1250*noise( p ); p = mr*p*2.01;\n\tf +=      0.0625*noise( p ); p = mr*p*5.21;\n\t\n\treturn f * 0.5;///(0.9375)*smoothstep( 260., 768., p.y ); // flat at beginning\n}\n\nvec3 getQuadPoint(const float id, const float scale, const vec3 off) {\n  float outId = mix(id, 8. - id, step(2.5, id));\n  float ux = floor(outId / 6.) + mod(outId, 2.);\n  float vy = mod(floor(outId / 2.) + floor(outId / 3.), 2.); \n  vec3 p = vec3(ux, 0, vy) + off;\n  vec3 pos = p * scale + vec3(0, fbm(p.xz) * 0., 0);\n  return pos;\n}\n\nvec3 grad(float v) {\n  v = fract(v) * 4.0;\n  vec3 c  = step(v, 1.) * mix(vec3(1, 1, 1), vec3(0, 0, 1), clamp(v - 0., 0., 1.));\n  c += mix(vec3(0, 0, 1), vec3(1, 0, 0), clamp(v - 1., 0., 1.));\n  return c;\n}\n\n#define POINTS_PER_QUAD 6.\nvoid main() {\n  float quadPnt  = mod(vertexId, 6.);\n  float quadId   = floor(vertexId / POINTS_PER_QUAD);\n  float numQuads = floor(vertexCount / POINTS_PER_QUAD);\n  float across   = floor(sqrt(numQuads) * 0.5);\n  float down     = floor(numQuads / across);\n  \n  float qx = mod(quadId, across);\n  float qz = floor(quadId / across);\n  float qu = qx / across;\n  float qv = qz / down;\n  vec3 q = vec3(qx, 0, qz);\n  \n  \n  float s = 16. / across;\n  \n  float nId = floor(quadPnt / 3.) * 3.;\n  vec3 n0 = getQuadPoint(nId + 0., s, q);\n  vec3 n1 = getQuadPoint(nId + 1., s, q);\n  vec3 n2 = getQuadPoint(nId + 2., s, q);\n  vec3 n = (cross(normalize(n1 - n0), normalize(n2 - n1)));// * mix(vec3(1,1,1), vec3(-1,-1,-1), step(2.5, nId));\n  vec3 lightDir = normalize(vec3(-1, 1, -2));\n  float l = abs(dot(n, lightDir));\n  \n  vec3 p = getQuadPoint(quadPnt, s, vec3(0));\n//  p = vec3(qx, 0, qz);\n  \n//  float ss = texture2D(sound, vec2(fract(hash(qu + qv) + qv + time * 0.5), 0.)).a;\n  float ss = texture2D(sound, vec2(qu * 0.5, qv * 0.5)).a * -200.;\n\n  float ct = time * 0.3;\n//  vec3 cameraPos    = vec3(mouse.x * 4., mix(5., 1., p1m1(mouse.y)), -3);\n  vec3 cameraPos    = vec3(sin(ct), 1., sin(ct) + 1.);\n  vec3 cameraTarget = vec3(cameraPos.x, 0, 4. + sin(ct));\n  vec3 cameraUp     = normalize(vec3(sin(ct + 2.5) * 0.3, 1, 0));\n  \n  mat4 m = persp(radians(45.), resolution.x / resolution.y, 0.1, 100.);\n  m *= cameraLookAt(cameraPos, cameraTarget, cameraUp);\n  m *= trans(vec3(-across / 2. * s, 0, 0));\n  \n  m *= trans(q * s);\n  mat4 m2 = rotY(sin(time * 1.114 + qu) + sin((time * 0.94 + qu * 3.0) * 0.73)+ sin((time + qv * 4.7) * 0.211)\n         + qv);\n//  m *= inverse(trans(q));\n\n      m2 *= trans(vec3(\n          sin((time        + qu *  0.913)) * 105. + \n          sin((time * 0.23 + qu *  2.713)) *  55. +\n          sin((time * 0.51 + qu *  4.317)) *  23. +\n          sin((time * 0.78 + qu *  8.111)) *  17. +\n          sin((time * 1.37 + qu * 15.111)) *   6. ,\n          qu + ss,\n          cos((time        + qv *  1.177)) * 66. + \n          cos((time * 1.03 + qv *  2.177)) * 33. + \n          cos((time * 0.91 + qv *  4.177)) * 16. + \n          cos((time * 0.76 + qv *  8.177)) *  8. + \n          cos((time * 0.37 + qv * 16.177)) *  4. \n          ) * 0.01);\n                 /*\n      let smat = m3.translation(4, 6);\n      smat = m3.multiply(smat, mat);\n      setTransform(smat);\n      ctx.fillStyle = '#000';\n      ctx.fillRect(-2, -2, cellSize + 4, cellSize + 6);\n      const d = m3.distance(mat[6], mat[7], xBase, yBase) / dist;\n \n  */\n  \n  \n  gl_Position = m * m2 * vec4(p, 1);\n  \n  float d = length(vec3(m2[3]));\n  float hue = d * 0.2;0.6 + qu * 0. + p.y * 0.1;//1.;m1p1(n.z);\n  float sat = 1.;pow(1. - p.y, 2.);//.3;abs(n.z);\n  float val = 1.; mix(0.05, 1., l);\n  \n  float pop = step(0.6, ss);\n//  val = mix(val, 1., pop);\n//  hue = mix(hue, hue + .5, pop);\n  \n  float cback = 1. - pow(qv, 5.);\n  float cacross = 1. - pow(abs((qu * 2. - 1.)), 5.);\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1.);\n  v_color = mix(v_color, background, 1. - cback * cacross);\n  v_color.rga *= v_color.a;\n  v_color.rgb = grad(d);\n  \n  gl_PointSize = 10.0;\n}"
  },
  "screenshotURL": "data/images/images-8js557ky0nikp5pu1-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "186"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "Fh2m5iezjzsbsRYta"
}