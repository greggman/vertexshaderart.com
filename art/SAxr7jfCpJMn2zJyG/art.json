{
  "_id": "SAxr7jfCpJMn2zJyG",
  "owner": {
    "_id": "u4NtGnPbxt9dhGYLs",
    "createdAt": {
      "$date": {
        "$numberLong": "1617861653143"
      }
    },
    "username": "blackle",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/32bd668863823ef987c1aa8d6f81ace6?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1617861662855"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1617864683523"
    }
  },
  "origId": null,
  "name": "cheese wheel",
  "notes": "first go at this stuff",
  "rank": {
    "$numberDouble": "10.47476435511673"
  },
  "private": false,
  "unlisted": false,
  "username": "blackle",
  "avatarUrl": "https://secure.gravatar.com/avatar/32bd668863823ef987c1aa8d6f81ace6?default=retro&size=200",
  "settings": {
    "num": 38763,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.16862745098039217,
      0.16862745098039217,
      0.16862745098039217,
      1
    ],
    "shader": "#define PI radians(180.)\n#define NUM_SEGMENTS 2.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 1.0\n\nvec3 posOnSphere(float latid, float longid, float numlat, float numlong) {\n  longid = longid/numlong*3.1415*2.-3.1415;\n  latid = latid/numlat*3.1415-3.1415/2.;\n  return vec3(sin(longid)*cos(latid), sin(latid), cos(longid)*cos(latid));\n}\n\nfloat smin(float a, float b, float k) {\n  float h = max(0., k-abs(b-a))/k;\n  return min(a,b) - h*h*h*k/6.;\n}\n\nvec3 closest(vec3 p) {\n  //return normalize(p);\n  //return mix(normalize(p), vec3(p.x, sign(p.y)*.5, p.z), step(.5,abs(p.y)));\n  p = normalize(p);\n  p.y = smin(p.y, .5, .2);\n  p.y = -smin(-p.y, .5, .2);\n  return p;\n}\nfloat dist(vec3 p) {\n  //return length(p) - 1.;\n  //return length(p-closest(p));\n  return -smin(1.-length(p),.5-abs(p.y),.2);\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.001);\n  return normalize(dist(p) - vec3(dist(k[0]),dist(k[1]),dist(k[2])));\n}\n\nvec3 posForId(float id) {\n  float vertid = mod(id, 3.);\n  float triid = floor(id/3.);\n  float qptid = mod(triid, 2.);\n  float quadid = floor(triid/2.);\n  \n  float numlat = 80.;\n  float numlong = 80.;\n  float latid = floor(quadid/numlong) + mix(floor(vertid/2.), 1.-floor(vertid/2.), qptid);\n  float longid = mod(quadid,numlong) + mix(mod(vertid,2.), 1.-mod(vertid,2.), qptid);\n  vec3 p = posOnSphere(latid, longid, numlat, numlong);\n  return closest(p);\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nvoid main() {\n  vec2 aspect = vec2(1, resolution.x / resolution.y);\n  vec3 pos = posForId(vertexId);\n  vec3 n = norm(pos);\n  vec3 on = n;\n  \n  vec3 cam = vec3(0,0,1);\n  vec3 r = reflect(cam,n);\n  n = erot(n, vec3(0,1,0), time);\n  n = erot(n, vec3(1,0,0), sin(time/2.)*.3);\n  //you need a proper projection matrix blackle...\n  //or do I? lmao\n  r = erot(r, vec3(0,1,0), time);\n  r = erot(r, vec3(1,0,0), sin(time/2.)*.3);\n  pos = erot(pos, vec3(0,1,0), time);\n  pos = erot(pos, vec3(1,0,0), sin(time/2.)*.3);\n  float fres = 1.-abs(dot(n,cam))*.98;\n  \n  gl_Position = vec4(pos.xy * aspect, pos.z, 2.);\n  gl_PointSize = 10.;\n\n  float spec = length(sin(r*3.)*.5+.5)/sqrt(3.);\n  float diff = length(sin(on*2.)*.4+.6)/sqrt(3.);\n  //v_color = vec4(n*.5+.5,1);\n  v_color = smoothstep(0.,1.,sqrt(vec4(diff*vec3(.9,.5,.3) + pow(spec,8.)*fres, 1)));\n}"
  },
  "screenshotURL": "data/images/images-i425uicasg8nyron8-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "615"
  },
  "likes": {
    "$numberInt": "2"
  },
  "revisionId": "KervAiXaPYkRyTi9T"
}