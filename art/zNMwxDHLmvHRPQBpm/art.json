{
  "_id": "zNMwxDHLmvHRPQBpm",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": 1534536265831
  },
  "modifiedAt": {
    "$date": 1534536265831
  },
  "origId": null,
  "name": "unnamed",
  "notes": "",
  "rank": 1.8989026197420207,
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 1,
    "mode": "LINES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "attribute vec3 a_position;\nvarying vec3 v_pos;\nvarying float v_alpha;\nuniform mat4 u_modelViewMatrix;\nuniform mat4 u_projectionMatrix;\nuniform vec2 u_resolution;\nuniform float u_amount;\nuniform float u_time;\nuniform float u_twirl;\nuniform float u_noise_time;\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0))/6.0\n    0.366025403784439, // 0.5*(sqrt(3.0)-1.0)\n    -0.577350269189626, // -1.0 + 2.0 * C.x\n    0.024390243902439);\n    // 1.0 / 41.0\n    // First corner\n    vec2 i = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    // Permutations\n    i = mod289(i);\n    // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n    \n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h )[[[semicolonReplacementKey]]]\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    // Compute final noise value at P\n    vec3 g;\n    g.x = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\nfloat clampNorm(float val, float min, float max) {\n    return clamp((val - min) / (max - min), 0.0, 1.0);\n}\nconst float PI = 3.14159265358979323846264;\n  \nvoid main(void) {\n    gl_PointSize = 2.0;\n    vec3 pos = a_position;\n    float index = pos.z;\n    pos.z = 0.0;\n    v_alpha = 1.0;\n    // 9 groups          \n    float group = mod(floor(index / 360.0), 9.0);\n    float angle = index / 180.0 * PI;\n    float radius = 300.0 + floor(index / 360.0) * 3.0;\n    float toCenter = clamp(radius / 600.0, 0.0, 1.0);\n    vec3 basePos = pos;\n    basePos.x = sin(angle) * radius;\n    basePos.y = cos(angle) * radius;\n    angle += u_time * (1.0 + group * .1) * 0.015;\n    angle += u_twirl * pow(sin(angle * (1.0 - u_twirl * 0.01)), 3.0) * 0.7;\n    pos.x = sin(angle) * radius;\n    pos.y = cos(angle) * radius;\n    vec3 finalPos = pos;\n    finalPos.x = pos.x + snoise(basePos.xy * 1. + u_noise_time * .03 ) * 50.0;\n    finalPos.y = pos.y + snoise(basePos.xy * 1. + u_noise_time * .03 + 3.0 ) * 50.0;\n    v_alpha = toCenter - (sin(pow(toCenter, 1.2) * 60.0) + 1.0) / 2.0 * 0.5;\n    finalPos.x /= u_resolution.x;\n    finalPos.y /= u_resolution.y;\n    v_pos = finalPos;\n    gl_Position = u_projectionMatrix * u_modelViewMatrix * vec4(finalPos, 1.0);\n}\n\n\n"
  },
  "screenshotURL": "data/images/images-xui6xluvw9me8sjmp-thumbnail.jpg",
  "hasSound": "",
  "views": 101,
  "likes": 0,
  "revisionId": "LRhdkYwa4BqFSpYtz"
}