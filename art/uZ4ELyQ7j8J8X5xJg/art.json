{
  "_id": "uZ4ELyQ7j8J8X5xJg",
  "owner": {
    "_id": "Re2gw8aDCRTMaXYDC",
    "createdAt": {
      "$date": "1445867231387"
    },
    "username": "kabuto",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/e678fef714d5460c8f9ce2723842fd19?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1446637718221"
  },
  "modifiedAt": {
    "$date": "1446721072202"
  },
  "origId": null,
  "name": "julia point cloud",
  "private": false,
  "username": "kabuto",
  "settings": {
    "num": 56478,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/caseandpoint/case-point-upgrade-free-download",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define MAXITER 1000\n\nvoid main() {\n  // more or less random start position\n  vec2 v = vec2(cos(vertexId*23.), cos(vertexId*545.))*3.;\n\n  // collect ljapunov exponent (derivative) for colouring\n  float dv = 0.;\n  \n  float rnd = vertexId;\n  \n  // Follow a path just along the edge of the mandelbrot set's 2 biggest blobs\n  const float PI = 3.141592653589;\n  float t = fract(time*.06)*2.-1.;\n  t = pow(abs(t),0.7)*sign(t);\n  t = fract(t*.5+.6);\n  t = t*2.5*PI-0.5*PI;\n  vec2 ofs = t < 0.\n    ? vec2(-1,0)+vec2(cos(t*4.),sin(t*4.))*.25\n    : vec2(.25,0)-vec2(cos(t),-sin(t))*(1.+cos(t))*.5;\n  \n  //\n  vec2 norm = t < 0.\n    ? vec2(cos(t*4.),sin(t*4.))*sin(-t*2.)\n    : -vec2(cos(t*1.5),-sin(t*1.5))*sin(t);\n  ofs += norm*(sin(time*.3)+sin(time*.33413)+cos(time*.335)+cos(time*.4534)+1.)*.2;\n  \n  \n  for (int i = 0; i < MAXITER; i++) {\n    // random number update\n    rnd = sin(rnd*1337.+vertexId*.2+sin(time)+float(i));\n    \n    // inverse julia iteration step - subtract offset, then extract square root\n\tv -= ofs;\n  \tv = vec2(sqrt((length(v) + v.x)*.5), sign(v.y)*sqrt((length(v) - v.x)*.5));\n    \n    // The complex square root is ambiguous, so both the value just computed and its inverse are valid.\n    // The most simple approach of just randomly picking a point does not work so well -\n    // it tends to collect points in certain spots (mostly tips of the fractal) while neglecting coves.\n    // Mathematically speaking, coves appear because the square root of near-zero values is computed\n    // and the square root tends to make a big difference around such values.\n    // At the same time point density is decreased too...\n    // To combat this we look ahead to the next step and prefer values that are closer to zero.\n    // This doesn't fix everything - for that we would have to look ahead further,\n    //but complexity would increase too much. So it might not really be feasible for this approach.\n    v *= sign(rnd-(length(v-ofs)-length(-v-ofs))*vertexId/vertexCount*1.3*(1.-exp((float(i-1)-float(MAXITER))*.5)));\n    \n    dv += log(length(v))+.2;\n  }\n  \n   vec2 aspect = vec2(1, resolution.x / resolution.y);\n  gl_Position = vec4(v*aspect*.5, 1.-vertexId*.00001, 1);\n\n  gl_PointSize = min(3.,sqrt(max(1.,-dv*.1)));\n  v_color = vec4(dv,dv*.005+1.,1,1)*.3/gl_PointSize;\n}"
  },
  "screenshotURL": "data/images/images-zmmvovl7lp9166ob0-thumbnail.jpg",
  "views": "960",
  "likes": "6",
  "revisionId": "x2Ti6Jqxbg5f5gSSc",
  "hasSound": true,
  "rank": "10.68006412397301",
  "avatarUrl": "https://secure.gravatar.com/avatar/e678fef714d5460c8f9ce2723842fd19?default=retro&size=200"
}