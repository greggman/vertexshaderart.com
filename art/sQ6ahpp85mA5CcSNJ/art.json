{
  "_id": "sQ6ahpp85mA5CcSNJ",
  "owner": {
    "_id": "AKayQxJZqd5z7boy2",
    "createdAt": {
      "$date": {
        "$numberLong": "1550038451574"
      }
    },
    "profile": {
      "first_name": "Archer",
      "last_name": "Wann",
      "avatarUrl": "https://lh5.googleusercontent.com/-yNdyToHV35U/AAAAAAAAAAI/AAAAAAAABxw/qQAHdzq4gr8/photo.jpg",
      "info": "CS student at UVU"
    },
    "username": "archer"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1550091375088"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1550169910609"
    }
  },
  "origId": null,
  "name": "Rainbow Menger",
  "notes": "",
  "rank": {
    "$numberDouble": "10.263833280199918"
  },
  "private": false,
  "unlisted": false,
  "username": "archer",
  "avatarUrl": "https://lh5.googleusercontent.com/-yNdyToHV35U/AAAAAAAAAAI/AAAAAAAABxw/qQAHdzq4gr8/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define PI radians(180.)\\n#define MAX_RAY_STEPS 50\\n#define MIN_DISTANCE 0.001\\n#define MENGER_LAYERS 3\\n#define FOV 4.0 / 3.0\\n\\nvec3 hsv2rgb(vec3 c) { // Change HSV to RGB\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nfloat distanceEstimator(vec3 pos) { // Distance estimator for Menger Sponge\\n    // Loop the Menger Sponge\\n    float x = 2.0 / 3.0 - mod(abs(pos.x) + 2.0 / 3.0, 4.0 / 3.0);\\n    float y = 2.0 / 3.0 - mod(abs(pos.y) + 2.0 / 3.0, 4.0 / 3.0);\\n    float z = 2.0 / 3.0 - mod(abs(pos.z) + 2.0 / 3.0, 4.0 / 3.0);\\n  \\n    // Center it by changing position and scale\\n\\tx = x * 0.5 + 0.5;\\n    y = y * 0.5 + 0.5;\\n    z = z * 0.5 + 0.5;\\n\\n\\tfloat xx = abs(x - 0.5) - 0.5;\\n    float yy = abs(y - 0.5) - 0.5;\\n    float zz = abs(z - 0.5) - 0.5;\\n  \\n\\tfloat d1 = max(xx,max(yy,zz)); // Distance to a box\\n\\tfloat d = d1; // Current computed distance\\n\\tfloat p = 1.0;\\n  \\n    for (int i=1; i <= MENGER_LAYERS; i++) {\\n\\t\\tfloat xa = mod(3.0 * x * p, 3.0);\\n\\t\\tfloat ya = mod(3.0 * y * p, 3.0);\\n\\t\\tfloat za = mod(3.0 * z * p, 3.0);\\n\\t\\tp *= 3.0;\\n\\t\\t\\n\\t\\txx = 0.5 - abs(xa - 1.5);\\n        yy = 0.5 - abs(ya - 1.5);\\n        zz = 0.5 - abs(za - 1.5);\\n        \\n        // Distance inside the 3 axis-aligned square tubes\\n\\t\\td1 = min(max(xx, zz), min(max(xx, yy), max(yy, zz))) / p;\\n\\t\\t\\n      \\t// Intersection\\n\\t\\td = max(d, d1);\\n    }\\n  \\n\\treturn d * 2.0;\\n}\\n\\nfloat trace(vec3 from, vec3 direction) { // \\n\\tfloat totalDistance = 0.0;\\n\\tint steps;\\n\\tfor (int i=0; i < MAX_RAY_STEPS; i++) {\\n        steps++;\\n\\t\\tvec3 p = from + totalDistance * direction;\\n\\t\\tfloat distance = distanceEstimator(p);\\n\\t\\ttotalDistance += distance;\\n\\t\\tif (distance < MIN_DISTANCE) break;\\n\\t}\\n\\treturn 1.0 - float(steps) / float(MAX_RAY_STEPS);\\n}\\n\\nvoid main() {\\n  \\n  float pixelDensity = floor(sqrt(vertexCount));\\n  gl_PointSize = max(resolution.x, resolution.y) / pixelDensity;\\n  \\n  // Convert vertices to screenspace pixels\\n  float sx = (mod(vertexId, pixelDensity) / pixelDensity) * 2.0 - 1.0;\\n  float sy = (ceil(vertexId / pixelDensity) / pixelDensity) * 2.0 - 1.0;\\n  \\n  gl_Position = vec4(sx, sy, 0.0, 1.0);\\n  \\n  // Convert screenspace pixels to worldspace pixels\\n  float trueX = sx * resolution.x / 500.0;\\n  float trueY = sy * resolution.y / 500.0;\\n  \\n  // Get rotation\\n  float rotation = -mouse.x + PI / 2.0;\\n  \\n  // Get camera position and direction per pixel\\n  vec3 camera = vec3(0.0, mod(time, FOV), 0.0);\\n  vec3 direction = normalize(vec3(FOV * cos(rotation) + trueX * sin(rotation), FOV * sin(rotation) + trueX * -cos(rotation), trueY));\\n  \\n  // Get pixel value and set vertex color\\n  float pixelVal = trace(camera, direction);\\n  vec3 pixelColor = hsv2rgb(vec3(pixelVal * 3.0, 0.3, pixelVal * 0.3 + 0.7));\\n  \\n  v_color = vec4(pixelColor, 1.0);\\n}\"}",
  "screenshotURL": "data/images/images-w0vu21lgu06bm774x-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "306"
  },
  "likes": {
    "$numberInt": "2"
  },
  "revisionId": "jLqfqcEgxbkBSMEXg"
}