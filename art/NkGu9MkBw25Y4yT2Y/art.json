{
  "_id": "NkGu9MkBw25Y4yT2Y",
  "owner": {
    "_id": "96ZuW2KN9gsnSfGDQ",
    "createdAt": {
      "$date": {
        "$numberLong": "1536676462835"
      }
    },
    "username": "teraspora",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/ee48754754126a1abee9056ee99b25c4?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1536795392021"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1536795392021"
    }
  },
  "origId": null,
  "name": "trigons-00.vert",
  "notes": "learning...",
  "rank": {
    "$numberDouble": "1.2499836043328572"
  },
  "private": false,
  "unlisted": true,
  "username": "teraspora",
  "avatarUrl": "https://secure.gravatar.com/avatar/ee48754754126a1abee9056ee99b25c4?default=retro&size=200",
  "settings": {
    "num": 26501,
    "mode": "TRIANGLES",
    "sound": "file:///media/john/sys2/web18/playground/audio/bach-01.wma",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "// My second vertexshaderart code attempt\n// John Lynch, 11-09-2018\n#define PI 3.141592653589793234\n#define TWO_PI 6.28318530716\n\n// ==================================================================\n// Some functions adapted from Github - \n// https://github.com/tobspr/GLSL-Color-Spaces/blob/master/ColorSpaces.inc.glsl\n// - not tested rigorously by me, seem to work!\n\nvec3 hue2rgb(float hue)\n{\n    float R = abs(hue * 6. - 3.) - 1.;\n    float G = 2. - abs(hue * 6. - 2.);\n    float B = 2. - abs(hue * 6. - 4.);\n    return clamp(vec3(R,G,B), 0., 1.);\n}\n\n// Converts from HSL to linear RGB\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb = hue2rgb(hsl.x);\n    float C = (1. - abs(2. * hsl.z - 1.)) * hsl.y;\n    return (rgb - 0.5) * C + hsl.z;\n}\n\n// ======================== USEFUL FUNCTIONS ========================\n\nfloat scaleFactor = 1.0;\n\nvec2 rotate(vec2 v, float phi) {\n  return vec2(v.x * cos(phi) - v.y * sin(phi),\n              v.x * sin(phi) + v.y * cos(phi));\n}\n\nbool isOdd(float n) {\n  return mod(n, 2.) > 0.5;\n}\n\n// ==== == ==== == ==== == ==== == ==== == ==== == ==== == ==== == ==\n\n\n\n\n\nvec2 circle(float vid, float numSegments) {\n  \n  float ux = floor(vid / 6.) + mod(vid, 2.);\n  float vy = mod(floor(vid / 2.) + floor(vid / 3.), 2.);\n  \n  float phi = ux / numSegments * TWO_PI;\n  float r = (vy + 2.) * 0.1;\n  float c = cos(phi);\n  float s = sin(phi);\n  \n  float x = c * r;\n  float y = s * r;   \n  \n  return vec2(x, y);\n}\n  \nvoid main() {\n  float segs = mod(time, 20.);\n  vec2  circleXY = circle(vertexId, segs);\n  float numPointsPerCircle = segs * 6.;\n  \n  float circleId = floor(vertexId / numPointsPerCircle);\n  float circleCount = floor(vertexCount / numPointsPerCircle);\n  \n  float ySpan = floor(sqrt(circleCount));\n  float xSpan = floor(circleCount / ySpan);\n  \n  float x = mod(circleId, xSpan);\n  float y = floor(circleId / xSpan);\n  \n  float u = x / (xSpan - 1.);\n  float v = y / (xSpan - 1.);\n  \n  float ux = u * 2. - 1. + mouse.x;\n  float vy = v * 2. - 1. + mouse.y;\n  \n  vec2 xy = circleXY * 0.1 + vec2(ux, vy) * scaleFactor * (sin(time / 2.) + 0.5);\n  xy *= length(xy);\n  xy = rotate(xy, -time * PI / 10.) + 0.1 * sin(time);\n  float su = abs(u - 0.5) * 2.;\n  float sv = abs(v - 0.5) * 2.;\n  \n  // float au = abs(atan(su, sv)) / PI;\n  // float av = length(vec2(su, sv));\n  \n  gl_Position = vec4(xy, 0.99, 1) ;\n  gl_PointSize = 1.;\n  \n  vec3 col = hue2rgb(cos(time / 6.));\n  v_color = vec4(col, 1.);\n  \n  // vec3 col = vec3(cos(circleId * sin(time / 6.)) , 0., 1. - cos(time));\n  // v_color = vec4(col, 1.);\n  \n  \n  \n  \n  \n}\n \n\n\n\n\n\n\n\n\n\n/*\nvoid main() {\n  float span = floor(sqrt(vertexCount));\n  \n  float u = mod(vertexId, span) / (span - 1.);\n  float v = floor(vertexId / span) / (span - 1.);\n  \n  float ux = u * 2. - 1.;\n  float vy = v * 2. - 1.;\n  \n  float yDelta = (8. * sin(time / 4. * ux + vy ) + sin(time / 2.) + sin(time) + 3. * sin(time / 2.)) / 20.;\n  float xDelta = yDelta * 1.8;\n  if (isOdd(vertexId)) {\n    yDelta =  -yDelta + 2. * mouse.y ;\n  }\n  vec2 xy = vec2(ux + xDelta, vy + yDelta * (ux / resolution.x) * vertexId) * scaleFactor;\n  xy = rotate(xy, sin(time / 20.) * TWO_PI * mouse.x / 4.);\n  gl_Position = vec4(xy, 0, 1);\n  gl_PointSize = 10.;\n  gl_PointSize += 1. / span;\n  gl_PointSize *=  0.1 * resolution.x * resolution.y  / 262144.;\n  float k = vertexId / vertexCount;\n  v_color = vec4(k * 0.8, 0.2, 0.6 - k * mod(time, 10.) / 2., 1.);\n}\n*/"
  },
  "screenshotURL": "data/images/images-gn1x1hpja4a8a0hwz-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "2"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "JvSfQtNpXrms4qgfD"
}