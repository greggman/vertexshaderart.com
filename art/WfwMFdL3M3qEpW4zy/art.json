{
  "_id": "WfwMFdL3M3qEpW4zy",
  "owner": {
    "_id": "exrQAEG45B5Exhhan",
    "createdAt": {
      "$date": {
        "$numberLong": "1684329330454"
      }
    },
    "profile": {
      "name": "Minsu Kim",
      "avatarUrl": "https://avatars.githubusercontent.com/minsu-kim-digipen?s=200"
    },
    "username": "minsu-kim-digipen"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1685167836895"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1685170621760"
    }
  },
  "origId": null,
  "name": "Circles from Triangles",
  "notes": "",
  "rank": {
    "$numberDouble": "1.9915243288584445"
  },
  "private": false,
  "unlisted": true,
  "username": "minsu-kim-digipen",
  "avatarUrl": "https://avatars.githubusercontent.com/minsu-kim-digipen?s=200",
  "settings": "{\"num\":100000,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/graham-panter/fly-by-light\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// Name : Minsu Kim\\n// Assignment : Exercise - Vertexshaderart : Circles from Triangles\\n// Course : CS250\\n// Spring 2023\\n\\n\\n\\n\\n// from: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n#define PI radians(180.0)\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvec2 getCirclePoint(float id, float numCircleSegments)\\n{\\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  // id = 0 1 2 3 4 5 6 7 8 9 10 11 12\\n  //\\t  0 0 0 0 0 0 1 1 1 1 1  1  2\\n  //      0 1 0 1 0 1 0 1 0 1 0  1  0\\n  //      0 1 0 1 0 1 1 2 1 2 1  2  2 3 2 3\\n  \\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\\n  // id = 0 1 2 3 4 5 6 7 8 9 10 11 12\\n  //      0 0 1 1 2 2 3 3 4 4 5  5  6\\n  //      0 0 0 1 1 1 2 2 2 3 3  3  4\\n  //      0 0 1 0 1 1 1 1 0 1 0  0  0\\n  \\n\\n  \\n  float angle = ux / numCircleSegments * PI * 2.;\\n  float c = cos(angle);\\n  float s = sin(angle);\\n  \\n  float radius = vy + 1.;\\n  \\n  float x = c * radius;\\n  float y = s * radius;\\n  \\n  return vec2(x, y);\\n}\\n\\n\\nvoid main()\\n{\\n  float numCircleSegments = 12.;\\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\\n  \\n  \\n  float numPointsPerCircle = numCircleSegments * 6.;\\n  float circleId = floor(vertexId / numPointsPerCircle);\\n  float numCircles = floor(vertexCount / numPointsPerCircle);\\n  \\n  float sliceId = floor(vertexId / 6.);\\n  float oddSlice = mod(sliceId, 2.);\\n  \\n  float down = floor(sqrt(numCircles));\\n  float across = floor(numCircles / down);\\n  \\n  float x = mod(circleId, across);\\n  float y = floor(circleId / across);\\n  \\n  \\n  float u = x / (across - 1.);\\n  float v = y / (across - 1.);\\n \\n  float xoff = 0.;//sin(time + y * 0.2) * 0.1;\\n  float yoff = 0.;//sin(time +  x * 0.3) * 0.2;\\n   \\n  \\n  \\n  float ux = u * 2. - 1. + xoff;\\n  float vy = v * 2. - 1. + yoff;\\n  \\n  float su = abs(u -.5) * 2.;\\n  float sv = abs(v - .5) * 2.;\\n  float au = abs(atan(su, sv)) / PI;\\n  float av = length(vec2(su, sv));\\n  float snd = texture2D(sound, vec2(au * .05, av * .25)).a;\\n  \\n  float aspect = resolution.x / resolution.y;\\n  float sc = pow(snd + 0.2, 5.) * mix(1., 1.1, oddSlice);\\n  \\n  sc *= 20. / across;\\n  \\n  vec4 pos = vec4(circleXY, 0, 1);\\n  mat4 mat = ident();\\n  mat *= scale(vec3(1, aspect, 1));\\n  mat *= rotZ(time * 0.1);\\n  mat *= trans(vec3(ux, vy, 0) * 1.3);\\n  mat *= rotZ(snd * 20. * sign(ux));\\n  mat *= uniformScale(0.03 * sc);\\n  \\n  gl_Position = mat * pos;\\n  \\n  float soff = 0.;//sin(time + x * y * 0.02) * 5.;\\n  \\n  // [0, 1)\\n  float pump = step(0.8, snd);\\n  float hue = u * .1 + snd * .2 + time * .1;//sin(time + v * 20.) * 0.05; \\n  float sat = 1.;//mix(0.5, 1., pump);//mix(1., -10., 1. - av);\\n  float val = mix(.4, pow(snd + .2, 5.), pump);//sin(time + v * u * 20.0) * .5 + .5;\\n  \\n  hue += pump * oddSlice * 0.5 + pump * 0.33;\\n  val += oddSlice * pump;\\n  \\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\\n} \"}",
  "screenshotURL": "data/images/images-72jahw7kmqc9ayvgd-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "9"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "BeAg8R2P7GRpoFsKA"
}