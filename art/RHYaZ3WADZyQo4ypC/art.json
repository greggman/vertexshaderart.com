{
  "_id": "RHYaZ3WADZyQo4ypC",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1538962065532"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1538962168504"
    }
  },
  "origId": "wzJiTNRsg9cApqfB9",
  "name": "kali test",
  "notes": "",
  "rank": {
    "$numberDouble": "1.999985680262224"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/lapixmusic/fugene2crossfade\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,1,1,1],\"shader\":\"#define ITERS 40\\n#define M_PI 3.1415926535897932384626433832795\\n\\nvoid main ()\\n{\\n\\n    float maxFinalSquareSideSize = floor(sqrt(vertexCount));\\n  float finalMaxVertexCount = pow(maxFinalSquareSideSize,2.);\\n  \\n  float maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\\n  \\n  //x = number of elements in a line as x value for local resolution\\n  //y = number of possible lines with the given vertexCount\\n  vec2 vertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\\n  \\n  //we can now calculate the final number of elements\\n  float finalVertexCount = vertexResolution.x*vertexResolution.y;\\n  \\n  //and adjust finalVertexId\\n  float finalVertexId = mod(vertexId,finalVertexCount);\\n  \\n  //Calculate the position of the elements based on their finalVertexId\\n  //simfragCoord <=> gl_FragCoord in the vertex shader\\n  \\n  vec2 simfragCoord = vec2(mod(finalVertexId, vertexResolution.x),floor(finalVertexId / vertexResolution.x));\\n  \\n  //Step 3 >> calculate vertice positions\\n  //relative coordinate of the vertex (cordinates in 0..1 referential)\\n  float u = (simfragCoord.x /vertexResolution.x);\\n  float v = (simfragCoord.y /vertexResolution.y);\\n  \\n  //calculate coordinates in -1.>>1.0 space\\n  float sizeFactor = 1.;\\n  float fact = 2.*sizeFactor;\\n  float ux = fact*(u - 0.5);\\n  float vy = fact*(v - 0.5);\\n  \\n  gl_Position = vec4(ux, vy, 0., 1.);\\n  \\n  //gl_PointSize = ((resolution.y/numAcrossDown)*2.-1.) * 0.97;\\n  \\n  \\n  //logistic\\n  \\n\\n  float snd = texture2D(sound, vec2(0.1,  ux)).a;\\n  float snd2 = texture2D(sound, vec2(0.1,  0.3)).a;\\n  //float snd3 = texture2D(sound, vec2(0.1,  0.5)).a;\\n  \\n  \\n  vec2 p = vec2(ux ,  vy);\\n \\n  //https://www.shadertoy.com/view/XllGDH\\n\\n\\n\\tfloat t = 0.;//iTime/11.;\\n    vec2 uv  = (.2 + .05 * sin(t*1.1)) * simfragCoord.xy / vertexResolution.y + .2 * vec2(2.2+1.*sin(t), .4+.4*cos(t*.9));\\n    \\n    for (int i=0; i<11; ++i)\\n        uv = abs(uv) / dot(uv,uv) - vec2( (0.2*sin(time)+.81)-.1*uv.y);\\n    \\n\\tv_color  = vec4(uv*uv, uv.y-uv.x, 1.);\\n \\n  /*\\n  float z = fract(0.9*snd*2.+cos(1./2.)/40.);\\n  int a = 0;\\n  float trig = (cos(2. * M_PI * z) + 1.) / 2.;\\n  \\n\\n  if(p.x>0.)p.x = -p.x;\\n  \\n  if(p.y<0.)p.y = -p.y;\\n  \\n  float coeff = mix(1., 3.75, trig) + p.x * mix(3., 0.25, trig);\\n  \\n  \\n  for (int i = 0; i < ITERS; i++) {\\n    a += (z > p.y && z <= p.y + 1. / vertexResolution.y) ? 1 : 0;\\n    z = coeff * z * (1.-z);\\n  };\\n    \\n  float iters = float(ITERS);\\n  \\n  float g = 25. * float(a) / iters;\\n*/\\n \\n  gl_Position = vec4(ux, vy, 0, 1);\\n  \\n  //gl_PointSize = (resolution.y/vertexResolution.y) * 1.;//(resolution.y/numAcrossDown)*2.-1.;\\n gl_PointSize = 2.*resolution.y/vertexResolution.y;\\n\\n  //v_color = vec4(g, g/8., g / 3.,1.);\\n  \\n  \\n  \\n\\n  //v_color = vec4(1, 0, 0, 1);\\n}\"}",
  "screenshotURL": "data/images/images-4cksiljfqzsyfarvx-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "10"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "SDDLxWnjznoZkvXhZ"
}