{
  "_id": "kmHZWuJ5wjmz7RQzS",
  "owner": {
    "_id": "RfHaub5KYDRmJTzBN",
    "createdAt": {
      "$date": {
        "$numberLong": "1629553450441"
      }
    },
    "username": "przemyslawzaworski",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/3a3abcfa29dc9b0fa9fd2fb25ff10892?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1629553546616"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1632159161672"
    }
  },
  "origId": null,
  "name": "Triangle Tessellation",
  "notes": "",
  "rank": {
    "$numberDouble": "1.5823939190835068"
  },
  "private": false,
  "unlisted": false,
  "username": "przemyslawzaworski",
  "avatarUrl": "https://secure.gravatar.com/avatar/3a3abcfa29dc9b0fa9fd2fb25ff10892?default=retro&size=200",
  "settings": "{\"num\":3072,\"mode\":\"TRIANGLES\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// In absence of bitwise operators in WebGL 1.0:\\n// https://gist.github.com/EliCDavis/f35a9e4afb8e1c9ae94cce8f3c2c9b9a\\nint AND(int n1, int n2)\\n{  \\n\\tfloat v1 = float(n1);\\n\\tfloat v2 = float(n2); \\n\\tint byteVal = 1;\\n\\tint result = 0;\\n\\tfor(int i = 0; i < 32; i++)\\n\\t{\\n\\t\\tbool keepGoing = v1 > 0.0 || v2 > 0.0;\\n\\t\\tif(keepGoing)\\n\\t\\t{\\n\\t\\t\\tbool addOn = mod(v1, 2.0) > 0.0 && mod(v2, 2.0) > 0.0;      \\n\\t\\t\\tif(addOn) result += byteVal;     \\n\\t\\t\\tv1 = floor(v1 / 2.0);\\n\\t\\t\\tv2 = floor(v2 / 2.0);\\n\\t\\t\\tbyteVal *= 2;\\n\\t\\t} \\n\\t\\telse \\n\\t\\t{\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t}\\n\\treturn result;\\n}\\n\\nvec3 hash(vec2 p)\\n{\\n\\tvec2 a0 = fract(p*3.14159265359*(1./1024.))*1024.;\\n\\tvec2 a1 = fract(a0*a0*(1./1739.))*1739.;\\n\\tvec2 a2 = a1.yx + fract(a1*a1*(1./1739.))*1739.;\\n\\tvec2 a3 = a2.yx + fract(a2*a2*(1./1739.))*1739.;\\n\\treturn fract((a2.xyx + a3.xxy + a1.xyy)*(1./1739.));\\n}\\n\\n// GPU PRO 3, Advanced Rendering Techniques, A K Peters/CRC Press 2012\\n// Chapter 1 - Vertex shader tessellation, Holger Gruen\\nvoid main() \\n{\\n  \\t\\n\\tint id = int(vertexId);\\n\\tint tessellationFactor = int(max(floor((sin(time*0.5)*0.5+0.5)*32.),2.0));\\n\\tif (id > (tessellationFactor * tessellationFactor * 3)) return;  \\n\\tvec3 p1 = vec3( 0.00,  0.75, 0.00);\\n\\tvec3 p2 = vec3( 0.75, -0.75, 0.00);\\n\\tvec3 p3 = vec3(-0.75, -0.75, 0.00);\\n\\tint subtriangles = (tessellationFactor * tessellationFactor);\\n\\tfloat triangleID = mod(float( id / 3 ), float(subtriangles));  \\n\\tfloat row = floor (sqrt( triangleID ));\\n\\tint column = int(triangleID - ( row * row ));\\n\\tfloat incuv = 1.0 / float(tessellationFactor);\\n\\tfloat u = (1.0 + row) / float(tessellationFactor);\\n\\tfloat v = incuv * floor (float(column) * 0.5);\\n\\tu -= v;\\n\\tfloat w = 1.0 - u - v;\\n\\tint vID = int(float(id / 3 / subtriangles) * 3. + mod(float(id), 3.));\\n\\tint remainder = int(mod(float(vID), 3.0));\\n\\tif (remainder == 0)\\n\\t{\\n\\t\\tif (AND(column, 1) != 0)\\n\\t\\t{\\n\\t\\t\\tv += incuv, u -= incuv;\\n\\t\\t}\\n\\t}\\n\\telse if (remainder == 1)\\n\\t{\\n\\t\\tif (AND(column, 1) == 0)\\n\\t\\t{\\n\\t\\t\\tv += incuv, u -= incuv;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tv += incuv, u -= incuv;\\n\\t\\t\\tw += incuv, u -= incuv;\\n\\t\\t}\\n\\t}\\n\\telse if (remainder == 2)\\n\\t{\\n\\t\\tif (AND(column, 1) == 0)\\n\\t\\t{\\n\\t\\t\\tu -= incuv, w += incuv;\\n\\t\\t}\\n\\t\\telse \\n\\t\\t{\\n\\t\\t\\tw += incuv, u -= incuv;\\n\\t\\t}\\n\\t}\\n\\tgl_Position = vec4(u * p1 + v * p2 + w * p3, 1.0);\\n\\tv_color = vec4(hash(vec2(triangleID , triangleID + 19999.)), 1);\\n}\"}",
  "screenshotURL": "data/images/images-dyruw6q6d1pz74oq5-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "311"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "8enAM4mhjx8mSkF7y"
}