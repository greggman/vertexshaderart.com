{
  "_id": "Yudd65BQfx92kHBcH",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1617711881713"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1617777509234"
    }
  },
  "origId": "6bbL3L3PTAdvJyg8n",
  "name": "run",
  "notes": "",
  "rank": {
    "$numberDouble": "10.683568643775375"
  },
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 99996,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/djapsara/truecast-on-proton-music-guestmix-apsara",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "/* ðŸŒ³ðŸŒ²ðŸŽ„ðŸŽ‹ðŸŒ´\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n\n\n\n#define PI radians(180.0)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\n\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n// times 2 minus 1\nfloat t2m1(float v) {\n  return v * 2. - 1.;\n}\n\n// times .5 plus .5\nfloat t5p5(float v) {\n  return v * 0.5 + 0.5;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\n  float u = ux / numEdgePointsPerCircle;\n  float v = mix(inner, 1., vy);\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\n  float s = sin(a);\n  float c = cos(a);\n  float x = c * v;\n  float y = s * v;\n  float z = 0.;\n  pos = vec3(x, y, z);  \n}\n\n\n#define CUBE_POINTS_PER_FACE 6.\n#define FACES_PER_CUBE 6.\n#define POINTS_PER_CUBE (CUBE_POINTS_PER_FACE * FACES_PER_CUBE)\nvoid getCubePoint(const float id, out vec3 position, out vec3 normal) {\n  float quadId = floor(mod(id, POINTS_PER_CUBE) / CUBE_POINTS_PER_FACE);\n  float sideId = mod(quadId, 3.);\n  float flip   = mix(1., -1., step(2.5, quadId));\n  // 0 1 2  1 2 3\n  float facePointId = mod(id, CUBE_POINTS_PER_FACE);\n  float pointId = mod(facePointId - floor(facePointId / 3.0), 6.0);\n  float a = pointId * PI * 2. / 4. + PI * 0.25;\n  vec3 p = vec3(cos(a), 0.707106781, sin(a)) * flip;\n  vec3 n = vec3(0, 1, 0) * flip;\n  float lr = mod(sideId, 2.);\n  float ud = step(2., sideId);\n  mat4 mat = rotX(lr * PI * 0.5);\n  mat *= rotZ(ud * PI * 0.5);\n  position = (mat * vec4(p, 1)).xyz;\n  normal = (mat * vec4(n, 0)).xyz;\n}\n\nfloat Hash( vec2 p) {\n     vec3 p2 = vec3(p.xy,1.0);\n    return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*3758.5453123);\n}\n\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n     vec2 f = fract(p);\n     f *= f * (3.0-2.0*f);\n\n    return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),\n               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),\n               f.y);\n}\n\nfloat fbm(vec2 p) {\n     float v = 0.0;\n     v += noise(p*1.0)*.5;\n     v += noise(p*2.)*.25;\n     v += noise(p*4.)*.125;\n     return v;\n}\n\nfloat crv(float v) {\n  return fbm(vec2(v, v * 1.23));\n  //float o = sin(v) + sin(v * 2.1) + sin(v * 4.2) + sin(v * 8.9); \n  //return o / 4.;\n}\n\n// meh: would prefer a forumla\nvoid branchInfo(float branchId, out float used, out float branch) {\n  if (branchId <  0.5) { used = 1.; branch =  0.; return; }\n  if (branchId <  1.5) { used = 2.; branch =  0.; return; }\n  if (branchId <  2.5) { used = 3.; branch =  0.; return; }\n  if (branchId <  3.5) { used = 4.; branch =  0.; return; }\n  if (branchId <  4.5) { used = 4.; branch =  8.; return; }\n  if (branchId <  5.5) { used = 3.; branch =  4.; return; }\n  if (branchId <  6.5) { used = 4.; branch =  4.; return; }\n  if (branchId <  7.5) { used = 4.; branch = 12.; return; }\n  if (branchId <  8.5) { used = 2.; branch =  2.; return; }\n  if (branchId <  9.5) { used = 3.; branch =  2.; return; }\n  if (branchId < 10.5) { used = 4.; branch =  2.; return; }\n  if (branchId < 11.5) { used = 4.; branch = 10.; return; }\n  if (branchId < 12.5) { used = 3.; branch =  6.; return; }\n  if (branchId < 13.5) { used = 4.; branch =  6.; return; }\n                         used = 4.; branch = 14.; return;\n}\n\nvoid main() {\n  vec3 pos;\n  vec3 normal;\n  getCubePoint(vertexId, pos, normal);\n  float numCubes = floor(vertexCount / POINTS_PER_CUBE);\n  float cubeId = floor(vertexId / POINTS_PER_CUBE);\n  float cubeV = cubeId / numCubes;\n  \n  \n  float cubesPerTree = 15.0;\n  float cubesPerTreePair = cubesPerTree * 2.0;\n  float treeId = floor(cubeId / cubesPerTreePair);\n  float numTrees = floor(numCubes / cubesPerTreePair);\n  float treeV = treeId / numTrees;\n  \n  float branchId = floor(mod(cubeId + 0.1, cubesPerTree));\n  float branchV = branchId / cubesPerTree;\n  \n  /*\n   a        0      1       0-7\n   a a      1      3       0-3-2-1\n   a a a    2      7       0-1\n   a a a a  3      15      0\n\n   a a a b  4      15      1\n   a a b    5      7       2-3\n   a a b a  6      15      2\n   a a b b  7      15      3\n\n   a b      8      3       4-5-6-7\n   a b a    9      7       4-5\n   a b a a  10     15      4\n   a b a b  11     15      5\n   a b b    12     7       6-7\n   a b b a  13     15      6\n   a b b b  14     15      7\n\n  */\n  \n  float used;\n  float branch;\n  branchInfo(branchId, used, branch);\n\n  float s = texture2D(sound, vec2(mix(0.01, 0.25, hash(cubeV)), 0)).a;\n \n  // position each cube that makes the tree\n  mat4 tree = ident();\n  const int depth = 4;\n  for (int d = 0; d < depth; ++d) {\n    float df = float(d);\n    if (df <= used - 1.0) {\n      float b = mod(branch / pow(2.0, df), 2.0) * 2.0 - 1.0;\n      float cd = (df / float(depth)) + b * 0.15 + treeV;\n      float root = step(0.5, df);\n      tree *= trans(vec3(0, 1, 0));\n      tree *= rotX((hash(cd * 0.741) * 0.5 + 0.2) * b * 0.8 * mix(0.3, 1., root) + root * sin(time + treeV * PI * 1.1) * 0.11);\n      tree *= rotY((hash(cd * 0.357) * 0.5 + 0.2) * b * 0.6 + root * sin(time + treeV * PI) * 0.1);\n      if (df > 2.5) {\n        float scx = mix(15., 8., hash(cd * 0.277));\n        float scy = mix(.8, 1.5, hash(cd * 0.727));\n        tree *= scale(vec3(scx + pow(s, 5.) * 20., scy + pow(s, 5.) * .5, 0.1));\n      }\n    }\n  }\n  \n  float leaf = step(3.5, used);\n  float shadow = mod(floor(cubeId / cubesPerTree), 2.0);\n\n  // move camera in circle looking in direction of movement\n  float tm = time * 0.1;\n  mat4 pmat = persp(radians(60.0), resolution.x / resolution.y, 0.1, 1000.0);\n  float r = 10.;\n  vec3 eye = vec3(\n    cos(tm) * r,\n    mix(0.5, 2.0, t5p5(sin(tm * 0.77))),\n    sin(tm) * r);\n  //vec3 target = vec3(0, 0, 0);\n  tm += 0.5;\n  vec3 target = vec3(\n    cos(tm) * r,\n    mix(1.0, 3.0, t5p5(sin(tm * 0.77))),\n    sin(tm) * r);\n  vec3 up = vec3(0,1,0);\n  \n  mat4 vmat = cameraLookAt(eye, target, up);\n  \n  // choose a random place\n  mat4 mat = trans((vec3(\n    hash(treeV * 0.219),\n    mix(0.5, 0.496 - treeV * 0.000, shadow),\n    hash(treeV * 0.691)) * 2.0 - 1.0) * 20.0);\n  \n  // rotate around the trunk randomly\n  mat *= rotY(hash(treeV * 0.597) * PI * 2.0);\n  \n  // scale the shadow\n  mat *= scale(mix(vec3(1), vec3(2, 0.02, 1), shadow));\n  \n  // scale the whole tree to some random size\n  mat *= uniformScale(mix(0.6, 1.5, hash(treeV * 0.371)));\n  \n  // offset because of the tree math above\n  mat *= trans(vec3(0, -1, 0));\n  \n  // posiiton each cube that makes the tree\n  mat *= tree;\n  \n  // adjust the size of the cube\n  mat *= scale(vec3(0.1, 0.8, 0.1));\n  \n  // offset the cube so it's origin is near the bottom of the cube\n  mat *= trans(vec3(0, 0.56, 0));\n\n  // if it's the last 96 vertices make a ground plane\n  // need to make it a grid for fog (vs a single quad if no fog)\n  // because vertex colors\n  float ground = step(vertexCount - 96.5, vertexId);\n  if (ground > 0.5) {\n    float id = floor((vertexId - (vertexCount - 96.0)) / 6.0);\n    mat = uniformScale(10.);\n    mat *= trans(vec3(mod(id, 4.0) - 2.0, 0, floor(id / 4.0) - 2.0) * 2.0);\n    float ux = mod(vertexId, 2.);\n  \tfloat vy = mod(floor(vertexId / 2.) + floor(vertexId / 3.), 2.);\n    pos = (vec3(ux, 0.49, vy) * 2.0 - 1.0) * 1.0;\n    normal = vec3(0, 1, 0);\n  }\n\n  // compute a view position (so 0,0,0 is the camera and all points are relative to that)\n  vec4 vpos = vmat * mat * vec4(pos, 1);\n  \n  // mutliply in the perspective\n  gl_Position = pmat * vpos;\n  \n  // orient the normal\n  vec3 n = normalize((vmat * mat * vec4(normal, 0)).xyz);\n  \n  vec3 lightDir = normalize(vec3(0.3, 0.4, -1));\n  \n  // color leaves differently\n  float hue = mix(0.1, 0.3 + pow(s + 0.2, 5.) * 0.5, leaf);\n  float sat = mix(0.0, 0., shadow);  // set first argument to 1 to make trees in color\n  float val = mix(1.0, 0., shadow);\n  vec3 color = hsv2rgb(vec3(hue, sat, val));\n  \n  // if leaf and not shadow and sound is strong cuse diffeent color\n  color = mix(color, hsv2rgb(vec3(time * 0.05,1,1)), leaf * step(0.6, s) * (1.0 - shadow));\n  \n  // if ground use different color\n  color = mix(color, vec3(0.6), ground);\n  \n  // apply lighting (leaves have more contrast)\n  float light = dot(n, lightDir) * 0.5 + 0.5;\n  v_color = vec4(color * mix(light + leaf * 0.5, 1., shadow), 1);\n\n  // apply fog\n  v_color.rgb = mix(v_color.rgb, vec3(background), clamp((length(vpos) - 10.) / 10., 0.0, 1.0));\n  \n  // try transparent shadows\n  //v_color.a = mix(1.0, 0.5, shadow);\n  \n  v_color.rgb *= v_color.a;\n}\n"
  },
  "screenshotURL": "data/images/images-3af3gds7ce4xxejhi-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "898"
  },
  "likes": {
    "$numberInt": "7"
  },
  "revisionId": "x7jCuRBHj6vyzEKJN"
}