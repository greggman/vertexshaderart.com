{
  "_id": "adr4oWENvpWNLwHJR",
  "owner": {
    "_id": "eRW4yDxawZyEw54rX",
    "createdAt": {
      "$date": {
        "$numberLong": "1446229516677"
      }
    },
    "username": "johan",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/d01877a458be485c665b6ee7c1376d7b?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1446315356886"
    }
  },
  "origId": null,
  "name": "geosphere",
  "username": "johan",
  "settings": {
    "num": 20000,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "#define PI 3.14159\n#define DIVISIONS  0.\n//#DEFINE INDICES {1,4,0,4,9,0,4,5,9,8,5,4,1,8,4,1,10,8,10,3,8,8,3,5,3,2,5,3,7,2,3,10,7,10,6,7,6,11,7,6,0,11,6,1,0,10,1,6,11,0,9,2,11,9,5,2,9,11,2,7};\n\nconst float DIM_X = 128.;\nconst float DIM_Y = 64.;\n\nconst float BG_DIM_X = 8.;\nconst float BG_DIM_Y = 6.;\n//#define FIT_VERTICAL\n/*\n//const int INDICES[60] = int[](\nconst int INDICES[60] = {\n  1,4,0,\n  4,9,0,\n  4,5,9,\n  8,5,4,\n  1,8,4,\n  1,10,8,\n  10,3,8,\n  8,3,5,\n  3,2,5,\n  3,7,2,\n  3,10,7,\n  10,6,7,\n  6,11,7,\n  6,0,11,\n  6,1,0,\n  10,1,6,\n  11,0,9,\n  2,11,9,\n  5,2,9,\n  11,2,7\n//);\n}\n*/\n\nvoid GetQuadInfo( const float vertexIndex, out float x, out float y, out float quadId )\n{\n  float twoTriVertexIndex = mod( vertexIndex, 6.0 );\n  float triVertexIndex = mod( vertexIndex, 3.0 );\n  float quadTriIndex = floor(twoTriVertexIndex*0.334);\n  float quadVertexIndex = triVertexIndex + quadTriIndex;\n\n  x = mod(quadVertexIndex, 2.);\n  y = floor(quadVertexIndex * 0.5);\n \n  quadId = floor( vertexIndex / 6.0 );\n}\n\n//todo: DEFINE PROJECTION\nmat4 GetProjection(){\n  float near = 0.01;\n  float far = 10.;\n  float aspectRatio = resolution.x / resolution.y;\n  float fov = 2.;\n  float h = cos(0.5*fov)/sin(0.5*fov);\n  float w = h * aspectRatio;\n  float a =  - (near+far)/(near - far);\n  float b = - ((2.*far*near)/(far-near));\n\n  mat4 m = mat4( \n    w, 0, 0, 0,\n    0, h, 0, 0,\n    0, 0, a, 1,\n    0, 0, b, 0\n  );\n    return m;\n}\n\nvoid ProcessBackdrop( float vertexIndex )\n{\n\n  \n  /*\n  vec3 corners2[12] = vec3[](\n    vec3(-X, 0, Z),\n    vec3(X, 0, Z),\n    vec3(-X, 0, -Z),\n    \n    vec3(X, 0, -Z),\n    vec3(0, Z, X),\n    vec3(0, Z, -X),\n    \n    vec3(0, -Z, X),\n    vec3(0, -Z, -X),\n    vec3(Z, X, 0),\n    \n    vec3( -Z, X, 0),\n    vec3(Z, -X, 0),\n    vec3(-Z, -X, 0)\n    );\n  */\n  float quadX, quadY, quadId;\n  \n  GetQuadInfo( vertexIndex, quadX, quadY, quadId );\n\n  //vec2 vDim = vec2( 8.0, 8.0 );\n  \n  vec2 vUV;\n  \n  vec2 quadTile;\n  quadTile.x = mod(quadId, BG_DIM_X);\n  quadTile.y = floor(quadId / BG_DIM_X);\n  \n  vUV.x = quadX + quadTile.x;\n  vUV.y = quadY + quadTile.y;\n\n  vUV /= vec2(BG_DIM_X, BG_DIM_Y);\n  \n  gl_Position = vec4( vUV.xy * 2.0 - 1.0, 0.99, 1.0 );\n\n  v_color = vec4( vUV.xy, 0., 1.0 );\n}\n\nvec3 VolcanoVertexPos(vec2 uv){\n  float phase = uv.x * PI * 2.;\n  vec3 pos;\n  float r = smoothstep(1.,0.,uv.y);\n  r += 0.5;\n  r *= 0.25;\n\n  \n  pos.x = sin(phase);\n  pos.y =  uv.y - 0.5;\n  pos.z = cos(phase);\n  pos.xz *= r;\n  \n  pos.z += 1.;\n  \n  //pos += fractalNoise(pos*10.)* 0.05;\n  \n  return pos;\n}\n\n/*\nint[] getVertexIndices(float triangleIndex)\n{\n  int indices[3] = int[](0,0,0);\n  return indices;\n}\n*/\n\nvoid ProcessGeoSphere(float vertexIndex )\n{\n  float X = 0.525731112119133606;\n  float Z = 0.850650808352039932;\n  \n  vec3 corners[12];\n  corners[0] = vec3(-X, 0, Z);\n  corners[1] = vec3(X, 0, Z);\n  corners[2] = vec3(-X, 0, -Z);\n  \n  corners[3] = vec3(X, 0, -Z);\n  corners[4] = vec3(0, Z, X);\n  corners[5] = vec3(0, Z, -X);\n  \n  corners[6] = vec3(0, -Z, X);\n  corners[7] = vec3(0, -Z, -X);\n  corners[8] = vec3(Z, X, 0);\n  \n  corners[9] = vec3( -Z, X, 0);\n  corners[10] = vec3(Z, -X, 0);\n  corners[11] = vec3(-Z, -X, 0);\n  \n   vec3 triangles[20];\n  triangles[0] = vec3(1,4,0);\n  triangles[1] = vec3(4,9,0);\n  triangles[2] = vec3(4,5,9);\n   // \n\n  //int indices[60] = int[](1,4,0,4,9,0,4,5,9,8,5,4,1,8,4,1,10,8,10,3,8,8,3,5,3,2,5,3,7,2,3,10,7,10,6,7,6,11,7,6,0,11,6,1,0,10,1,6,11,0,9,2,11,9,5,2,9,11,2,7);\n  //float array[2] = float[2](1., 1.);\n  \n  float vi = mod(vertexIndex, 3.);\n  float triIndex = floor(vertexIndex/3.);\n\n  vec3 pos;\n  \n  gl_Position = GetProjection() * vec4(pos, 1.0 );\n\n  //vec3 vPos = vec3( vUV.xy * 2.0 - 1.0, 2.0 );\n  //vPos.y *= resolution.x / resolution.y;\n\n  //v_color = vec4( vUV.xy, 0., 1.0 );\n   v_color = vec4(pos * 0.5 + 0.5, 1.0 );\n}\n   \n\nvoid main() {\n float vid = vertexId;\n float bgCount = BG_DIM_X * BG_DIM_Y * 6.;\n  \n  \n  \tif( vid < bgCount )\n    {\n\t\tProcessBackdrop(vid);    \n    }\n   else \n  {\n    \tvid -= bgCount;\n    \tfloat geoSphereCount = 20. * pow(4., DIVISIONS) * 3.;\n    \tif(vid < geoSphereCount) ProcessGeoSphere(vid); \n  }\n}"
  },
  "screenshotURL": "data/images/images-0q00bdlrbeo1t0bkr-thumbnail.jpg",
  "views": {
    "$numberInt": "115"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "HD7exgPuwP3KvRgxA",
  "modifiedAt": {
    "$date": {
      "$numberLong": "1446318510570"
    }
  },
  "rank": {
    "$numberDouble": "1.4572283602949203"
  },
  "avatarUrl": "https://secure.gravatar.com/avatar/d01877a458be485c665b6ee7c1376d7b?default=retro&size=200"
}