{
  "_id": "pfvzcjCrHYCpRDiaz",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1508334777099"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1508334777099"
    }
  },
  "origId": "nL6YpkW8YvGKNEKtj",
  "name": "point cloud vs spheres",
  "notes": "",
  "rank": {
    "$numberDouble": "1.7104263782182778"
  },
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": "{\"num\":19218,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/mogueheart/contact-part-2\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0.12156862745098039,0.12156862745098039,0.12156862745098039,1],\"shader\":\"/*\\n   point cloud vs spheres by Kabuto\\n\\n   Recreated this well-known demo effect. A bit tricky without being able to store history for points, so it's just computed again and again for each render pass\\n*/\\n\\nvec3 posf2(float t, float i) {\\n\\treturn vec3(\\n      cos(t+i*16.9553) +\\n      sin(t*1.311*i) +\\n      sin(t*1.4+i*1.53) +\\n     cos(t*1.84+sin(i*1.76)),\\n      sin(t+i*.79553+2.1) +\\n      sin(t*1.311+i*1.1311/12.1) +\\n      sin(t*1.4+i*1.353/2.1) /\\n      tan(t*1.84+i*.476* 12.1),\\n      sin(t+i*.5553-2.1)*\\n      cos(t/2.3-i*1.1-32.1) +\\n      sin(t-3.4*t-1.23+2.1) -\\n      sin(t*cos(.088-i*12.1))\\n\\t)*11.002;\\n}\\n\\nvec3 posf0(float t) {\\n  return posf2(t,-1.)-3.5;\\n}\\n\\nvec3 posf(float t, float i) {\\n  return posf2(t*.3,i) + posf0(t);\\n}\\n\\nvec3 push(float t, float i, vec3 ofs, float lerpEnd) {\\n  vec3 pos = posf(t,i)-ofs;\\n  \\n  vec3 posf = fract(pos-0.5)-.5;\\n  \\n  float l = length(posf)*2.;\\n  return (- posf + posf/l)*(9.4-smoothstep(lerpEnd, 11.,l));\\n}\\n\\nvoid main() {\\n  // more or less random movement\\n  float t = time*.20;\\n  float i = vertexId+sin(vertexId)-10.;\\n\\n  vec3 pos = posf(t,i);\\n  vec3 ofs = vec3(0);\\n  for (float f = -10.; f < 0.; f++) {\\n\\t  ofs += push(t+f*.05,i,ofs,2.-exp(-f*.001));\\n  }\\n  ofs += push(t,i,ofs,.999);\\n  \\n  pos -= posf0(t);\\n  \\n  pos += ofs;\\n  \\n  \\n  pos.yz *= mat2(.8,.6,-.6,1.8);\\n  pos.xz *= mat2(.8,.6,10.6, mouse.x* 111.8);\\n    \\n  pos *= 0.8;\\n  \\n\\n  pos.z += .37;\\n  \\n  pos.xy *= .6/pos.z;\\n  \\n  gl_Position = vec4(pos.x, pos.y*resolution.x/resolution.y, pos.z*.1, 1);\\n  gl_PointSize = 0.1/pos.z;\\n\\n  v_color = vec4(abs(ofs/max(length(ofs)*mouse.y/6.,1e-9))- 2.01- 0.7,0.03);\\n}\"}",
  "screenshotURL": "data/images/images-q6m6c0pnixfb796e2-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "80"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "H5xQSaTsiNGEyAnnq"
}