{
  "_id": "BjFJQPygCx8PB83nv",
  "owner": {
    "_id": "ftEhamfLz9nJLJZwh",
    "createdAt": {
      "$date": {
        "$numberLong": "1525415195692"
      }
    },
    "username": "mayugeman",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/1573e2224f853b4df80c89ebf36a159c?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1525415220486"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1526199066681"
    }
  },
  "origId": null,
  "name": "unnamed",
  "notes": "",
  "rank": {
    "$numberDouble": "1.5738195587479826"
  },
  "private": true,
  "unlisted": false,
  "username": "mayugeman",
  "avatarUrl": "https://secure.gravatar.com/avatar/1573e2224f853b4df80c89ebf36a159c?default=retro&size=200",
  "settings": {
    "num": 612,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/caseandpoint/case-point-upgrade-free-download",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.3137254901960784,
      0.3137254901960784,
      0.3137254901960784,
      1
    ],
    "shader": "#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//                   6          7\n//                    +----------+\n//                   /|         /|\n//                2 / |       3/ |\n//                 +----------+  |\n//                 |  |       |  |\n//      Y   Z      | 4|       | 5|\n//                 |  +-------|--+\n//      ^ /        | /        | /\n//      |/        0|/        1|/\n//      +--> X     +----------+\n  \nvec3 GetCubeVertex( float fVertexIndex )\n{\n  \tfloat f = fVertexIndex / 8.0;\n\treturn vec3(\n      mix(-1., 1., step(0.5, fract(f * 4.))),\n      mix(-1., 1., step(0.5, fract(f * 2.))), \n      mix(-1., 1., step(0.5, fract(f))));  \n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( s -angle *2.);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n/*\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n*/\nmat4 trans(vec3 t) {\n  return mat4(\n    1, 0, 0, t[0],\n    0, 1, 0, t[1],\n    0, 0, 1, t[2],\n    0, 0, 0, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1)*2.5;\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[1], 0,\n    0, 0, 0, 2);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 1, 0,\n    0, 0, s, 0,\n    0, 0, 0, 2)*1.5;\n}\n\nvec3 circlePoint(float id, float count, float radius, float rings){\n  float ringPtCount = count / rings;\n  float x = mod(id, ringPtCount);\t\t// =リング内番号\n  float y = floor(id / ringPtCount);\t// =リング番号\n\n  float angle = x / ringPtCount * PI * 2.;\n  float u = cos(angle) * radius * y / (rings - 1.);\n  float v = sin(angle) * radius * y / (rings - 1.);\n\n  return vec3(u, v, 0);\n}\n\nvec3 donutPoint(float ptId, float ptCount, float radius, float ringCount, float width){\n  float ringPtCount = ptCount / ringCount;\n  float x = mod(ptId, ringPtCount);\t\t// =リング内番号\n  float y = floor(ptId / ringPtCount);\t// =リング番号\n\n  float angle = x / ringPtCount * PI * 2.;\n  float r = (y / (ringCount - 1.)) * width + (1.-width);\n  float u = cos(angle) * radius * r;\n  float v = sin(angle) * radius * r;\n  \n  return vec3(u, v, 0);\n}\n\nvoid main() {\n/*\n  float ac = floor(vertexCount / sqrt(vertexCount));\n\n  float x = fract(vertexId / ac);\n  float y = floor(vertexId / ac) / (ac - 1.);  \n\n  x = x * 2. - 1.;\n  y = y * 2. - 1.;\n\n  mat4 rotation = rotZ(sin(time*0.5)*PI);  \n*/\n  mat4 rotation = rotZ(sin(time*0.5)*PI*2.);  \n  mat4 trans = trans(vec3(sin(time), 0.1, 0));\n  \n  vec3 pos = donutPoint(vertexId, vertexCount,.3, 10., .4);\n  \n  gl_Position = vec4(pos,1) * trans;\n  gl_PointSize = 4.;\n\n  v_color = vec4(1, 0, 0, 1);\n}"
  },
  "screenshotURL": "data/images/images-bn4atedzqfel67yvg-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "6"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "ZJ59heTvCMBgmnkB4"
}