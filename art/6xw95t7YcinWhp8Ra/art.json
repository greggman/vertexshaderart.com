{
  "_id": "6xw95t7YcinWhp8Ra",
  "owner": {
    "_id": "yumJxCTi3otBwEFh4",
    "createdAt": {
      "$date": "1618264688331"
    },
    "username": "chriscamplin",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/5798c9f697b3fea48de32ade2ba3e54c?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1620061821696"
  },
  "modifiedAt": {
    "$date": "1620061821696"
  },
  "origId": "WzeZofWAP8mZ2aNBz",
  "name": "sound tutorial",
  "notes": "",
  "rank": "1.1094219178409834",
  "private": false,
  "unlisted": true,
  "username": "chriscamplin",
  "avatarUrl": "https://secure.gravatar.com/avatar/5798c9f697b3fea48de32ade2ba3e54c?default=retro&size=200",
  "settings": {
    "num": 17357,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/bottomforty/bottom-forty-mix-038-chris-camplin",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI radians(180.)\n#define NUM_SEGMENTS 4.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 5.0\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angle) {\n\n    float s = sin( angle );\n    float c = cos( angle );\n\n    return mat4(\n      1, 0, 0, 0,\n      0, c, s, 0,\n      0,-s, c, 0,\n      0, 0, 0, 1);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nvoid main() {\n  \t// \n  \tfloat cols = floor(sqrt(vertexCount));\n  \tfloat rows = floor(vertexCount / cols);\n  \t// vertex ID is number of the vertex\n  \tfloat x = mod(vertexId, rows); // divide by 10 keep the remainder, \n  \tfloat y = floor(vertexId / rows); //. floor throws away the remainder 0000 1111 2222\n\n\n  \n  \tfloat s = sin(PI * time + y * 0.25);\n  \tfloat xOff = 0.;//sin(PI * time * 1.5 + y * 0.25) * 0.1;\n  \tfloat yOff = 0.; //sin(time + x * 0.25) * 0.2;\n  \tfloat soff = 0.; //sin(time * x * y * 0.0005) * 0.5;\n  \n  \tfloat u = x /(rows - 1.);\n  \tfloat v = y / (rows - 1.);\\\n        \t// sound\n\n    float ux = u * 2. - 1. + xOff;\n  \tfloat vy = v * 2. - 1. + yOff;\n\n  \t// concentrate on center\n  \tfloat sv = abs(v - 0.5) * 2.0;\n  \tfloat su = abs(u - 0.5) * 2.0;\n  \n    // circular -  atan returns values between PI & -PI\n  \tfloat av = abs(atan(su, sv)) / PI;\n  \tfloat au = length(vec2(su, sv));\n    float snd = texture2D(sound, vec2(av * 0.125, au * 0.25)).a;\n  \n  \tvec2 xy = vec2(ux, vy) * 1.25;\n  \tvec4 pos = vec4(xy, 0, 1);\n  \t//pos *= rotX(PI * snd * 0.1);\n  \t//pos *= rotY(PI * snd * 0.1);\n  \n\tgl_Position = pos;\n  \tgl_PointSize = snd * 45.0 + soff; \n  \tgl_PointSize *= 20.0 / cols; \n  \tgl_PointSize *= resolution.x / 600.;\n  \n    float hue = u * 0.1 + snd;\n    hue = smoothstep(x, y, snd);\n    float sat = v  * snd;\n  \t// add more impact using pow\n    float val = pow(snd + 0.1, 5.0);\n    vec4 color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n    //color *= rotY(PI * xOff);\n    //background += 0.1;\n    vec4 finalColor = mix(color, background, s);\n\n    v_color = finalColor;\n  }"
  },
  "screenshotURL": "data/images/images-nvw08d3vwif9gfmvw-thumbnail.jpg",
  "hasSound": true,
  "views": "55",
  "likes": "0",
  "revisionId": "LrsQWbkThE3GM2PL8"
}