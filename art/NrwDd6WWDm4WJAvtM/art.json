{
  "_id": "NrwDd6WWDm4WJAvtM",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1515764407369"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1515764407369"
    }
  },
  "origId": "4cc6928ASXLMQCFWy",
  "name": "arach",
  "notes": "",
  "rank": {
    "$numberDouble": "1.51674302972955"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/billx/tandava-billx-remix",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define ITERS 40\n#define M_PI 3.1415926535897932384626433832795\n\n#define DEBUG 1\n#define TAU 6.28318530718\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    vec2 ab = b - a;\n    vec2 ap = p - a;\n    float k = clamp(dot(ap, ab)/dot(ab, ab), 0.0, 1.0);\n    return smoothstep(0.0, 5.0/resolution.y, length(ap - k*ab) - 0.001);\n}\n\nfloat shape(float u,vec2 p, float angle) {\n    float d = 100.0;\n    vec2 a = vec2(1.0, 0.0), b;\n    vec2 rot = vec2(cos(angle), sin(angle)*u);\n    \n    for (int i = 0; i < 6; ++i) {\n        b = a;\n        for (int j = 0; j < 18; ++j) {\n        \tb = vec2(b.x*rot.x - b.y*rot.y, b.x*rot.y + b.y*rot.x);\n        \td = min(d, segment(p,  a, b));\n        }\n        a = vec2(a.x*rot.x - a.y*rot.y, a.x*rot.y + a.y*rot.x);\n    }\n    return d;\n}\n\nvoid main ()\n{\n  \n  float finalVertexCount =  vertexCount;//max((0.5*snd)*vertexCount,5000.);\n  float ratio = resolution.x/resolution.y;\n  float numAcrossDown = floor(sqrt(finalVertexCount));\n  \n  float maxVertexCount =   numAcrossDown* numAcrossDown;\n  \n  float finalVertexId = mod(vertexId, maxVertexCount);\n  \n  float x = mod(finalVertexId,  numAcrossDown);\n  float y = floor(finalVertexId /  numAcrossDown);\n  \n  float u = x / numAcrossDown;\n  float v = (y / numAcrossDown)*ratio;\n  \n  float ux = ( u  * 2.0 - 1.0) *1./ratio;\n  float vy = ( v/ratio * 2.0 - 1.0);\n  \n  float snd = texture2D(sound, vec2(0.,  0.)).a;\n  \n  \n  //apply fragment logic\n\n\n\n\tvec2 p = vec2(x,y);\n    vec2 res = vec2(numAcrossDown,numAcrossDown);\n  \n\t\tvec2 uv = p.xy / res.xy;\n    vec2 cc = (-res.xy + 2.0*p.xy) / res.y;\n        \n    float numPhases=1114.5;\n    float u1;\n    float t;\n    float SpeedReal=0.2532;\n   u1=0.005+(mouse.y*2.2);\n    t = mouse.x/res.x * numPhases;\n\n    float col = shape(u1,abs(cc), t+cos(0.01*(time*SpeedReal))*TAU);\n    col *= 0.5 + 1.5*pow(uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.3);\n    \n    \n\t//gl_FragColor = vec4(vec3(pow(1.0-col, 2.15)),1.0);\n \n  gl_Position = vec4(ux, vy, 0, 1);\n  \n  gl_PointSize = (resolution.y/numAcrossDown) * 1.;//(resolution.y/numAcrossDown)*2.-1.;\n\n  v_color = vec4(vec3(pow(1.0-col, 2.15)),1.0);\n  \n\n}"
  },
  "screenshotURL": "data/images/images-0v02qefrd26y26g0s-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "5"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "M8aFbveoFoZpf3bH4"
}