{
  "_id": "tZJWzLbyDQHTztNqY",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1522806587080"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1522806587080"
    }
  },
  "origId": "aDTiAi7SZ3joeKxKs",
  "name": "String theory for K Machine",
  "notes": "http://glslsandbox.com/e#20783.0",
  "rank": {
    "$numberDouble": "1.341685454184959"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/user-158087960/studiomix-douzirec-06-2007-flac",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n\n\n//Step 1 >> comment all precision, extension, uniforms and varying\n/*\n#ifdef GL_ES\nprecision mediump float;\n#endif\n \n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nvarying vec2 surfacePosition;\n*/\n//#define BASE_ANGLE 0.\n//#define ANGLE_DELTA 0.02\n//#define XOFF .7\n\n#define BASE_ANGLE .3//KParameter 0.>>3.14\n#define ANGLE_DELTA .02//KParameter 0.02>>10.\n#define XOFF .7//KParameter 0.02>>.7\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nfloat aspect = resolution.x/resolution.y;\nfloat featureSize = 60./((resolution.x*aspect+resolution.y));\n\nfloat f(vec2 p)\n{\n\tp.x = sin(p.x*25.+time*1.2)*sin(time+p.x*0.1)*3.;\t\n    p += sin(p.x*1.5)*.1;\n    return smoothstep(-0.0,featureSize,abs(p.y));\n}\n\n\nvoid main( void ) {\n\n\n  //Step 2 >> replace  gl_FragCoord\n  float finalDesiredPointSize = 3.;\n  float maxFinalSquareSideSize = floor(sqrt(vertexCount));\n  float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\n  \n  float maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\n  \n  //x = number of elements in a line as x value for local resolution\n  //y = number of possible lines with the given vertexCount\n  vec2 vertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\n  \n  //we can now calculate the final number of elements\n  float finalVertexCount = vertexResolution.x*vertexResolution.y;\n  \n  //and adjust finalVertexId\n  float finalVertexId = mod(vertexId,finalVertexCount);\n  \n  //Calculate the position of the elements based on their finalVertexId\n  float x = mod(finalVertexId, vertexResolution.x);\n  float y = floor(finalVertexId / vertexResolution.x);\n  \n  vec2 simFragCoord = vec2(x,y);//simfragCoord will replace the gl_FragCoord of fragment shader\n  \n  \n  //Step 3 >> calculate vertice positions\n  //relative coordinate of the vertex (cordinates in 0..1 referential)\n  float u = (x /vertexResolution.x);\n  float v = (y /vertexResolution.y);\n  \n  //set vertices disposition\n  float sizeFactor = finalDesiredPointSize*vertexResolution.x/resolution.x;\n  \n  float ux = sizeFactor*(u - 0.5);\n  float vy = sizeFactor*(v - 0.5);\n  \n  gl_PointSize = finalDesiredPointSize;\n  gl_Position = vec4(ux, vy, 0., 1.);\n  \n  //create the surfacePosition\n  vec2 surfacePosition = vec2(ux,vy);\n\n   /****************************************************************/\n  //Step 4 >> paste the old fragment code with following changes:\n  //replace gl_FragCoord by simFragCoord \n  //replace gl_FragColor by v_color\n  //replace iResolution by resolution\n  //replace resolution by vertexResolution\n  \n\tvec2 p = simFragCoord.xy / vertexResolution.xy*6.5-3.25;\n\tp.x *= aspect;\n\tp.y = abs(p.y);\n\t\n\tvec3 col = vec3(0);\n\tfor(float i=0.;i<26.;i++)\n\t{\n\t\tvec3 col2 = (sin(vec3(3.3,2.5,2.2)+i*10.15)*0.5+10.54)*(1.-f(p));\n\t\tcol = max(col,col2);\n\t\t\n        p.x -= XOFF;\n        p.y -= sin(time*0.11+1.5)*1.5+1.5;\n\t\tp*= mm2(i*ANGLE_DELTA+BASE_ANGLE);\n\t\t\n        vec2 pa = vec2(abs(p.x-.9),abs(p.y));\n        vec2 pb = vec2(p.x,abs(p.y));\n        \n        p = mix(pa,pb,smoothstep(-.07,.07,sin(time*0.24)+.1));\n\t}\n\tv_color = vec4(col,1.0);\n  \n  /****************************************************************/\n  \n}"
  },
  "screenshotURL": "data/images/images-4t8bbtusgndnhu5bm-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "9"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "iiuX6cdxmxG8YbC64"
}