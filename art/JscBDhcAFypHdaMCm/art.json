{
  "_id": "JscBDhcAFypHdaMCm",
  "owner": {
    "_id": "tFSGYdMSg7J6WsAhF",
    "createdAt": {
      "$date": "1450381162182"
    },
    "username": "aiekick",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/9423fa0d99c42e44e2b7d18c6f88b041?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1519246793082"
  },
  "modifiedAt": {
    "$date": "1519246985013"
  },
  "origId": "3QE3h3tQJqzMMqEZw",
  "name": "Twisted Torus",
  "notes": "Use mouse to control the shape",
  "rank": "1.207352484507188",
  "private": false,
  "unlisted": false,
  "username": "aiekick",
  "avatarUrl": "https://secure.gravatar.com/avatar/9423fa0d99c42e44e2b7d18c6f88b041?default=retro&size=200",
  "settings": {
    "num": 12000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/chibi-tech/lolitazia-season",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// mouse axis x => contorl section compelxity\n// mouse axis y => controe torus complexity\n\nmat4 persp(float fov, float aspect, float zNear, float zFar);\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up);\n\nvoid main()\n{\n  \tgl_PointSize = 3.;\n  \n\tfloat pi = radians(180.);\n\tfloat pi2 = radians(360.);\n\t\n  \tvec2 mo = 0.5 - mouse;\n  \n\t// vars\n\t// count point : 6 * quadsPerPolygon * countPolygon => here 3600\n\tfloat quadsPerPolygon = clamp(floor(10. * (mo.x*0.5+0.5)), 3., 10.);\n\tfloat countPolygon = clamp(floor(200. * (mo.y*0.5+0.5)), 3., 200.);\n\tfloat radius = 20.;\n\tfloat thickNess = 5.;\n\tfloat zoom = 2.;\n\t\n  \tfloat countMax = 6. * quadsPerPolygon * countPolygon;\n  \n\tfloat index = mod(vertexId, 6.);\n\t\n\tfloat indexQuad = floor(vertexId / 6.);\n\tfloat asp = pi * 2.0 / quadsPerPolygon; // angle step polygon\n\tfloat ap0 = asp * indexQuad; // angle polygon 0\n\tfloat ap1 = asp * (indexQuad + 1.); // angle polygon 0\n\t\n\tfloat indexPolygon = floor(indexQuad / quadsPerPolygon);\n\tfloat ast = pi * 2.0 / countPolygon; // angle step torus\n\tfloat at0 = ast * indexPolygon; // angle torus 0\n\tfloat at1 = ast * (indexPolygon + 1.); // angle torus 1\n\t\n  \tvec2 st = vec2(0);\n\t\n  \t// triangle 1\n\tif (index == 0.) st = vec2(ap0, at0);\n\tif (index == 1.) st = vec2(ap1, at0);\n\tif (index == 2.) st = vec2(ap1, at1);\n\t\n\t// triangle 2\n\tif (index == 3.) st = vec2(ap0, at0);\n\tif (index == 4.) st = vec2(ap1, at1);\n\tif (index == 5.) st = vec2(ap0, at1);\n\t\n  \tvec3 p = vec3(cos(st.x),st.y,sin(st.x));\n\t\n  \t// twist\n\tfloat ap = st.y - cos(st.y) + time;\n\t\t\t\n  \t// polygon\n\tp.xz *= thickNess;\n\tp.xz *= mat2(cos(ap), sin(ap), -sin(ap), cos(ap));\n\t\n\t// torus\n\tp.x += radius;\n\tfloat at = p.y; p.y = 0.0;\n\tp.xy *= mat2(cos(at), sin(at), -sin(at), cos(at));\n\t\n\t// camera\n\tfloat ca = 0.5;//time * 0.1;\n\tfloat cd = 100.;\n\tvec3 eye = vec3(sin(ca), 0., cos(ca)) * cd;\n\tvec3 target = vec3(0, 0, 0);\n\tvec3 up = vec3(0, 1, 0);\n\tmat4 camera = persp(45. * pi / 180., resolution.x / resolution.y, 0.1, 10000.) * \n      cameraLookAt(eye, target, up);\n  \n  \t// vertex position\n  \tif (vertexId < countMax)\n    {\n  \t\tgl_Position = camera * vec4(p,1);\n    }\n  \telse\n  \t{\n      \tgl_Position = vec4(0,0,0,0);\n  \t}\n  \n\t// face color\n\tindexQuad = mod(indexQuad, quadsPerPolygon);\n\tv_color = cos(vec4(10,20,30,1) + indexQuad);\n\tv_color = mix(v_color, vec4(normalize(p) * 0.5 + 0.5, 1), .5);\n  \tv_color.a = 1.0;\n}\n\n//////////////////////////////////////////////////////////////////////////\n\n#define PI radians(180.)\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n////////////////////////////////////////////////////////////"
  },
  "screenshotURL": "data/images/images-yr524hzhakik4qllw-thumbnail.jpg",
  "hasSound": true,
  "views": "270",
  "likes": "0",
  "revisionId": "EMjAv8akX42nfBn89"
}