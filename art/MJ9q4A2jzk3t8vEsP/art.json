{
  "_id": "MJ9q4A2jzk3t8vEsP",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1549837402867"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1549837402867"
    }
  },
  "origId": "Rj6BcdcHrfFGGfN27",
  "name": "alien slinky",
  "notes": "",
  "rank": {
    "$numberDouble": "1.8486325202096376"
  },
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define TWOPI 6.28318530718\n#define PI 3.14159265359\n#define DEG2RAD 0.01745329251\n#define RAD2DEG 57.2957795131\n#define HASHSCALE1 .1031\n\nfloat hash11(float p) {\n  vec3 p3 = fract(vec3(p) * HASHSCALE1);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\n// from http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c) {\n    c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat3 rotX(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat3(1.0, 0.0, 0.0, 0.0, c, s, 0.0, -s, c);\n}\n\nmat3 rotY(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat3(c, 0.0, s, 0.0, 1.0, 0.0, -s, 0.0, c);\n}\n\nmat3 rotZ(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat3(c, s, 0.6, -s, c, 0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 perspective(vec3 pa, vec3 pb, vec3 pc, vec3 pe, float n, float f) {\n    vec3 vr = normalize(pb - pa);\n    vec3 vu = normalize(pc - pa);\n    vec3 vn = cross(vr, vu);\n    vec3 va = pa - pe;\n    vec3 vb = pb - pe;\n    vec3 vc = pc - pe;\n    float d = -dot(va, vn);\n    float nod = n / d;\n    float l = dot(vr, va)  * nod;\n    float r = dot(vr, vb)  * nod;\n    float b = dot(vu, va)  * nod;\n    float t = dot(vu, vc)  * nod;\n\n    // glFrustum\n    float x = 2. * n / (r - l);\n    float y = 2. * n / (t - b);\n    float A = (r + l) / (r - l);\n    float B = (t + b) / (t - b);\n    float C = -(f + n) / (f - n);\n    float D = -2. * f * n / (f - n);\n    mat4 P = mat4(\n        x, 0, 0, 0,\n        0, y, 0, 0,\n        A, B, C, -1,\n        0, 0, D, 0\n    );\n    return P;\n}\n\nmat4 camera(vec3 pa, vec3 pb, vec3 pc, vec3 pe, float n, float f) {\n    vec3 vr = normalize(pb - pa);\n    vec3 vu = normalize(pc - pa);\n    vec3 vn = cross(vr, vu);\n    mat4 cam = mat4(\n        vec4(vr, 0),\n        vec4(vu, 0),\n        vec4(vn, 0),\n        vec4(-pe, 1));\n    return cam;\n}\n\nvec2 quad(float id) {\n    float ux = floor(id / 6.) + mod (id, 2.);\n    float vy = mod(floor(id / 2.) + floor(id / 3.), 2.);\n    float x = ux;\n    float y = vy;\n    // generate vertices [-1, 1] x [-,1 1]\n    return 2. * mod(vec2(x, y), vec2(2, 2)) - 1.;\n}\n\n\nvoid main() {\n    // screen + camera setup\n    float screen_width_mm = 350.90;\n    float screen_height_mm = 247.1;\n    float aspect = screen_width_mm / screen_height_mm;\n    float head_to_screen_mm = 1000.;\n    vec3 pa = 0.5 * vec3(-screen_width_mm, -screen_height_mm, 0);\n    vec3 pb = 0.5 * vec3(screen_width_mm, -screen_height_mm, 0);\n    vec3 pc = 0.5 * vec3(-screen_width_mm, screen_height_mm, 0);\n    vec3 pe = vec3(0, 0, head_to_screen_mm);\n    float n = 0.01;\n    float f = 2000.;\n    mat4 P = perspective(pa, pb, pc, pe, n, f);\n    mat4 C = camera(pa, pb, pc, pe, n, f);\n  \n    float quad_id = floor(vertexId / 6.0);\n    float quad_count = floor(vertexCount / 6.0);\n    float quad_hash = hash11(quad_id + 5.0);\n    float quad_pct = quad_id / quad_count;\n\n    vec2 quad_size = vec2(1.0);\n    quad_size.x *= aspect;\n\n    float wrap = (0.5 + 0.5 * sin(0.15*time)) * 50.0;\n    float r = (0.2 + 0.1*sin(50.0*quad_pct * TWOPI)) * screen_height_mm;\n    float x =  r * cos(wrap * quad_pct * TWOPI);\n    float y =  r * sin(wrap * quad_pct * TWOPI);\n    float z = (quad_pct - 0.5) * 0.7 * screen_height_mm;\n    vec3 worldPos = \n      rotX(DEG2RAD * 45.0) * \n      rotY(DEG2RAD * 33.0) * \n      (vec3(quad_size * quad(vertexId), 0.0) + vec3(x,y,z));\n    vec4 camPos = C * vec4(worldPos, 1.0);\n    gl_Position = P *camPos;\n\n    // write the color\n    vec3 hsv = vec3(0.5 + 0.2 * quad_pct, 0.9, 1.0);\n    v_color = vec4(hsv2rgb(hsv), 1.0);\n}"
  },
  "screenshotURL": "data/images/images-ijdoujod8d0kwu8wl-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "72"
  },
  "likes": {
    "$numberInt": "1"
  },
  "revisionId": "u2eqDbSknTvZT2Q4z"
}