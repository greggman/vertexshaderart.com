{
  "_id": "ZNi2inr6Jmirh6Hgy",
  "owner": {
    "_id": "FY5kuXpFq5nGKnZfW",
    "createdAt": {
      "$date": {
        "$numberLong": "1446136365862"
      }
    },
    "profile": {
      "info": "http://eddietree.com",
      "avatarUrl": "https://pbs.twimg.com/profile_images/658497007795875840/BWYk5wYJ_200x200.png"
    },
    "username": "eddietree"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1447833185599"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1447838411743"
    }
  },
  "origId": null,
  "name": "Emiko",
  "rank": {
    "$numberDouble": "10.203044516259807"
  },
  "private": false,
  "username": "eddietree",
  "settings": {
    "num": 2000,
    "mode": "LINES",
    "sound": "https://soundcloud.com/sp00kyfish/icarus",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.7686274509803922,
      0.3176470588235294,
      0.396078431372549,
      1
    ],
    "shader": "#define PI 3.14159\n\n//#define FIT_VERTICAL\n \nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat modf( float x, float y )\n{\n  return x - y * floor(x/y);\n}\n\nfloat wrapf(float val, float minVal, float maxVal)\n{\n  val -= minVal;\n\n  float delta = maxVal - minVal;\n  if ( delta < 0.0001 ) return val;\n\n  return val - (delta* floor(val/delta)) + minVal;\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvoid main() {\n  float localTime = time + 20.0;\n  //float point = mod(floor(vertexId / 2.0) + mod(vertexId, 2.0) * STEP, NUM_SEGMENTS);\n\n  //gl_PointSize = 5.0; \n  \n  float NUM_SEGS_X = 32.0;\n  float NUM_SEGS_Y = 64.0;\n  \n  float xIndex = modf( vertexId, NUM_SEGS_X );\n  float yIndex = floor( vertexId / NUM_SEGS_X );\n  float xNormalized = (xIndex / NUM_SEGS_X) * 2.0 - 1.0;\n  float yNormalized = (yIndex / NUM_SEGS_Y) * 2.0 - 1.0;\n  \n  vec2 xy = vec2( xNormalized, yNormalized );\n  //xy.x = xNormalized;\n  //xy.y = yNormalized;\n  \n  float sndPiano = texture2D(sound, vec2(0.25, 0.0) ).a;\n  \n  xy.x += wrapf( localTime*0.15 + xy.y*8.0, -2.0, 2.0 );\n  xy.y += snoise( vec3( xy * 3.0, localTime*0.4) ) * 0.025;\n  xy.x += snoise( vec3( xy * 2.0 + sin(xNormalized), localTime*0.05) ) * 0.3;\n  \n  //float sndGuitar = texture2D(sound, vec2(0.3, 0.0) ).a;\n  //xy.y += sndGuitar*0.2;\n  \n  \n  vec4 color = vec4(1.0);\n  \n  if ( modf(xIndex, 2.0 ) < 0.1)\n  {  \n    color.z -= sndPiano * 3.5;\n  }\n  \n  color.xyz += -vec3( length( xy ) + sin(vertexId*0.5) )*2.0 + vec3(sndPiano*3.0);\n  \n  #ifdef FIT_VERTICAL\n    vec2 aspect = vec2(resolution.y / resolution.x, 1);\n  #else\n    vec2 aspect = vec2(1, resolution.x / resolution.y);\n  #endif\n\n\n  //gl_Position = vec4(xy * aspect + mouse * 0.1, 0, 1);\n  gl_Position = vec4(xy * aspect, 0, 1);\n\n  //float hue = (localTime * 0.01 + count * 1.001);\n  v_color = color;\n}"
  },
  "screenshotURL": "data/images/images-mno1wzlv6yd9hudz3-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "182"
  },
  "likes": {
    "$numberInt": "2"
  },
  "revisionId": "8KeDxnXbmnYyycx33",
  "avatarUrl": "https://pbs.twimg.com/profile_images/658497007795875840/BWYk5wYJ_200x200.png"
}