{
  "_id": "dPsnyuwF6HxdEJMAd",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1522808527202"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1522808527202"
    }
  },
  "origId": "hvfx2JX4Hfg7zccE5",
  "name": "test for K Machine",
  "notes": "http://glslsandbox.com/e#38484.0",
  "rank": {
    "$numberDouble": "1.3294156125558283"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/user-158087960/studiomix-douzirec-06-2007-flac",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n\n\n//Step 1 >> comment all precision, extension, uniforms and varying\n/*\n#ifdef GL_ES\nprecision mediump float;\n#endif\n \n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nvarying vec2 surfacePosition;\n*/\n#define factor0 9.//KParameter 1.>>20.\n#define factor1 0.1//KParameter .1>>1.\n#define timeFactor 1.//KParameter 1.>>10.\n//#define ANGLE_DELTA 0.02\n//#define XOFF .7\n\nfloat b = time*timeFactor, g, v, q;\nvec4 s(vec2 v) {\n  g = length(v);\n  q = abs(sin((atan(v.g, v.r) - g + b) * factor0) * factor1) + .1;\n  return min(vec4(1.), vec4(.05 / abs(q - g / 3.), .04 / abs(q - g / 2.), .03 / abs(q - g * .7), 1.));\n}\nfloat n(vec3 v) {\n  return 1. - dot(abs(v), vec3(0., 1., 0.)) - length(s(v.rb).rgb) / 2. * sin(b * 2.) +\n    (sin(5. * (v.b + b)) + sin(5. * (v.r + b))) * .1;\n}\nvoid main( void ) {\n\n\n  //Step 2 >> replace  gl_FragCoord\n  float finalDesiredPointSize = 3.;\n  float maxFinalSquareSideSize = floor(sqrt(vertexCount));\n  float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\n  \n  float maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\n  \n  //x = number of elements in a line as x value for local resolution\n  //y = number of possible lines with the given vertexCount\n  vec2 vertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\n  \n  //we can now calculate the final number of elements\n  float finalVertexCount = vertexResolution.x*vertexResolution.y;\n  \n  //and adjust finalVertexId\n  float finalVertexId = mod(vertexId,finalVertexCount);\n  \n  //Calculate the position of the elements based on their finalVertexId\n  float x = mod(finalVertexId, vertexResolution.x);\n  float y = floor(finalVertexId / vertexResolution.x);\n  \n  vec2 simFragCoord = vec2(x,y);//simfragCoord will replace the gl_FragCoord of fragment shader\n  \n  \n  //Step 3 >> calculate vertice positions\n  //relative coordinate of the vertex (cordinates in 0..1 referential)\n  float u = (x /vertexResolution.x);\n  float v = (y /vertexResolution.y);\n  \n  //set vertices disposition\n  float sizeFactor = finalDesiredPointSize*vertexResolution.x/resolution.x;\n  \n  float ux = sizeFactor*(u - 0.5);\n  float vy = sizeFactor*(v - 0.5);\n  \n  gl_PointSize = finalDesiredPointSize;\n  gl_Position = vec4(ux, vy, 0., 1.);\n  \n  //create the surfacePosition\n  vec2 surfacePosition = vec2(ux,vy);\n\n   /****************************************************************/\n  //Step 4 >> paste the old fragment code with following changes:\n  //replace gl_FragCoord by simFragCoord \n  //replace gl_FragColor by v_color\n  //replace iResolution by resolution\n  //replace resolution by vertexResolution\n  \n  vec3 m = vec3(-1. + 2. * (simFragCoord.rg /\n    vertexResolution), 1.), a = vec3(0., 0., -2.);\n  for (int r = 0; r < 55; r += 1) g = n(a + m * v), v += g * .125;\n  v_color = vec4(v / 2.) * s((v * m + a).rb) + v * .1 * vec4(1., 2., 3., 4.) / 2. * n(v * m + a);\n\n \n  /****************************************************************/\n  \n}"
  },
  "screenshotURL": "data/images/images-qmohckdrz77nxdgmg-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "21"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "ZGdyHLDJQ4mjwH8CP"
}