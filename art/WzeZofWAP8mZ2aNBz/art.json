{
  "_id": "WzeZofWAP8mZ2aNBz",
  "owner": {
    "_id": "yumJxCTi3otBwEFh4",
    "createdAt": {
      "$date": 1618264688331
    },
    "username": "chriscamplin",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/5798c9f697b3fea48de32ade2ba3e54c?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1620055602473
  },
  "modifiedAt": {
    "$date": 1641050693659
  },
  "origId": "2QLFrSm3uSxdnEW58",
  "name": "rotate motion tutorial",
  "notes": "",
  "rank": 1.1329364661411214,
  "private": false,
  "unlisted": true,
  "username": "chriscamplin",
  "avatarUrl": "https://secure.gravatar.com/avatar/5798c9f697b3fea48de32ade2ba3e54c?default=retro&size=200",
  "settings": {
    "num": 10000,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI radians(180.)\n#define NUM_SEGMENTS 4.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 5.0\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat4 rotX(float angle) {\n\n    float s = sin( angle );\n    float c = cos( angle );\n\n    return mat4(\n      1, 0, 0, 0,\n      0, c, s, 0,\n      0,-s, c, 0,\n      0, 0, 0, 1);\n}\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nvoid main() {\n  \tfloat rows = floor(sqrt(vertexCount));\n  \tfloat cols = floor(vertexCount / rows);\n  \t// vertex ID is number of the vertex\n  \tfloat x = mod(vertexId, rows); // divide by 10 keep the remainder, \n  \tfloat y = floor(vertexId / rows); //. floor throws away the remainder 0000 1111 2222\n\n\n  \n  \tfloat s = sin(PI * time + y * 0.25);\n  \tfloat xOff = sin(PI * time * 1.5 + y * 0.25) * 0.1;\n  \tfloat yOff = cos(time + x * 0.25) * 0.1;\n  \tfloat soff = cos(time * 1.4 + x * y * 0.0005) * 0.5;\n  \n  \tfloat u = x /(rows - 1.);\n  \tfloat v = y / (rows - 1.);\n  \tfloat ux = u * 2. - 1. + xOff;\n  \tfloat vy = v * 2. - 1. + yOff;\n    vec4 pos = vec4(ux, vy, s, 1);\n  \tpos*=rotY(PI*time*.125);\n  \tpos*=rotX(PI*time*.125);\n\tgl_Position = pos;\n  \tgl_PointSize = 3.0 + soff; \n  \t//gl_PointSize *= 20.0 / cols; \n  \t//gl_PointSize *= resolution.x / 600.; \n    float hue = s;\n    hue = smoothstep(x, y, xOff);\n    float sat = v  * xOff;\n    float val = u;\n    vec4 color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\n    color *= rotY(PI * soff);\n    //background += 0.1;\n    vec4 finalColor = mix(color, background, s);\n\n    v_color = finalColor;\n  }"
  },
  "screenshotURL": "data/images/images-f7hwnjpkxtelesz4b-thumbnail.jpg",
  "hasSound": "",
  "views": 69,
  "likes": 0,
  "revisionId": "wR9MsPzocqBscHmX7"
}