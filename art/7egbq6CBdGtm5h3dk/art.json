{
  "_id": "7egbq6CBdGtm5h3dk",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1516196379718"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1516196694188"
    }
  },
  "origId": "i7RCxecdC6AJ3heyF",
  "name": "depth 3D",
  "notes": "http://glslsandbox.com/e#42601.2",
  "rank": {
    "$numberDouble": "1.7511596909899168"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/billx/tandava-billx-remix\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n//functions for the shader\\n//----------------------------------------------------------------\\n// Koleidoscope by ackleyrc: https://www.shadertoy.com/view/llXcRl \\n//----------------------------------------------------------------\\n\\nconst float NUM_SIDES = 7.0;  // set your favorite mirror factor here\\n\\nconst float PI = 3.14159265359;\\n\\nconst float KA = PI / NUM_SIDES;\\n\\n//----------------------------------------------------------------\\n// transformation to koleidoscopic coordinates\\n//----------------------------------------------------------------\\nvoid koleidoscope(inout vec2 uv)\\n{\\n  // get the angle in radians of the current coords relative to origin (i.e. center of screen)\\n  float angle = atan (uv.y, uv.x);\\n  // repeat image over evenly divided rotations around the center\\n  angle = mod (angle, 2.0 * KA);\\n  // reflect the image within each subdivision to create a tilelable appearance\\n  angle = abs (angle - KA);\\n  // rotate image over time\\n  angle += 0.1*time;\\n  // get the distance of the coords from the uv origin (i.e. center of the screen)\\n  float d = length(uv); \\n  // map the calculated angle to the uv coordinate system at the given distance\\n  uv = d * vec2(cos(angle), sin(angle));\\n}\\n//----------------------------------------------------------------\\n// equal to koleidoscope, but more compact \\n//----------------------------------------------------------------\\nvoid smallKoleidoscope(inout vec2 uv)\\n{\\n  float angle = abs (mod (atan (uv.y, uv.x), 2.0 * KA) - KA) + 0.1*time;\\n  uv = length(uv) * vec2(cos(angle), sin(angle));\\n}\\n//end functions for the shader\\n\\n\\n//Functions used for camera\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n//\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\n\\nvec2 rotate(vec2 f, float deg) \\n{\\n\\treturn vec2(f.x * cos(deg) - f.y * sin(deg), f.x * sin(deg) + f.y * cos(deg));\\n}\\n\\n//End functions used for camera\\n\\nfloat pattern(vec2 p){p.x -= .866; p.x -= p.y * .005; p = mod(p, 1.); return p.x + p.y < 1.0 ? 0.3: 1.;}\\n\\nvoid main ()\\n{\\n   float finalDesiredPointSize = 3.;\\n   float maxFinalSquareSideSize = floor(sqrt(vertexCount));\\n   float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\\n  \\n  //first the number of elements in a line\\n  float across = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\\n  finalDesiredPointSize = resolution.x/across;\\n  //we want to keep the resolution >> across/down must be the same as resolution.x/resolution.y\\n  //across = across*resolution.x/resolution.y;\\n  \\n  //then the number of possible lines with the given vertexCount\\n  float down = floor(finalMaxVertexCount / across);\\n  \\n  //we can now calculate the final number of elements\\n  float finalVertexCount = across*down;\\n  \\n  //and the consequent finalVertexId\\n  float finalVertexId = mod(vertexId,finalVertexCount);\\n  \\n  //Now we calculate the position of the elements based on their finalVertexId\\n  float x = mod(finalVertexId, across);\\n  float y = floor(finalVertexId / across);\\n  \\n  float u = (x /across);\\n  float v = (y /down);\\n  \\n  float u0 = (u * (across*finalDesiredPointSize/resolution.x));\\n  float v0 = (v * (across*finalDesiredPointSize/resolution.x ));\\n  \\n  float ux =  u0 - 0.5*(across*finalDesiredPointSize/resolution.x);\\n  float vy =  v0- 0.5*(across*finalDesiredPointSize/resolution.x);;\\n  \\n    if(u>0.5)\\n    u = 1.-u;\\n\\t\\n    \\n  float udnd = u;\\n  if(u>0.5)\\n    udnd =  1.-u;\\n   \\n  float snd = texture2D(sound, vec2(0.,  udnd)).a;\\n  \\n   \\n\\tvec2 fragcoord = vec2(x,y);\\n    vec2 newResolution = vec2(across, down);\\n  \\n  \\n   vec2 uv = vec2(ux,vy);//fragcoord.xy/resolution.xy;\\n  \\n  //vec2 uv = 12.0*(2.0 * gl_FragCoord.xy / resolution.xy - 1.0);\\n  uv.x *= resolution.x / resolution.y;\\n  //uv.x += 0.4*sin(0.2*time);\\n\\t\\n  koleidoscope(uv);\\n\\n  // Fractal Colors by Robert Sch√ºtze (trirop): http://glslsandbox.com/e#29611\\n  //vec3 p = vec3 (uv, mouse.x);\\n  \\n  snd = snd*.2 - 1.;\\n  vec3 p = vec3 (uv, snd);\\n  for (int i = 0; i < 44; i++)\\n    p.xzy = vec3(1.3,0.999,0.678)*(abs((abs(p)/dot(p,p)-vec3(1.0,1.02,snd*0.4))));\\n  \\n  //gl_FragColor = vec4(p,1.0);\\n  v_color = vec4(p,1.0);\\n\\t\\n  //camera\\n  float r  = 0.7;\\n  float tm = 1.5*time/10.;\\n  float tm2 = 0.05;\\n  mat4 mat = persp(radians(60.0), resolution.x / resolution.y, 0.1, 10.0);\\n  vec3 eye = vec3(cos(tm) * r, sin(tm * 0.93) * r, sin(tm) * r);\\n  vec3 target = vec3(0);\\n  vec3 up = vec3(0., sin(tm2), cos(tm2));\\n  \\n  \\n  mat *= cameraLookAt(eye, target, up);\\n  \\n\\n  \\n  gl_PointSize = 2.;//finalDesiredPointSize;\\n\\n  //v_color = vec4(col, 1);\\n  float depth = (v_color.x+v_color.y+v_color.z)/3.;\\n  float depthFactor = 0.;\\n  \\n  if(depth>=0.5)\\n  {\\n    depthFactor = depth/10.;\\n  }\\n  \\n  vec4 finalPos = vec4(ux, vy, depth*0.1, 1.);\\n  \\n  gl_Position = mat*finalPos;\\n}\\n\\n\\n\"}",
  "screenshotURL": "data/images/images-n6urtexu42vw8b6nj-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "6"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "j6dkFve9Afg8BMFJ2"
}