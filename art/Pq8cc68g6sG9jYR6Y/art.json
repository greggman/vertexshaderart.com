{
  "_id": "Pq8cc68g6sG9jYR6Y",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1507773911660"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1507774499730"
    }
  },
  "origId": "seEL2RtaERajKZKbT",
  "name": "slow 2 axials",
  "notes": "",
  "rank": {
    "$numberDouble": "1.6851423135668215"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/mogueheart/contact-part-2\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"/*\\n   point cloud vs spheres by Kabuto\\n\\n   Recreated this well-known demo effect. A bit tricky without being able to store history for points, so it's just computed again and again for each render pass\\n*/\\n#define timeFactor .05//KParameter 0.>>1.\\n#define PointSizeValue 2.//KParameter 1.>>4.\\n#define colorFactorR 0.//KParameter 0.>>1.\\n#define colorFactorG 0.//KParameter 0.>>1.\\n#define colorFactorB 0.//KParameter 0.>>1.\\n#define symmetry 0.//KParameter 0.>>1.\\n\\nvec3 posf2(float t, float i) {\\n  //return vec3(sin(t+i*.9553),cos(t+i*.9553),sin(t+i*.79553));\\n   return vec3(sin(t+i*.5),cos(t+i*.5),sin(t+i*.79553));\\n}\\n\\nvec3 posf0(float t) {\\n  return posf2(t,-1.)*3.5;\\n}\\n\\nvec3 posf(float t, float i) {\\n  return posf2(t*.3,i) + posf0(t);\\n}\\n\\nvec3 push(float t, float i, vec3 ofs, float lerpEnd) {\\n  vec3 pos = posf(t,i)+ofs;\\n  \\n  vec3 posf = fract(pos+.5)-.5;\\n  \\n  float l = length(posf)*2.;\\n  return (- posf + posf/l)*(1.-smoothstep(lerpEnd,1.,l));\\n}\\n\\nvoid main() {\\n  \\n \\n  float localVertexId = floor( mod(vertexId,vertexCount/4.) );\\n  \\n  // more or less random movement\\n  float t = time*timeFactor;\\n  float i = localVertexId+sin(localVertexId)*100.;\\n\\n  vec3 pos = posf(t,i);\\n  vec3 ofs = vec3(colorFactorR,colorFactorG,colorFactorB);\\n  for (float f = -10.; f < 0.; f++) {\\n\\t  ofs += push(t+f*.05,i,ofs,2.-exp(-f*.1));\\n  }\\n  ofs += push(t,i,ofs,.999);\\n  \\n  pos -= posf0(t);\\n  \\n  pos += ofs;\\n  \\n  \\n  pos.yz *= mat2(.8,.6,-.6,.8);\\n  pos.xz *= mat2(.8,.6,-.6,.8);\\n  \\n  pos *= 1.;\\n  \\n\\n  pos.z += .7;\\n  \\n  pos.xy *= .6/pos.z;\\n  \\n  gl_Position = vec4(pos.x, pos.y*resolution.x/resolution.y, pos.z*.1, 1);\\n  if(vertexId<(vertexCount/4.))\\n  {\\n    //gl_Position.x = -gl_Position.x;\\n    //gl_Position.y = -gl_Position.y;\\n  }\\n  else\\n  if(vertexId<(2.*vertexCount/4.))\\n  {\\n    gl_Position.x = gl_Position.x;\\n    gl_Position.y = -gl_Position.y;\\n  }\\n  else\\n  if(vertexId<(3.*vertexCount/4.))\\n  {\\n     gl_Position.x = -gl_Position.x;\\n    gl_Position.y = gl_Position.y;\\n  }\\n  else\\n  if(vertexId<(vertexCount))\\n  {\\n     gl_Position.x = -gl_Position.x;\\n     gl_Position.y = -gl_Position.y;\\n  }\\n  \\n  gl_PointSize = PointSizeValue;\\n\\n  v_color = vec4(abs(ofs/max(length(ofs),1e-9))*.3+.7,0.2);\\n  //v_color = vec4(0.,0.,0.,1.);//abs(ofs/max(length(ofs),1e-9))*.3+.7,0.2);\\n}\"}",
  "screenshotURL": "data/images/images-5cszusi4z3anu663u-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "5"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "xvG7GXPJoJbdm8hks"
}