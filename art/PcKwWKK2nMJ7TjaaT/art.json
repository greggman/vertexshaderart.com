{
  "_id": "PcKwWKK2nMJ7TjaaT",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1515777069792"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1516291466697"
    }
  },
  "origId": "vtq5MvbFuTd4SDKpR",
  "name": "resolution y recentrage sound deformation",
  "notes": "http://glslsandbox.com/e#42523.0",
  "rank": {
    "$numberDouble": "1.447759247787841"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/autonoise_records/plom_b8-forma\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define ITERS 40\\n#define M_PI 3.1415926535897932384626433832795\\n\\n#define DEBUG 1\\n#define TAU 6.28318530718\\n\\nvec2 getBestXYResolutionForVertexCountToGetPixelResolution(const float _desiredPixelSize, float _maxvertexCount)\\n{\\n  vec2 finalRes = vec2(1.,1.);\\n  \\n  float ratioXforY = resolution.x/resolution.y;\\n  \\n  _maxvertexCount = floor(vertexCount*ratioXforY);\\n  \\n  finalRes.x = sqrt(ratioXforY * _maxvertexCount);\\n  \\n  return vec2(finalRes.x,finalRes.x/ratioXforY);\\n}\\n  \\nfloat pattern(vec2 p){p.x*=.866;p.x-=p.y*.5;p=mod(p,1.);return p.x+p.y<1.?0.:1.;}\\n\\nvoid main ()\\n{\\n  \\n  //float finalVertexCount =  vertexCount;//max((0.5*snd)*vertexCount,5000.);\\n  \\n  float ratioXforY = resolution.x/resolution.y;\\n  \\n  float finalVertexCount = floor(vertexCount*ratioXforY);\\n  \\n  vec2 finalResolution = vec2(sqrt(ratioXforY * finalVertexCount), sqrt(ratioXforY * finalVertexCount)/ratioXforY);\\n  \\n  //float numAcrossDown = floor(sqrt(finalVertexCount));\\n  \\n  //float ratio = resolution.y/numAcrossDown;\\n  \\n  //float maxVertexCount =   numAcrossDown* numAcrossDown;\\n  \\n  float finalVertexId = mod(vertexId, finalVertexCount);\\n  \\n  float x = mod(finalVertexId,  finalResolution.x);\\n  float y = floor(finalVertexId /  finalResolution.y);\\n  \\n  float u = (x / finalResolution.x);// * (resolution.y/resolution.x);\\n  float v = (y / finalResolution.y);\\n  \\n  float snd = texture2D(sound, vec2(0.,  u)).a;\\n  \\n  float ux = ( u  * 2.0 - 1.0) * (finalResolution.x/resolution.x);\\n  \\n  float sndOffset = snd;\\n  if(v>0.5)\\n    sndOffset = -snd;\\n  float vy = sndOffset+( v * 2.0 - 1.0)* (finalResolution.y/resolution.y);\\n  \\n  \\n  \\n  \\n  \\n  //apply fragment logic\\n\\n  vec2 surfacePosition = vec2(0.,0.);\\n  \\n\\n\\tvec2 p = vec2(x,y);\\n \\n  \\n\\tvec2 uv1=(p.xy*2.-finalResolution.xy)/min(finalResolution.x,finalResolution.y); \\n\\tuv1 += surfacePosition;\\n\\tfloat dp = dot(uv1,uv1);\\n\\tuv1 /= 1.-dp*dp;\\n  \\n\\tfloat a=0.,d=dot(uv1,uv1),s=0.,t=fract(time*.3),v1=0.;\\n\\tfor(int i=0;i<8;i++){s=fract(t+a);v+=pattern(uv1*(pow(2.,(1.-s)*8.))*.5)*sin(fract(t+a)*3.14);a+=.125;}\\n\\t\\n \\n  gl_Position = vec4(ux, vy, 0, 1);\\n  \\n  gl_PointSize = (resolution.y/finalResolution.y)*2.-1.;\\n\\n  v_color = vec4(mix(vec3(.7,.8,1),vec3(.8,.8,.9),d)*v*.25,1);;\\n  \\n\\n}\"}",
  "screenshotURL": "data/images/images-425pey3xui2udoa4l-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "38"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "P5Aog9Lf2rbLxqyYf"
}