{
  "_id": "LHZYGPs7pPvxmLMbm",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1551740204417"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1551822849492"
    }
  },
  "origId": "exWL4hKkpkDAwMwS5",
  "name": "cube trajectory ext sym",
  "notes": "",
  "rank": {
    "$numberDouble": "1.9568342380158337"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":72000,\"mode\":\"LINE_STRIP\",\"sound\":\"https://soundcloud.com/djapsara/apsara-afterdark-031-on-frisky-radio-may-2017\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n#define PI radians(180.0)\\n \\n#define kShapeVertexCount 36.0\\n#define kVertexPerShape 6.0\\n#define numberOfShapesPerGroup 15.0\\n#define fakeVerticeNumber 72000.\\n\\nconst float dim = 120.;\\nconst float off = 0.1;\\nconst vec3 vAlb = vec3(0.5);\\n/////////////////////////////\\n//K Machine parameters\\n/////////////////////////////\\n\\n//KDrawmode=GL_TRIANGLE_STRIP\\n\\n\\n#define tubeSpeedFactor 0.9 //KParameter 0.>>4.\\n#define cudeSpeedFactor 80. //KParameter 0.>>150.\\n#define SizeFactorX  100.1 //KParameter 1.>>10.\\n#define radiusSizeFactor 0.1 //KParameter 0.05>>0.2\\n#define cubeSizeFactor 1. //KParameter 0.5>>40.\\n#define cubeScaleFactorY 1. //KParameter 0.5>>40.\\n#define cubeScaleFactorZ 1. //KParameter 0.5>>40.\\n\\n\\nmat4 rotZ(float _radAngle) {\\n    float s = sin(_radAngle);\\n    float c = cos(_radAngle);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 scale(vec3 _s) {\\n  return mat4(\\n    _s[0], 0, 0, 0,\\n    0, _s[1], 0, 0,\\n    0, 0, _s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float _fov, float _aspect, float _zNear, float _zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * _fov);\\n  float rInv = 1.0 / (_zNear - _zFar);\\n\\n  return mat4(\\n    f / _aspect, 0., 0., 0.,\\n    0., f, 0., 0.,\\n    0., 0., (_zNear + _zFar) * rInv, -1.,\\n    0., 0., _zNear * _zFar * rInv * 2., 0.);\\n}\\n\\nmat4 lookAt(vec3 _eye, vec3 _targ, vec3 _up) {\\n  vec3 zAx = normalize(_eye - _targ);\\n  vec3 xAx = normalize(cross(_up, zAx));\\n  vec3 yAx = cross(zAx, xAx);\\n\\n  return mat4(\\n    xAx, 0.,\\n    yAx, 0.,\\n    zAx, 0.,\\n    _eye, 1.);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\n\\nvec3 getTrajPoint(const float _id) {\\n  return vec3(\\n    sin(_id * 0.99),\\n    sin(_id * 2.43),\\n    sin(_id * 1.57));\\n}\\n \\nvoid getPosAndAxisMat(const float _rel, const float _delta, out mat3 _axis, out mat3 _pos)\\n{\\n  \\n  float pg = _rel + _delta;\\n  \\n  vec3 r0 = getTrajPoint(pg + off * 0.);\\n  vec3 r1 = getTrajPoint(pg + off * 1.);\\n  vec3 r2 = getTrajPoint(pg + off * 2.);\\n  \\n  _pos = mat3(\\n    getTrajPoint(pg + off * 0.),\\n    getTrajPoint(pg + off * 1.),\\n    getTrajPoint(pg + off * 2.));\\n  \\n  vec3 s0 = normalize(_pos[1] - _pos[0]);\\n  vec3 s1 = normalize(_pos[2] - _pos[1]);\\n  \\n  vec4 zaxis = vec4(normalize(s1 - s0),1.);\\n  vec4 xaxis = vec4(normalize(cross(s0, s1)),1.);\\n  vec4 yaxis = vec4(normalize(cross(zaxis.xyz, xaxis.xyz)),1.);\\n \\n  _axis = mat3(\\n    xaxis,\\n    yaxis,\\n    zaxis);\\n\\n\\n}\\n\\nvoid getTrajMat(float _shapeId, float _shapeCount, float _timeB, out mat4 _wmat, out mat4 _emat) {\\n  \\n  \\n  float prog = (_shapeId / _shapeCount)+_timeB;\\n  \\n  mat3 axis, mPos;\\n\\n  getPosAndAxisMat((_shapeId / _shapeCount), _timeB, axis, mPos);\\n\\n  //pos mtx\\n  _wmat = mat4(\\n    vec4(axis[0], 0),\\n    vec4(axis[1], 0),\\n    vec4(axis[2], 0),\\n    vec4(mPos[0] * dim, 1)); \\n  \\n  //orient mtx\\n  vec3 eye    = mPos[0] * dim + axis[2] * 1.;\\n  vec3 target = mPos[1] * dim + axis[2];\\n  vec3 up     = axis[1];\\n  \\n  mat4 cmat = lookAt(eye, target, up);\\n  _emat = inverse(cmat);\\n  \\n  \\n}\\n\\n\\n#define kShapeVertexCount 36.0\\n#define kVertexPerShape 6.0\\n\\nvec3 shapeVertex(float _vId, out vec4 _nI)\\n{\\n    float faceId = floor(_vId / kVertexPerShape);\\n    float vtxId = mod(_vId, kVertexPerShape);\\n    vec2 fp;\\n    vec3 v;\\n    \\n    if(vtxId <= 1.0) {\\n        fp = vec2(1.0, 1.0);\\n    }\\n    else if(vtxId == 2.0) {\\n        fp = vec2(-1.0, 1.0);\\n    }\\n    else if(vtxId == 3.0) {\\n        fp = vec2(1.0, -1.0);\\n    }\\n    else {\\n        fp = vec2(-1.0, -1.0);\\n    }\\n    \\n    if(faceId == 0.0) {\\n        \\n        v = vec3(fp.x, fp.y, 1.0);\\n        _nI = vec4(0.0, 0.0, 1.0, faceId);\\n    }\\n    else if(faceId == 1.0) {\\n        \\n        v = vec3(-fp.x, fp.y, -1.0);\\n        _nI = vec4(0.0, 0.0, -1.0, faceId);\\n    }\\n    else if(faceId == 2.0) {\\n        \\n        v = vec3(fp.x, 1.0, -fp.y);\\n        _nI = vec4(0.0, 1.0, 0.0, faceId);\\n    }\\n    else if(faceId == 3.0) {\\n        \\n        v = vec3(fp.x, -1.0, fp.y);\\n        _nI = vec4(0.0, -1.0, 0.0, faceId);\\n    }\\n    else if(faceId == 4.0) {\\n        \\n        v = vec3(-1.0, fp.y, -fp.x);\\n        _nI = vec4(-1.0, 0.0, 0.0, faceId);\\n    }\\n    else {\\n        \\n        v = vec3(1.0, fp.y, fp.x);\\n        _nI = vec4(1.0, 0.0, 0.0, faceId);\\n    }\\n    \\n    return v;\\n}\\n\\n\\nmat4 rotMatx(vec3 _axis, float _angle)\\n{\\n    _axis = normalize(_axis);\\n    float s = sin(_angle);\\n    float c = cos(_angle);\\n    float oc = 1.0 - c;\\n    \\n    return mat4(oc * _axis.x * _axis.x + c,           oc * _axis.x * _axis.y - _axis.z * s,  oc * _axis.z * _axis.x + _axis.y * s,  0.0,\\n                oc * _axis.x * _axis.y + _axis.z * s,  oc * _axis.y * _axis.y + c,           oc * _axis.y * _axis.z - _axis.x * s,  0.0,\\n                oc * _axis.z * _axis.x - _axis.y * s,  oc * _axis.y * _axis.z + _axis.x * s,  oc * _axis.z * _axis.z + c,           0.0,\\n                0.0,                                0.0,                                0.0,                                1.0);\\n}\\n\\nvec3 shade(vec3 _eye, vec3 _p, vec3 _n, vec3 _dfscol, float _amb, vec2 _spec)\\n{\\n    vec3 rgb;\\n    vec3 lit = normalize(vec3(1.0, 1.0, 4.0));\\n    \\n    float diffuse = max(0.0, dot(_n, lit)) * (1.0 - _amb) + _amb;\\n    \\n    vec3 h = normalize(normalize(_eye - _p) + lit);\\n    float specular = 1.0;\\n    if(diffuse > 0.0) {\\n        specular = max(0.,dot(_n, h));\\n    }\\n    \\n    rgb = diffuse * _dfscol + specular * _spec.y;\\n    \\n    return rgb;\\n}\\n\\nvoid addPtLight( vec3 vLightPos, vec3 vLightColor, in vec3 _pos, in vec3 _norm, inout vec3 vDiffuse, inout vec3 vSpecular )\\n{\\n  vec3 vLightDir = normalize(vLightPos - _pos);\\n  vec3 vViewDir = normalize(-_pos);\\n  \\n  float NdotL = max( 0.0, dot( vLightDir, _norm ) );\\n  \\n  vec3 vHalfAngle = normalize( vViewDir + vLightDir );\\n\\n  float NdotH = max( 0.0, dot( vHalfAngle, _norm ) );\\n  \\n  vDiffuse += NdotL * vLightColor;\\n\\n  float fPower = 80.0;\\n  vSpecular += pow( NdotH, fPower ) * (fPower * 8.0 * PI) * NdotL * vLightColor;\\n}\\n\\nvoid addDirLight( vec3 _vLDir, vec3 _vLColor, in vec3 _pos, in vec3 _norm, inout vec3 _vDiff, inout vec3 _vSpec )\\n{\\n  vec3 vViewDir = normalize(-_pos);\\n  \\n  float NdotL = max( 0.0, dot( _vLDir, _norm ) );\\n  \\n  vec3 vHalfAngle = normalize( vViewDir + _vLDir );\\n\\n  float NdotH = max( 0.0, dot( vHalfAngle, _norm ) );\\n  \\n  _vDiff += NdotL * _vLColor;\\n\\n  float fPower = 80.0;\\n  _vSpec += pow( NdotH, fPower ) * (fPower * 8.0 * PI) * NdotL * _vLColor;\\n}\\n\\nvec3 lightget(const vec3 vAlbedo, const vec3 _pos, const vec3 _eyePos, const vec3 _norm )\\n{   \\n  vec3 vDiffuseLight = vec3(0.0);\\n  vec3 vSpecLight = vec3(0.0);\\n\\n  vec3 vAmbient = vec3(1., 1., 1.);\\n  vDiffuseLight += vAmbient;\\n  vSpecLight += vAmbient;\\n\\n\\n  addPtLight( vec3(3.0, 2.0, 30.0), vec3( 0.2, 0.2,0.2),_pos, _norm, vDiffuseLight, vSpecLight );\\n \\n  addDirLight( normalize(vec3(0.0, -1.0, 0.0)), vAmbient * 0.1, _pos, _norm, vDiffuseLight, vSpecLight );\\n  \\n  vec3 vViewDir = normalize(-_eyePos);\\n  \\n  float fNdotD = clamp(dot(_norm, vViewDir), 0.0, 1.0);\\n  vec3 vR0 = vec3(0.04);\\n  vec3 vFresnel = vR0 + (1.0 - vR0) * pow(1.0 - fNdotD, 5.0);\\n  \\n  \\n  vec3 vColor = mix( vDiffuseLight * vAlbedo, vSpecLight, vFresnel );\\n  \\n  return vColor;\\n}\\n\\n\\nvec3 lightPost( vec3 _vColor )\\n{\\n  float exposure = 1.0;\\n  _vColor = vec3(1.0) - exp2( _vColor * -exposure );\\n\\n  _vColor = pow( _vColor, vec3(1.0 / 2.2) );\\n\\n  return _vColor;\\n}\\n\\n#define EYE_STATIC true\\n//#define STOP_TRAJ true\\n#define DYN_GROUPID true\\n#define SOUND_REACT true\\n\\nvoid main() {\\n  \\n    float finalVertexId = mod(vertexId,fakeVerticeNumber);\\n    float finalVertexCount = min(vertexCount,fakeVerticeNumber);\\n    //shape\\n    float shapeCount = floor(finalVertexCount / kShapeVertexCount);\\n    float shapeId = floor(finalVertexId / kShapeVertexCount);\\n    float shapeVertexId = mod(finalVertexId, kShapeVertexCount);\\n    float shapeRelId = shapeId/shapeCount;\\n    \\n    //group\\n    float groupId = floor(shapeId/numberOfShapesPerGroup);\\n    float groupCount = floor(shapeCount/numberOfShapesPerGroup);\\n    float shapeIdInGroup = mod(shapeId,numberOfShapesPerGroup);\\n    float relShapeGroupId = shapeIdInGroup/numberOfShapesPerGroup;\\n    float relGroupId = groupId/groupCount;\\n  \\n   #ifdef SOUND_REACT\\n   float snd = 2.*texture2D(sound, vec2(0., (1.-relGroupId))).a;\\n   #else\\n   float snd = 1.;\\n   #endif\\n    \\n  \\n  #ifdef STOP_TRAJ\\n  float timeB = 14.;\\n  #else\\n  float timeB = time * tubeSpeedFactor;\\n  #endif\\n  \\n\\n \\n  //Static eye\\n  #ifdef EYE_STATIC\\n  vec3 eye = vec3(0.5, 0.5, 2.5)*dim;\\n  vec3 target = vec3(0.5, 0.5, 0.)*dim;\\n  vec3 up     = vec3(0.5, 0.5, 1.5);\\n  #else\\n   //Following eye\\n  mat3 axis, sPos;// = getAxisMat(0., timeB);\\n  getPosAndAxisMat(0., timeB, axis, sPos);\\n  vec3 eye = sPos[0] * dim + axis[0].xyz * 1.;\\n  vec3 target = sPos[2] * dim + axis[2];\\n  vec3 up = axis[1];\\n  #endif\\n  \\n  \\n //rotation around eye z axis\\n  //mat4 rotMat = rotationMatrix(zaxis, time*PI);\\n  //xaxis = (rotMat*vec4(xaxis,1.)).xyz;\\n  //yaxis = (rotMat*vec4(yaxis,1.)).xyz;\\n  \\n  //\\n\\n  \\n  mat4 vmat = inverse(lookAt(eye, target, up));\\n  \\n\\n    vec4 cNorm;\\n  \\n    vec3 cubep = shapeVertex(shapeVertexId, cNorm);;\\n      \\n   \\n    mat4 scaleMat = scale(vec3(cubeSizeFactor,cubeScaleFactorY*cubeSizeFactor*snd,cubeScaleFactorZ*cubeSizeFactor));\\n    \\n    cubep = (scaleMat*vec4(cubep,1.)).xyz;\\n  \\n    mat4 zrot = rotZ(relShapeGroupId*2.*PI);//shape orientation\\n    cubep = (zrot*vec4(cubep,1.)).xyz;\\n  \\n    cNorm *= zrot;\\n     //create the circle group\\n    float radius =100.*radiusSizeFactor;\\n    cubep.x+= radius*sin(2.*PI*relShapeGroupId);\\n    cubep.y+= radius*cos(2.*PI*relShapeGroupId);\\n  //cubep.z = mod(time*2.,3.);\\n  //cubep = vec3(cubep.x , cubep.y+sndFactor*snd, cubep.z+lineId*patternSize +mod(time*speedFactor,patternSize));//position\\n    \\n  vec3 pos;\\n  \\n  //shapeId = mod(shapeId+time, shapeCount);\\n\\n  mat4 posmat, rotmat;\\n\\n  #ifdef DYN_GROUPID\\n  getTrajMat(mod(groupId-time*cudeSpeedFactor,groupCount), groupCount, timeB, posmat, rotmat);\\n  #else\\n   getTrajMat(groupId, groupCount, timeB, posmat, rotmat);\\n  #endif\\n  \\n  //shape orientation\\n  cubep = (vec4(cubep.xyz,1.)*rotmat).xyz;\\n  cNorm *= rotmat;\\n  \\n  //shape position\\n  cubep+= (posmat * vec4(0.,0.,0., 1)).xyz;\\n \\n  //vec3 finalColor = shade(eye, cubep, cNorm.xyz, vec3(1.), 0.6, vec2(64.0, .8));\\n  \\n  //vec3 LightSurface(const vec3 vAlbedo, const vec3 _eyePos, const vec3 _norm )\\n  vec3 finalColor = lightget(vAlb, cubep, eye, cNorm.xyz);\\n  lightPost(finalColor);\\n  \\n  gl_PointSize = 2.;\\n  mat4 pmat = persp(radians(60.0), resolution.x / resolution.y, .1, 1000.0);\\n  gl_Position = pmat * vmat * vec4(cubep, 1);\\n  \\n  v_color = vec4(finalColor,1.);\\n}\\n\"}",
  "screenshotURL": "data/images/images-a609athoqwojd0n3s-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "75"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "AzmHuQoaNMwjaWgvs"
}