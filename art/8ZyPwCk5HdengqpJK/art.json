{
  "_id": "8ZyPwCk5HdengqpJK",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1448473787318"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1448645731410"
    }
  },
  "origId": null,
  "name": "gridpnt",
  "rank": {
    "$numberDouble": "10.581292536411762"
  },
  "private": false,
  "username": "gman",
  "settings": "{\"num\":97272,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/scrubber-fox/squarepusher-4001-scrubber-fox\",\"lineSize\":\"CSS\",\"backgroundColor\":[0,0,0,1],\"shader\":\"/*\\n\\n __   __   ______     ______     ______   ______     __  __     ______     __  __     ______     _____     ______     ______     ______     ______     ______  \\n/\\\\ \\\\ / /  /\\\\  ___\\\\   /\\\\  == \\\\   /\\\\__  _\\\\ /\\\\  ___\\\\   /\\\\_\\\\_\\\\_\\\\   /\\\\  ___\\\\   /\\\\ \\\\_\\\\ \\\\   /\\\\  __ \\\\   /\\\\  __-.  /\\\\  ___\\\\   /\\\\  == \\\\   /\\\\  __ \\\\   /\\\\  == \\\\   /\\\\__  _\\\\ \\n\\\\ \\\\ \\\\'/   \\\\ \\\\  __\\\\   \\\\ \\\\  __<   \\\\/_/\\\\ \\\\/ \\\\ \\\\  __\\\\   \\\\/_/\\\\_\\\\/_  \\\\ \\\\___  \\\\  \\\\ \\\\  __ \\\\  \\\\ \\\\  __ \\\\  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\ \\\\  __\\\\   \\\\ \\\\  __<   \\\\ \\\\  __ \\\\  \\\\ \\\\  __<   \\\\/_/\\\\ \\\\/ \\n \\\\ \\\\__|    \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\   /\\\\_\\\\/\\\\_\\\\  \\\\/\\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\____-  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\    \\\\ \\\\_\\\\ \\n  \\\\/_/      \\\\/_____/   \\\\/_/ /_/     \\\\/_/   \\\\/_____/   \\\\/_/\\\\/_/   \\\\/_____/   \\\\/_/\\\\/_/   \\\\/_/\\\\/_/   \\\\/____/   \\\\/_____/   \\\\/_/ /_/   \\\\/_/\\\\/_/   \\\\/_/ /_/     \\\\/_/ \\n                                                                                                                                                               \\n\\n\\n\\n*/\\n\\n\\n#define PI radians(180.0)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\n\\n\\nvoid main() {\\n  float size = floor(pow(vertexCount, 1./3.));\\n  float div  = size - 1.;\\n  vec3 p = vec3(\\n    mod(vertexId, size),\\n    mod(floor(vertexId / size), size),\\n    floor(floor(vertexId / size) / size));\\n  \\n  vec3 snd = vec3(\\n    texture2D(sound, vec2(hash(vertexId / vertexCount / 3. + 0.1) * 0.25, 0.0)).a,\\n    texture2D(sound, vec2(hash(vertexId / vertexCount / 3. + 0.2) * 0.25, 0.0)).a,\\n    texture2D(sound, vec2(hash(vertexId / vertexCount / 3. + 0.3) * 0.25, 0.0)).a);\\n  \\n  float a = time * 0.01;\\n  float r = 1.0;\\n  float c = cos(a) * r;\\n  float s = sin(a) * r;\\n  float y = sin(time * 0.011);\\n  \\n  vec3 target = vec3(0,0,0);\\n  vec3 up = vec3(0,1,0);\\n  vec3 eye = vec3(c, y, s);\\n  \\n  \\n  mat4 m = ident();\\n  m *= persp(radians(45.), resolution.x / resolution.y, 0.1, 2.);\\n  m *= cameraLookAt(eye, target, up);\\n  m *= trans(vec3(-1, -1, -1));\\n  m *= uniformScale(2. / div);\\n    \\n  vec3 sp = snd * snd * snd * snd * snd * snd * snd * snd * snd;\\n  gl_Position = m * vec4(p + sp * .4, 1);\\n\\n  float z  = gl_Position.z * 0.5 + 0.5;\\n  float sm = max(max(sp.x, sp.y), sp.z);\\n  float hue = 1.;//(time * 0.01 + count * 1.001);\\n  v_color = vec4(mix(p / div * vec3(0,1,1) * z, vec3(1,0,0), step(0.7, sm)), mix(0.8,1.5, mod(floor(vertexId * 0.33 + time * 30.0), 2.)));\\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\\n  gl_PointSize = mix(10.0, 0.0, z) + step(0.7, sm) * 2.;\\n}\"}",
  "screenshotURL": "data/images/images-9dn4sdakaj2ih294w-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "478"
  },
  "likes": {
    "$numberInt": "7"
  },
  "revisionId": "kkJsww7Qsh6GmJW6J",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}