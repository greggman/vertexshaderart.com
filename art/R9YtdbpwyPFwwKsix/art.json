{
  "_id": "R9YtdbpwyPFwwKsix",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": "1445777397953"
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1469189780152"
  },
  "modifiedAt": {
    "$date": "1469198889414"
  },
  "origId": null,
  "name": "spirogyro",
  "notes": "",
  "rank": "1.9825389972943672",
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "LINES",
    "sound": "https://soundcloud.com/kostaellis/look-up-superbreak-presents",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define NUM_SEGMENTS 400.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define PI radians(180.0)\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 spirograph(float u, float n1, float n2, float n3, float a, float b, float y, float z) {\n  u *= PI * 2.0;\n  float a1 = pow(abs(cos(y * u / 4.) / a), n2);\n  float b1 = pow(abs(sin(z * u / 4.) / b), n3);\n  float ab = a1 + b1;\n  float r = pow(abs(ab), -1. / n1);\n    \n  float c1 = cos(u) * r;\n  float s1 = sin(u) * r;\n  \n  return vec2(c1, s1);\n}\n\nfloat bloop(float v) {\n  return sin(v * PI * 2.) * .5 + .5;\n}\n\nvoid main() {\n  float numCircles = floor(vertexCount / NUM_POINTS);\n  // produces 0,1, 1,2, 2,3, ...\n  float point = floor(mod(vertexId, NUM_POINTS) / 2.0) + mod(vertexId, 2.0);\n  float circleId = floor(vertexId / NUM_POINTS);\n  \n  float u = point / NUM_SEGMENTS; \n  float v = circleId / numCircles; \n  float invV = 1.0 - v;\n  \n  float tm = time * 0.05 - v;\n  vec2 ra = spirograph(\n    u, \n    mix(-20., 20., bloop(tm * 0.6)),   // n1\n    mix(-20., 20., bloop(tm * 0.7)),   // n2\n    mix(-20., 20., bloop(tm * 0.8)),   // n3\n    mix( 1.,  50., bloop(tm * 0.9)),   // a\n    mix( 1.,  50., bloop(tm * 0.10)),  // b\n    mix( 1., 100., bloop(tm * 0.11)),  // y\n    mix( 1., 100., bloop(tm * 0.12))); // z\n\n  vec2 xy = ra;\n  float aspect = resolution.y / resolution.x;\n  gl_Position = vec4(xy * 0.25, 0, v) * vec4(aspect, 1, 1, 1);\n  \n  float su = bloop(u * 3. + time * 0.25);\n  float snd = texture2D(sound, vec2(mix(0.001, 0.1, su), v * 0.2)).a;\n  snd *= mix(1.0, 1.3, su);\n\n  float cs = pow(snd, 5.);\n  float hue = time * 0.1 + v * 0.2 + cs * 0.2;\n  float sat = mix(0.75, 1., cs);\n  float val = mix(0.75, 1., cs);\n  v_color = mix(vec4(hsv2rgb(vec3(hue, sat, val)), 1), background, 0.);\n}"
  },
  "screenshotURL": "data/images/images-3cd8m3krl5ko84n58-thumbnail.jpg",
  "hasSound": true,
  "views": "206",
  "likes": "0",
  "revisionId": "wbRFu7o8Smd9xiyg4"
}