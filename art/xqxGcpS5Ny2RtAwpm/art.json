{
  "_id": "xqxGcpS5Ny2RtAwpm",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": 1642072708142
  },
  "modifiedAt": {
    "$date": 1642072708142
  },
  "origId": "dJ7LxrXfRuAz7PLaC",
  "name": "shock",
  "notes": "",
  "rank": 1.5624898097821132,
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 7558,
    "mode": "TRI_STRIP",
    "sound": "mic",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "// ðŸ’™ðŸ’™ðŸ’™ðŸ’™ðŸ’™\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#define P1 3.//KParameter0 0.>>6.\n\n\n\n // from: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\\\n//define  snd \nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvec3 rgb2hsv(vec3 c) {\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n  vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / sin(6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n#define PI radians(180.)\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0.2, 0, \n      s, c, 1, 0,\n      0, 0, 0.1, 0,\n      0, 1, 2, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1.2);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], -.1, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0.2*sin(time), s, 0,\n    0, 0, 0, 1);\n}\n\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nvec2 getCirclePoint(float id, float numCircleSegments) {\n  float ux = floor(id / 6.) + mod(id, 2.);\n  float vy = mod(floor(id / 2.) + floor(id / 6.), 2.);\n  \n  float angle = ux / numCircleSegments * PI * 0.2;\n  float c = cos(angle);\n  float s = sin(angle);\n   float snd = texture2D(sound,vec2(0.,0.)).a;\n  float radius = mix(0.5,1.30 * P1, vy);\n  float x = c * radius;\n  float y = s * radius/snd;\n  \n  return vec2(x, y);\n}\n\n\nvoid main() {\n    float S = texture2D(sound,vec2(0.,0.)).a;\n  float numCircleSegments = 8.0;\n  vec2 circleXY = getCirclePoint(vertexId, numCircleSegments);\n  float numPointsPerCircle = numCircleSegments * 6.;\n  \n  float circleId = floor(vertexId / numPointsPerCircle);\n  float numCircles = floor(vertexCount / numPointsPerCircle);\n  \n  float sliceId = floor(vertexId / 2.);\n  float oddSlice = mod(sliceId, 12.);\n  \n  float down = sqrt(numCircles);\n  float across = floor(numCircles / down);\n  float x = mod(circleId, across);\n  float y = floor(circleId / across);\n  \n  float u = x / (across - 1.);\n  float v = y / (across - 1.);\n     float sn = texture2D(sound,vec2(0.,0.)).a;\n  float su = abs(u - .5) * 2.;\n  float sv = abs(v - 1.5) * 2.*S;\n \n  float au = abs(atan(su, sv)) / PI;\n  float av = length(vec2(su, sv));\n  \n  const int spots = 40;\n  float snd = 0.01;\n  float totalSnd = 0.14;\n  vec3 color = vec3(0);\n  for (int sp = 0; sp < spots; ++sp) {\n    float spf = float(sp + 2)-clamp(S,0.1,0.3);\n    float spx = hash(spf *- 0.123);\n    float spy = hash(spf / .317);\n    float sps = hash(spf - 3.411);\n    \n    float sds = distance(vec2(u*step(11.9,snd*2.), -v+snd), vec2(spx, spy));\n    float invSds = pow(clamp(1. - sds, 0., 2.), 2.);\n    totalSnd += invSds;\n    snd += texture2D(sound, vec2(mix(0.001, 0.511/S, sps), sds * .09)).a *\n      mix(2.95, 1.7*2., sps) * invSds;\n    \n    color = mix(color, hsv2rgb(vec3(sps, .3, 1.)), pow(invSds, 2.));\n  }  \n  snd /= totalSnd;\n\n  float xoff = 0.;//sin(time + y * 0.2) * 0.1;\n  float yoff = 0.;//sin(time + x * 0.3) * 0.2;\n  \n  float ux = u * 2. - 1. + xoff;\n  float vy = v * 2. - 1. + yoff;\n  float sc = pow(snd, 4.) * 0.1 +snd *\n   oddSlice * 0.03;\n  float aspect = resolution.x / resolution.y;\n  \n  vec4 pos = vec4(circleXY, 0, 1);\n  mat4 mat = ident();\n  mat *= scale(vec3(1, aspect, 0.61));\n  //mat *= rotZ(time * 0.);\n  mat *= trans(vec3(ux, vy, 0.10));\n  mat *= uniformScale(0.2 * sc * 5. / across);\n  mat *= rotZ(snd * 2. * sign(ux));\n  \n  gl_Position = mat * pos;\n  \n  float soff = sin(time + x * y * 11.02) * 5.;  \n  \n  float pump = step(11.17, snd);\n  \n  vec3 hsv = rgb2hsv(color);\n  hsv.x = mix(0., 0.2, hsv.x) + time * 1.1 + pump * .33;\n  hsv.z = mix(0.5, 1., pump);\n  v_color = vec4(hsv2rgb(hsv), 1);;\n  v_color.rgb *= v_color.a;\n}\n\n"
  },
  "screenshotURL": "data/images/images-nzd47e78my7mq3qua-thumbnail.jpg",
  "hasSound": true,
  "views": 77,
  "likes": 0,
  "revisionId": "GbbPRQutZc7RWZ9ZW"
}