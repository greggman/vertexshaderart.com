{
  "_id": "W5pb4uwKJ9dzEF9oz",
  "owner": {
    "_id": "Q5T8njsEaGYsK34dZ",
    "createdAt": {
      "$date": {
        "$numberLong": "1448898157107"
      }
    },
    "profile": {
      "name": null,
      "avatarUrl": "https://avatars.githubusercontent.com/8BitRick?s=200"
    },
    "username": "8bitrick"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1450991531377"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1451147335963"
    }
  },
  "origId": null,
  "name": "Face",
  "notes": "Making a face from math",
  "rank": {
    "$numberDouble": "1.1288612615391085"
  },
  "private": true,
  "unlisted": false,
  "username": "8bitrick",
  "avatarUrl": "https://avatars.githubusercontent.com/8BitRick?s=200",
  "settings": "{\"num\":1000,\"mode\":\"POINTS\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define PI 3.1416\\n#define TWOPI 6.28\\nfloat face_radius = 0.5;\\nfloat face_height = face_radius * 2.;\\nfloat face_ratio = 1.15 * face_height;\\nfloat eye_pos = 0.56 * face_height;\\n//float eye_radius = 0.05 * face_height;\\n//float eye_ratio = 5.66 * face_height;\\nfloat eye_width = 0.26 * face_height;\\nfloat eye_height = 0.2 * face_height;\\nfloat eye_ratio = eye_width / eye_height;\\nfloat eye_sep = 0.54 * face_height; // -1 to 1 so sep is 2 * face width percentage\\n\\nfloat nose_pos = 0.77 * face_height;\\nfloat nose_radius = 0.012 * face_height;\\n\\nfloat mouth_pos = 0.85 * face_height;\\nfloat mouth_width = 0.31 * face_height;\\nfloat mouth_radius = mouth_width * 0.5;\\n\\nconst float face_verts_percent = 0.4;\\nconst float eye_verts_percent = 0.45;\\nconst float nose_verts_percent = 0.05;\\nconst float mouth_verts_percent = 0.10;\\n\\nmat4 mvp = mat4(1.0);\\nmat4 face_mat = mat4(1.0);\\n\\nfloat m1p1(float v) { return v * 2. - 1.; }\\n\\nmat4 build_mvp() {\\n  mvp[0][0] = resolution.y/resolution.x;\\n  mvp[1][1] = 1.0;\\n  return mvp;\\n}\\nmat4 build_face_mat() {\\n  face_mat[0][0] = face_radius;\\n  face_mat[1][1] = face_radius;\\n  return face_mat;\\n}\\n\\nvoid draw_head(float vert_per, mat4 curMat)\\n{\\n  float angle = vert_per * TWOPI;\\n\\n  float x = cos(angle) * face_ratio;\\n  float y = sin(angle) * 1.;\\n  gl_Position = curMat * vec4(x,y,0.0,1.0);\\n  v_color = vec4(1.0);\\n}\\n\\nvoid draw_eyes(float vert_per, mat4 curMat) {\\n  // TODO: should be able to replace these eye conditions \\n  // with a multiplier for left eye / right eye\\n  bool left_eye = (vert_per < 0.5);\\n  float eye_per = vert_per / 0.5;\\n  if(left_eye)\\n    eye_per -= 0.5;\\n  \\n  mat4 eye_mat = mat4(1.0);\\n  eye_mat[0][0] = eye_height;\\n  eye_mat[1][1] = eye_height;\\n  eye_mat[3][0] = eye_sep * (left_eye ? -1.0 : 1.0);\\n  eye_mat[3][1] = -m1p1(eye_pos);\\n  \\n  curMat *= eye_mat;\\n  \\n  float angle = eye_per * TWOPI;\\n  //float angle = eye_per * PI;\\n\\n  float x = cos(angle) * eye_ratio;\\n  float y = sin(angle) ;\\n  gl_Position = curMat * vec4(x,y,0.0,1.0);\\n  v_color = vec4((left_eye ? 1.0 : 0.0),0.0,(left_eye ? 0.0 : 1.0),1.0);\\n}\\n\\nvoid draw_nose(float vert_per, mat4 curMat)\\n{\\n  float angle = vert_per * TWOPI;\\n\\n  float x = cos(angle) * nose_radius;\\n  float y = sin(angle) * nose_radius - (nose_pos * 0.5);\\n  gl_Position = curMat * vec4(x,y,0.0,1.0);\\n  v_color = vec4(1.0);\\n}\\n\\nvoid draw_mouth(float vert_per, mat4 curMat)\\n{\\n  float angle = vert_per * TWOPI;\\n\\n  //float x = cos(angle) * nose_radius;\\n  float x = vert_per * mouth_width * 2. - mouth_radius * 2.;\\n  float y = -m1p1(mouth_pos);\\n  //float y = sin(angle) * nose_radius - (nose_pos * 0.5);\\n  gl_Position = curMat * vec4(x,y,0.0,1.0);\\n  v_color = vec4(1.0);\\n}\\n\\nvoid main()\\n{\\n  mat4 curMat = build_mvp();\\n  curMat *= build_face_mat();\\n  \\n  float total_per = vertexId / vertexCount;\\n  if(total_per < face_verts_percent) {\\n    float vert_per = total_per / face_verts_percent;\\n    draw_head(vert_per, curMat);\\n  } else if (total_per >= face_verts_percent && total_per < (face_verts_percent + eye_verts_percent)){\\n    float vert_per = (total_per - face_verts_percent) / eye_verts_percent;\\n    draw_eyes(vert_per, curMat);\\n  } else if (total_per >= (face_verts_percent + eye_verts_percent) && total_per < (face_verts_percent + eye_verts_percent + nose_verts_percent)){\\n    float vert_per = (total_per - (face_verts_percent + eye_verts_percent)) / nose_verts_percent;\\n    draw_nose(vert_per, curMat);\\n  } else {\\n    float vert_per = (total_per - (face_verts_percent + eye_verts_percent + nose_verts_percent)) / mouth_verts_percent;\\n    draw_mouth(vert_per, curMat);\\n  }\\n  \\n  gl_PointSize = 5.0;\\n  //gl_Position = vec4(0.5,0.5,0.0,1.0);\\n}\\n\\n\"}",
  "screenshotURL": "data/images/images-c5bxxuqmk216xyega-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "2"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "ZEFtkAM5ueMY2q9wg"
}