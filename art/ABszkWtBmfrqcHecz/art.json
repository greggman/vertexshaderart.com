{
  "_id": "ABszkWtBmfrqcHecz",
  "owner": {
    "_id": "vWQZQrMg9M6JE8pX9",
    "createdAt": {
      "$date": 1575718900497
    },
    "username": "evan_chen",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/cf83fa7e8a58a2de525a1b42e8550220?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": 1577693506797
  },
  "modifiedAt": {
    "$date": 1578065283889
  },
  "origId": null,
  "name": "lightD",
  "notes": "",
  "rank": 10.174332302294461,
  "private": false,
  "unlisted": false,
  "username": "evan_chen",
  "avatarUrl": "https://secure.gravatar.com/avatar/cf83fa7e8a58a2de525a1b42e8550220?default=retro&size=200",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.9764705882352941,
      1,
      0.8980392156862745,
      1
    ],
    "shader": "/*                                             \n                                               \n         .___               __ .               \n         [__ .  , _ ._     /  `|_  _ ._        \n         [___ \\/ (/,[ )____\\__.[ )(/,[ )       \n                                               \n       .       .   ,         .__        .      \n       |   * _ |_ -+-  *._   [__)*\\./ _ |      \n       |___|(_][ ) |   |[ )  |   |/'\\(/,|      \n            ._|                                \n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n20/12/2019\n\n*/ \n//Best Regard, @gman                                                                                           \n\n#define PI radians(180.)\n\n\nmat4 mAspect = mat4\n(\n  1, 0, 0, 0,\n  0, resolution.x / resolution.y, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n); \nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nmat4 rotY( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\n\nmat4 rotZ( float angle ) {\n    float s = sin( angle );\n    float c = cos( angle );\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n// hash function from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\nfloat inv(float v) {\n  return 1. - v;\n}\n\nvec3 getQPoint(const float id) {\n  float outId = mix(id, 8. - id, step(2.5, id));\n  float ux = floor(outId / 6.) + mod(outId, 2.);\n  float vy = mod(floor(outId / 2.) + floor(outId / 3.), 2.); \n  vec3 pos = vec3(ux, vy, 0);  \n  return pos;\n}\nvoid GetMatrixFromZY( const vec3 vZ, const vec3 vY, out mat3 m )\n{\n   vec3 vX = normalize( cross( vY, vZ ) );\n   vec3 vOrthoY = normalize( cross( vZ, vX ) );\n   m[0] = vX;\n   m[1] = vOrthoY;\n   m[2] = vZ;\n}\n\n\nvoid main ()\n{\n  float pointsPerSphere = vertexCount;\n  float pointsPerLoop = 1.;\n  float sphereId = floor(vertexId / pointsPerSphere);\n  float spherePointId = mod(vertexId, pointsPerSphere);\n  float aspectR = resolution.x / resolution.y ;  \n  \n  mat4 m = persp(radians(45.), resolution.x / resolution.y, 0.1, 20.); \n  vec3 camera = vec3(0., 0., 1);\n  vec3 target = vec3(0.);\n  vec3 up = vec3(0.,1.,0.);\n  \n  float radius = 0.5 ; \n  \n #pragma region ViewMatrix\n    //camera \n    float animTime = time;\n    float orbitAngle = animTime * 0.3456 + 4.0;\n    float elevation = -0.02 + (sin(animTime * 0.223 - PI * 0.5) * 0.5 + 0.5) * 0.5;\n    float fOrbitDistance = 5.0 + (cos(animTime * 0.2345) * 0.5 + 0.5 ) * 40.0;\n\n    vec3 vCameraTarget = target;\n\n    vec3 vCameraPos = vCameraTarget + vec3( sin(orbitAngle),\n                                           sin(elevation),\n                                           1.);\n    vec3 vCameraUp = vec3( 0., 1., 0. );\n    vec3 vCameraForwards = normalize(vCameraTarget - vCameraPos);\n\n \tm*= cameraLookAt(vCameraPos , vCameraTarget , normalize(vCameraUp));\n\n #pragma endregion  \n  \n  \n  #pragma region modelSetup \n    m*= uniformScale(0.7);\n  #pragma endregion \n  \n  #pragma region CubeSetUp\n    float yPos = cos(spherePointId / pointsPerSphere * PI) * radius;\n    float xyLen = sin(spherePointId / pointsPerSphere * PI) * radius; \n    float xPos = sin(spherePointId ) * xyLen;\n    float zPos = cos(spherePointId ) * xyLen;\n\n    vec4 pos =  vec4(xPos, yPos, zPos, 1) + vec4(target, 0.);\n    vec3 objectC = vec3(0. , 0. , 0.); \n  #pragma endregion\n  \n  vec3 normal = normalize(vec3(xPos , yPos , zPos));\n  float lZoffSet = ((abs(mouse.x * aspectR) > radius) && (abs(mouse.y * aspectR) > radius))? 1. : 0. ; \n  \n  vec3 lightP = vec3(10. , 10. ,10.+ pos.z);  \n  vec3 lightC = vec3(1.0) ;  \n  \n  float aStrength = 0.1 ;  \n  vec3 ambient = lightC * aStrength ;  \n  float dStrength = 1.; \n  \n  vec3 l2SD = normalize(lightP - vec3(pos)) ; \n  float diff = max(dot(normal , l2SD) , 0. ); \n  vec3 diffuse = dStrength* diff * lightC;   \n  \n  float sStrength = 0.001 ; \n  vec3 viewP = vec3(1.) ;\n  vec3 viewD = normalize(viewP - vec3(pos));\n  vec3 refDir = reflect(-l2SD , normal);\n  float spec = pow(max(dot(refDir , viewP) , 0.), 10.);\n  vec3 specular = spec * sStrength * lightC ; \n  \n\n  vec3 resultC = vec3(1.) ;  \n  resultC = ambient + diffuse + specular;  \n  \n  gl_Position = m * pos ; ; \n  gl_PointSize *= (vec4(1.0 , 0., 0., 0.)* uniformScale(10.)).x  ; \n \n  v_color = vec4(objectC + resultC  , 1. ) ;  \n  \n}"
  },
  "screenshotURL": "data/images/images-apjt23vk7540lp76i-thumbnail.jpg",
  "hasSound": "",
  "views": 540,
  "likes": 3,
  "revisionId": "8hs3fS8CiiGZrjjrG"
}