{
  "_id": "gue44sXxDW5AceuTX",
  "owner": {
    "_id": "xdTDDTRPhwPrWYuEQ",
    "createdAt": {
      "$date": "1551488110621"
    },
    "username": "jonaced",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/4afc7bbaa73d3ae5795519659259854b?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1551488124791"
  },
  "modifiedAt": {
    "$date": "1551488124791"
  },
  "origId": null,
  "name": "Circulo",
  "notes": "",
  "rank": "1.6963839151900022",
  "private": false,
  "unlisted": true,
  "username": "jonaced",
  "avatarUrl": "https://secure.gravatar.com/avatar/4afc7bbaa73d3ae5795519659259854b?default=retro&size=200",
  "settings": {
    "num": 802,
    "mode": "TRI_STRIP",
    "sound": "https://soundcloud.com/chibi-tech/lolitazia-season",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.9725490196078431,
      0.9725490196078431,
      0.9725490196078431,
      1
    ],
    "shader": "void main() \n{\n  float tamCirculo = 400.0;\n  float x = floor(vertexId / 2.0);\n  float y = mod(vertexId + 1.0, 2.0);\n  \n  // Radianes de 360 da pi\n  // El 20 son los puntos necesarios para el círculo.\n  float angle = x / tamCirculo * radians(360.0);\n  float radius = y + 3.0;\n  \n  float ux = radius * cos(angle);\n  float vy = radius * sin(angle);\n  \n  vec2 xy = vec2(ux *abs(cos(time)), vy * abs(sin(time))) * 0.1;\n  //vec2 xy = vec2(ux, vy) * 0.1;\n  \n \n  // Donde debería estar el vértice\n  gl_Position = vec4(xy, 0, 1.0);\n  v_color= vec4(sin(time), cos(time), 1.0, 1.0);\n  gl_PointSize = 3.0;\n}\n\n/*\nvoid main() \n{\n  float width = 210.0;\n  float x = mod(vertexId, width);\n  float y = floor(vertexId / width);\n  float line = vertexId/vertexCount;\n  \n  float u = x / (width - 1.0);\n  float v = y / (width - 1.0);\n  \n  float xOffset = cos(time + y * 0.1) * 0.2;\n  float yOffset = sin(time + x * 0.1) * 0.2 + 1.0;\n  \n  float ux = u * 2.0 - 1.0 + xOffset;\n  float vy = v * 2.0 - 1.0 + yOffset;\n  \n  \n  // Donde debería estar el vértice\n  gl_Position = vec4(ux, vy, sin(time), 1.0);\n  // Para color, vector 4\n  v_color= vec4(sin(time), cos(time), 1.0, 1.0);\n  \n  // Cambiar el tamaño de los puntos\n  gl_PointSize = 3.0;\n  \n}\n*/\n\n\n\n/*\nLo del profe\nvoid main() \n{\n  float width = 20.0;\n  float x = mod(vertexId, width);\n  float y = floor(vertexId / width);\n  float line = vertexId/vertexCount;\n  \n  float u = x / (width - 1.0);\n  float v = y / (width - 1.0);\n  \n  float xOffset = cos(time + y * 0.2) * 0.1;\n  float yOffset = sin(time + x * 0.3) * 0.1;\n  \n  float ux = u * 2.0 - 1.0 + xOffset;\n  float vy = v * 2.0 - 1.0 + yOffset;\n  \n  \n  // Donde debería estar el vértice\n  gl_Position = vec4(ux, vy, 0, 1.0);\n  // Para color, vector 4\n  v_color= vec4(sin(time), cos(time), 1.0, 1.0);\n  \n  // Cambiar el tamaño de los puntos\n  gl_PointSize = 10.0;\n  \n}\n*/\n\n\n/*\nTriangulo strip 1\nvoid main() \n{\n  float width = 2.0;\n  float x = floor(vertexId / 2.0);\n  float y = mod(vertexId + 1.0, 2.0);\n  //float y = floor(vertexId / width);\n  \n  float u = x / 1.0;\n  float v = y / 1.0;\n  \n  float tamano = 1.0 / vertexCount;\n  \n  float ux = u * 0.1;\n  float vy = v * 0.1;\n  \n \n  // Donde debería estar el vértice\n  gl_Position = vec4(ux, vy, 0, 1.0);\n  // Para color, vector 4\n  v_color= vec4(sin(time), cos(time), 1.0, 1.0);\n  \n  // Cambiar el tamaño de los puntos\n  gl_PointSize = 1.0;\n  \n}\n\n*/"
  },
  "screenshotURL": "data/images/images-48umvzhu16i3pnh1t-thumbnail.jpg",
  "hasSound": true,
  "views": "6",
  "likes": "0",
  "revisionId": "3ep755gpzLsz4AcuN"
}