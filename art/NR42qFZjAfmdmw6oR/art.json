{
  "_id": "NR42qFZjAfmdmw6oR",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1550397617925"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1550657363827"
    }
  },
  "origId": "6329mueSGExenMjbN",
  "name": "iblot",
  "notes": "",
  "rank": {
    "$numberDouble": "10.250851847769148"
  },
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":72586,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/thrillkillkult/the-chains-of-fame\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"/*\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n*/\\n\\n\\n\\n\\n#define PI radians(180.)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nmat4 rotX(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      1, 0, 0, 0,\\n      0, c, s, 0,\\n      0, -s, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotY(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotZ(float angleInRadians) {\\n    float s = sin(angleInRadians);\\n    float c = cos(angleInRadians);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\nmat4 trInv(mat4 m) {\\n  mat3 i = mat3(\\n    m[0][0], m[1][0], m[2][0], \\n    m[0][1], m[1][1], m[2][1], \\n    m[0][2], m[1][2], m[2][2]);\\n  vec3 t = -i * m[3].xyz;\\n    \\n  return mat4(\\n    i[0], t[0], \\n    i[1], t[1],\\n    i[2], t[2],\\n    0, 0, 0, 1);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(\\n    m[0][0], m[1][0], m[2][0], m[3][0], \\n    m[0][1], m[1][1], m[2][1], m[3][1],\\n    m[0][2], m[1][2], m[2][2], m[3][2],\\n    m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  #if 1\\n  return inverse(lookAt(eye, target, up));\\n  #else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif\\n  \\n}\\n\\n\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\n// times 2 minus 1\\nfloat t2m1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\n// times .5 plus .5\\nfloat t5p5(float v) {\\n  return v * 0.5 + 0.5;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\n\\n// adapted from http://stackoverflow.com/a/26127012/128511\\n\\nvec3 fibonacciSphere(float samples, float i) {\\n  float rnd = 1.;\\n  float offset = 2. / samples;\\n  float increment = PI * (3. - sqrt(5.));\\n\\n  //  for i in range(samples):\\n  float y = ((i * offset) - 1.) + (offset / 2.);\\n  float r = sqrt(1. - pow(y ,2.));\\n\\n  float phi = mod(i + rnd, samples) * increment;\\n\\n  float x = cos(phi) * r;\\n  float z = sin(phi) * r;\\n\\n  return vec3(x, y, z);\\n}\\n\\n\\nvoid getCirclePoint(const float numEdgePointsPerCircle, const float id, const float inner, const float start, const float end, out vec3 pos) {\\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\\n  float ux = floor(id / 6.) + mod(id, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\\n  float u = ux / numEdgePointsPerCircle;\\n  float v = mix(inner, 1., vy);\\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\\n  float s = sin(a);\\n  float c = cos(a);\\n  float x = c * v;\\n  float y = s * v;\\n  float z = 0.;\\n  pos = vec3(x, y, z);  \\n}\\n\\n\\nvoid main() {\\n  float minEdge = 16.;\\n  float maxEdge = 16.0;\\n  float NUM_EDGE_POINTS_PER_CIRCLE = floor(mix(minEdge, maxEdge, sin(time * 7.) * .5 + .5));\\n  float mv = (NUM_EDGE_POINTS_PER_CIRCLE - minEdge) / (maxEdge - minEdge);\\n  float NUM_POINTS_PER_CIRCLE = (NUM_EDGE_POINTS_PER_CIRCLE * 6.0);\\n  float NUM_CIRCLES_PER_GROUP = 1.0;\\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\\n  float groupId = floor(circleId / NUM_CIRCLES_PER_GROUP);\\n  float pointId = mod(vertexId, NUM_POINTS_PER_CIRCLE);\\n  float sliceId = mod(floor(vertexId / 6.), 2.);\\n  float side = mix(-1., 1., step(0.5, mod(circleId, 2.)));\\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\\n  float numGroups = floor(numCircles / NUM_CIRCLES_PER_GROUP); \\n  float cu = circleId / numCircles;\\n  float gv = groupId / numGroups;\\n  float cgId = mod(circleId, NUM_CIRCLES_PER_GROUP);\\n  float cgv = cgId / NUM_CIRCLES_PER_GROUP;\\n  float ncgv = 1. - cgv;\\n  \\n  float aspect = resolution.x / resolution.y;\\n\\n  float tm = time - cgv * 0.2;\\n  float su = hash(groupId);\\n  float s = texture2D(sound, vec2(mix(0.01, 0.04, abs(cu * 2. - 1.)), 0.)).a; \\n  float s2 = texture2D(sound, vec2(0.125, abs(cu * 2. - 1.) * .1)).a; \\n  \\n  vec3 pos;\\n  float inner = 0.;\\n  float start = 0.;\\n  float end   = 1.;\\n  getCirclePoint(NUM_EDGE_POINTS_PER_CIRCLE, pointId, inner, start, end, pos); \\n  pos.z = cgv;\\n  \\n  // vec3 loc = fibonacciSphere(numGroups, groupId);\\n  vec3 loc = normalize(vec3(hash(groupId * 0.123), hash(groupId * .747), hash(groupId * .311)) * 2. - 1.);\\n  float rd = 50.;\\n  vec3 eye = vec3(0,0,10);//rd);//sin(time * 0.19) * rd, sin(time * 0.21) * 0., cos(time * 0.19) * rd);\\n  float t = time;\\n  vec3 target = vec3(0,0,0);//vec3(sin(t * .1) * 20., sin(t * 0.3) * 10., 0);//vec3(sin(time * 0.17), sin(time * 0.13), -10);\\n  vec3 up = vec3(0,1,0); //vec3(sin(time * 0.3) * 0.2, 1, 0);\\n  \\n  mat4 pmat = persp(radians(45.), aspect, 1., 200.);\\n  mat4 vmat = cameraLookAt(eye, target, up);\\n    \\n  \\n  float sv =  pow(s, .5);\\n\\n  mat4 wmat = ident();\\n\\n  wmat *= rotZ(cu * PI * 2. + sv);\\n  wmat *= scale(vec3(.1, mix(0., 8., pow(s, 5.)), 1));\\n  wmat *= trans(vec3(0, 1.5, cu));\\n  \\n  mat4 mvMat = vmat * wmat;\\n  gl_Position = pmat * mvMat * vec4(pos, 1);\\n  gl_PointSize = 4.;\\n  \\n  \\n  float sl = step(0.8, s);\\n  float hue = time * 0.1 + mix(s2 * .2 + .4, 1., sl);\\n  float sat = mix(1., 1., sl);\\n  float val = 1.;pow(s * 1.25, 20.) + .3;// + mix(.0, 1., mod(groupId, 2.));\\n    \\n  \\n  vec3 nrm = normalize((wmat * vec4(0,0,1,0)).xyz);\\n  vec3 litDir = normalize(vec3(2,2,1));\\n  float lt = 1.0;;\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)) * lt, 1);\\n  \\n  v_color.a = mix(.1, .2, s);\\n  v_color.rgb *= v_color.a;  \\n}\\n\"}",
  "screenshotURL": "data/images/images-kqun6djr5u11njmpm-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "223"
  },
  "likes": {
    "$numberInt": "7"
  },
  "revisionId": "63os3CMsR9mXKRxKg"
}