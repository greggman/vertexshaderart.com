{
  "_id": "mDEaiqSfNT6Lxq4A7",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1448053220374"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1448053220374"
    }
  },
  "origId": "cHiMN4E55KKH9p3L3",
  "name": "gears",
  "rank": {
    "$numberDouble": "1.430287601003972"
  },
  "private": true,
  "username": "gman",
  "settings": "{\"num\":14400,\"mode\":\"TRIANGLES\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0.6039215686274509,0.5137254901960784,1],\"shader\":\"/*\\n                     __                        .__                .___                          __   \\n___  __ ____________/  |_  ____ ___  ___  _____|  |__ _____     __| _/________________ ________/  |_ \\n\\\\  \\\\/ // __ \\\\_  __ \\\\   __\\\\/ __ \\\\\\\\  \\\\/  / /  ___/  |  \\\\\\\\__  \\\\   / __ |/ __ \\\\_  __ \\\\__  \\\\\\\\_  __ \\\\   __\\\\\\n \\\\   /\\\\  ___/|  | \\\\/|  | \\\\  ___/ >    <  \\\\___ \\\\|   Y  \\\\/ __ \\\\_/ /_/ \\\\  ___/|  | \\\\// __ \\\\|  | \\\\/|  |  \\n  \\\\_/  \\\\___  >__|   |__|  \\\\___  >__/\\\\_ \\\\/____  >___|  (____  /\\\\____ |\\\\___  >__|  (____  /__|   |__|  \\n           \\\\/                 \\\\/      \\\\/     \\\\/     \\\\/     \\\\/      \\\\/    \\\\/           \\\\/             \\n\\n*/\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n#define PI radians(180.)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\n#define NUM_EDGE_POINTS_PER_CIRCLE 48.\\n#define NUM_POINTS_PER_CIRCLE (NUM_EDGE_POINTS_PER_CIRCLE * 6.) \\nvoid getCirclePoint(const float id, out vec3 pos) {\\n  float outId = id - floor(id / 3.) * 2. - 1.;   // 0 1 2 3 4 5 6 7 8 .. 0 1 2, 1 2 3, 2 3 4\\n  float ux = floor(id / 6.) + mod(id, 2.);//outId / (NUM_EDGE_POINTS_PER_CIRCLE - 1.);\\n  float vy = mod(floor(id / 2.), 2.);\\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\\n  float v = mix(0.5, 1., vy);\\n  float a = u * PI * 2.;\\n  float s = sin(a);\\n  float c = cos(a);\\n  float x = s * v;\\n  float y = c * v;\\n  float z = 0.;\\n  pos = vec3(x, y, z);  \\n}\\n\\nfloat goop(float t) {\\n  return sin(t) + sin(t * 0.27) + sin(t * 0.13) + sin(t * 0.73);\\n}\\n\\nvoid main() {\\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\\n  float cu = circleId / numCircles;\\n  vec3 pos;\\n  getCirclePoint(vertexId, pos); \\n  \\n  float sideId = floor(circleId / 2.);// + floor(time * 10.);\\n  float side = mix(-1., 1., step(0.5, mod(circleId, 2.)));\\n  vec3 offset = vec3(hash(sideId), m1p1(hash(sideId * 0.37)), 0);\\n  offset.x += goop(sideId + time) * 0.1;\\n  offset.y += goop(sideId + time * 1.13) * 0.1;\\n  offset.x *= side;\\n  vec3 aspect = vec3(1, resolution.x / resolution.y, 1);\\n  \\n  float snd = 0.;\\n\\n  mat4 mat = ident(); \\n  mat *= scale(aspect);\\n  mat *= trans(offset);\\n  mat *= uniformScale(mix(0.1, 0.2, hash(sideId)) + pow(snd, 5.0) * 0.1);\\n  gl_Position = vec4((mat * vec4(pos, 1)).xyz, 1);\\n  gl_PointSize = 4.;\\n\\n  float hue = mix(0.3, 0.8, fract(sideId * 0.79));\\n  float sat = 0.5;\\n  float val = 0.8;\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);\\n}\"}",
  "screenshotURL": "data/images/images-qq4t22ph8jayug9dz-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "3"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "iovWdxN3TnJ4AhcP3",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}