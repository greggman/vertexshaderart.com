{
  "_id": "4FQ77YanjkTRoSWip",
  "owner": {
    "_id": "QoD9RbGSvXSj3mbvm",
    "createdAt": {
      "$date": {
        "$numberLong": "1548089123470"
      }
    },
    "profile": {
      "name": "kesson",
      "avatarUrl": "https://avatars.githubusercontent.com/KessonDalef?s=200"
    },
    "username": "kessondalef"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1548100689101"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1548100689101"
    }
  },
  "origId": "nL6YpkW8YvGKNEKtj",
  "name": "point cloud vs spheres",
  "notes": "",
  "rank": {
    "$numberDouble": "1.9865331893265339"
  },
  "private": false,
  "unlisted": true,
  "username": "kessondalef",
  "avatarUrl": "https://avatars.githubusercontent.com/KessonDalef?s=200",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// 2D Random\\nfloat random (in vec2 st) {\\n    return fract(sin(dot(st.xy,\\n                         vec2(12.9898,78.233)))\\n                 * 43758.5453123);\\n}\\n\\n// 2D Noise based on Morgan McGuire @morgan3d\\n// https://www.shadertoy.com/view/4dS3Wd\\nfloat noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners percentages\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\nmat4 rotateX(float angle) {\\n  float s = sin(angle);\\n  float c = cos(angle);\\n  \\t\\n  return mat4( \\n    1, 0, 0, 0,\\n    0, c, s, 0,\\n    0, -s, c, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 rotateY(float angle) {\\n    float s = sin(angle);\\n    float c = cos(angle);\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\nmat4 rotateZ(float angle) {\\n    float s = sin(angle);\\n    float c = cos(angle);\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nvec3 posf2(float t, float i) {\\n\\treturn vec3(\\n      //sin(t+i*.9553) +\\n      //sin(t*0.0311+i) +\\n      cos(t*.4+i*1.53) +\\n      sin(t*1.84+i*.76) + \\n      noise(vec2(t, i)),\\n      //sin(t+i*.79553+2.1) +\\n      //sin(t*1.311+i*1.1311+2.1) +\\n      cos(t*1.4+i*1.353-2.1) +\\n      sin(t*1.84+i*.476-2.1) +\\n      noise(vec2(t*.3, i)),\\n      //sin(t+i*.5553-2.1) +\\n      //sin(t*1.311+i*1.1-2.1) +\\n      //cos(t*1.4+i*1.23+2.1) +\\n      sin(t*1.84+i*.36+2.1)// +\\n      //noise(vec2(t, i*))\\n\\t)*.2;\\n}\\n\\nvec3 posf0(float t) {\\n  return posf2(t,-1.)*.5;\\n}\\n\\nvec3 posf(float t, float i) {\\n  return posf2(t*.03,i) + posf0(t);\\n}\\n\\nvec3 push(float t, float i, vec3 ofs, float lerpEnd) {\\n  vec3 pos = posf(t,i)+ofs;\\n  \\n  vec3 posf = fract(pos+.5)-.5;\\n  \\n  float l = length(posf)*2.;\\n  return (- posf + posf/l)*(1.-smoothstep(lerpEnd,1.,l));\\n}\\n\\nvoid main() {\\n  // more or less random movement\\n  float t = time*.1;\\n  float i = vertexId+sin(vertexId)*100.;\\n\\n  vec3 pos = posf(t,i);\\n  vec3 ofs = vec3(0);\\n  for (float f = -10.; f < 0.; f++) {\\n\\t  ofs += push(t+f*.05,i,ofs,2.-exp(-f*.1));\\n  }\\n  ofs += push(t,i,ofs,.999);\\n  \\n  \\n  \\n  pos -= posf0(t);\\n  \\n  pos += ofs;\\n  \\n  \\n  pos.yz *= mat2(.8,.6,-.6,.8);\\n  pos.xz *= mat2(.8,.6,-.6,.8);\\n  \\n  pos.x *= resolution.y/resolution.x;\\n  pos.z *= resolution.y/resolution.x;\\n  \\n  mat4 rotation = rotateY(time*0.1);\\n  vec4 rot = vec4(pos.xyz, 1.0) * rotation;\\n  \\n\\n  pos.z += .5;\\n  \\n  rot *= 2.0;\\n  \\n  //pos.xy *= .6/pos.z;\\n  \\n  //gl_Position = vec4(pos.x, pos.y*resolution.x/resolution.y, pos.z*.1, 1);\\n  gl_Position = vec4(rot.xyz, 1);\\n  gl_PointSize = 1.;\\n\\n  v_color = vec4(1.0, 1.0, 1.0, 1.0);\\n}\"}",
  "screenshotURL": "data/images/images-ljx7nl9r2q1vp21md-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "11"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "2wgjj2Adrgfg2rwhq"
}