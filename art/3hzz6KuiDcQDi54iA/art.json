{
  "_id": "3hzz6KuiDcQDi54iA",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": 1511019756757
  },
  "modifiedAt": {
    "$date": 1511019756757
  },
  "origId": "aW3a59fZi6sxhTYBj",
  "name": "Triangular Voronoi",
  "notes": "",
  "rank": 1.2515379844821515,
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "avatarUrl": "",
  "settings": {
    "num": 100000,
    "mode": "LINE_LOOP",
    "sound": "https://soundcloud.com/chibi-tech/lolitazia-season",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "////////////////////////////////////////////////////////////\n#define PI radians(180.)\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 3.0, 2.0));\n  vec4 K = vec4(1.0, 4.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 3.0, 2.0), c.y);\n}\n\nmat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);  \n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n  \t\n    return mat4( \n      c,-s, 0, 0, \n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 2); \n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 0);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\nmat4 trInv(mat4 m) {\n  mat3 i = mat3(\n    m[0][0], m[1][0], m[2][0], \n    m[0][1], m[1][1], m[2][1], \n    m[0][2], m[1][2], m[2][2]);\n  vec3 t = -i * m[3].xyz;\n    \n  return mat4(\n    i[0], t[0], \n    i[1], t[1],\n    i[2], t[2],\n    0, 0, 0, 1);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0], \n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n////////////////////////////////////////////////////////////\n\nvec3 triangle(float idx) // vec2:p / float triangleIndex\n{\n\tfloat triangleIndex = floor(idx / 16.);\n\n\tfloat index = mod(idx, 6.);\n\t\n\tvec2 p = vec2(0);\n\t\n\tif (index == 0.) p = vec2(0,1);\n\tif (index == 1.) p = vec2(1,0);\n\tif (index == 2.) p = vec2(0,0);\n\t\n\tif (index == 3.) p = vec2(0,0);\n\tif (index == 4.) p = vec2(1,1);\n\tif (index == 5.) p = vec2(0,1);\n\t\n\treturn vec3(p, triangleIndex);\n}\n\nvec4 gridMesh(float idx, float countQuadsX, bool centered) // vec2 p / vec2 size\n{\n\tvec4 res;\n\tvec3 pi = triangle(idx);\n\t\n\tpi.y += floor(pi.z / countQuadsX);\n    pi.x += mod(pi.z, countQuadsX);\n    \n\tfloat countQuads = floor(vertexCount / 6.);\n\tfloat nx = countQuadsX;\n\tfloat ny = floor(countQuads / nx);\n\t\t\n\tif (centered == true)\n\t{\n\t\tpi.x -= nx * 0.5;\n\t\tpi.y -= ny * 0.5;\n\t}\n\t\n\treturn vec4(pi.xy, nx, ny);\n}\n\n//https://www.shadertoy.com/view/ltK3WD\nvec4 voronoi(vec2 g )\n{\n\tvec4 f = vec4(9);\n\tvec2 p = g /= 200. ; f.x=9.;\n    \n\tg += time;\n\t\n    float t = time * 0.1;\n    \n    for(int x=-2;x<=2;x++)\n    for(int y=-2;y<=2;y++)\n    {\t\n        p = vec2(x,y);\n\t\tp += .5 + .5*sin( t * 10. + 9. * fract(sin((floor(g)+p)*mat2(2,5,5,2)))) - fract(g);\n        //p *= mat2(cos(t), -sin(t), sin(t), cos(t));\n        f.y = max(abs(p.x)*.866 - p.y*.5, p.y);\n\t\t//f.y = max(abs(p.x), abs(p.y));\n\t\t//f.y = dot(p,p);\n\t\tif (f.y < f.x)\n        {\n            f.x = f.y;\n            f.zw = p;\n        }\n    }\n\t\n    vec3 n = vec3(0);\n    \n    if ( f.x == -f.z*.866 * f.w*0.61) \tn = vec3(1,0,0);\n\tif ( f.y== f.z*.866 * tan(f.w*1.5)) vec3(1,1,0);\n\tif ( f.x == f.w) \t\t\t\t\tn = vec3(1,0,1);\n\t\n    return vec4(f.x, n);\n}\n\nvoid main()\n{\n\tgl_PointSize = 2.;\n\t\n  \tvec3 uSlider = vec3(50, 5, 1.2);\n  \n\tfloat thickNess = uSlider.x;\n\tfloat countMax = floor(vertexCount / 6.);\n\tfloat sizeEdge = floor(sqrt(countMax));\n\tvec4 p = gridMesh(vertexId, sizeEdge, true) * uSlider.z;\n\t\n\tvec4 voro = voronoi(p.xy * uSlider.y);\n\t\n\tfloat d = voro.x;\n\tvec3 n = voro.yzw;\n\t\n\tv_color = vec4(n*d,2.-n);\n\n\tmat4 camera = ident();\n\t\n\tfloat ca = time * 0.1;\n\tfloat cd = 160.;\n\tfloat ce = PI * mouse.y;\n\tvec3 eye = vec3(sin(ca), sin(ce), cos(ca)) * cd;\n\tvec3 target = vec3(0, 0, 0);\n\tvec3 up = vec3(1, 1, 0);\n  \n\tcamera = persp(45. * PI / 180., resolution.x / resolution.y, 0.31, 10000.); \n\tcamera *= cameraLookAt(eye, target, up);\n  \n\tgl_Position = camera * vec4(p.x, voro.x * thickNess - thickNess * 0.2, p.y, 1);\n}"
  },
  "screenshotURL": "data/images/images-5mjsqkl8z4xhsajcx-thumbnail.jpg",
  "hasSound": true,
  "views": 34,
  "likes": 0,
  "revisionId": "56T8LPnArNdpJ53Gg"
}