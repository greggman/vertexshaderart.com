{
  "_id": "HW98dGDbChYw2FjpS",
  "owner": {
    "username": "anon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1449637404873"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1449637404873"
    }
  },
  "origId": null,
  "name": "feels like debris",
  "rank": {
    "$numberDouble": "10.66916719834979"
  },
  "private": false,
  "unlisted": false,
  "username": "-anon-",
  "settings": "{\"num\":50400,\"mode\":\"TRI_STRIP\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0.5725490196078431,0.5725490196078431,0.5725490196078431,1],\"shader\":\"#define PI05 1.570796326795\\n#define PI   3.1415926535898\\n\\nvec3 hash3(vec3 v) {\\n  return fract(sin(v * vec3(43758.5453123, 12345.6789012,76543.2109876)));\\n}\\n\\nvec3 rotX(vec3 p, float rad) {\\n  vec2 sc = sin(vec2(rad, rad + PI05));\\n  vec3 rp = p;\\n  rp.y = p.y * sc.y + p.z * -sc.x;\\n  rp.z = p.y * sc.x + p.z *  sc.y;\\n  return rp;\\n}\\n\\nvec3 rotY(vec3 p, float rad) {\\n  vec2 sc = sin(vec2(rad, rad + PI05));\\n  vec3 rp = p;\\n  rp.x =  p.x *  sc.y + p.z *  sc.x;\\n  rp.z =  p.x * -sc.x + p.z *  sc.y;\\n  return rp;\\n}\\n\\nvec3 rotZ(vec3 p, float rad) {\\n  vec2 sc = sin(vec2(rad, rad + PI05));\\n  vec3 rp = p;\\n  rp.x =  p.x *  sc.x + p.y * sc.y;\\n  rp.y =  p.x * -sc.y + p.y * sc.x;\\n  return rp;\\n}\\n\\nvec4 perspective(vec3 p, float fov, float near, float far) {\\n  vec4 pp = vec4(p, -p.z);\\n  pp.xy *= vec2(resolution.y / resolution.x, 1.0) / tan(radians(fov * 0.5));\\n  pp.z = (-p.z * (far + near) - 2.0 * far * near) / (far - near);\\n  return pp;\\n}\\n\\nvec3 lookat(vec3 p, vec3 eye, vec3 look, vec3 up) {\\n  vec3 z = normalize(eye - look);\\n  vec3 x = normalize(cross(up, z));\\n  vec3 y = cross(z, x);\\n  vec4 pp = mat4(x.x, y.x, z.x, 0.0, x.y, y.y, z.y, 0.0, x.z, y.z, z.z, 0.0, 0.0, 0.0, 0.0, 1.0) * \\n    mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -eye.x, -eye.y, -eye.z, 1.0)\\n    * vec4(p, 1.0);\\n  return pp.xyz;\\n}\\n\\nvec3 lissajous(vec3 a, float t) {\\n  return vec3(sin(t * a.x), sin(t * a.y), cos(t * a.z));\\n}\\n\\n// vid : 0 to 36 (6 faces * 6 vertices), ni: (normal.xyz, faceId)\\n#define kCubeVertexCount 36.0\\nvec3 cubeVertex(float vid, out vec4 ni) {\\n  float faceId = floor(vid / 6.0);\\n  float vtxId = mod(vid, 6.0);\\n  vec2 fp;\\n  vec3 p;\\n  \\n  if(vtxId <= 1.0) {\\n    fp = vec2(1.0, 1.0);\\n  }\\n  else if(vtxId == 2.0) {\\n    fp = vec2(-1.0, 1.0);\\n  }\\n  else if(vtxId == 3.0) {\\n    fp = vec2(1.0, -1.0);\\n  }\\n  else {\\n    fp = vec2(-1.0, -1.0);\\n  }\\n  \\n  if(faceId == 0.0) {\\n    // front\\n    p = vec3(fp.x, fp.y, 1.0);\\n    ni = vec4(0.0, 0.0, 1.0, faceId);\\n  }\\n  else if(faceId == 1.0) {\\n    // back\\n    p = vec3(-fp.x, fp.y, -1.0);\\n    ni = vec4(0.0, 0.0, -1.0, faceId);\\n  }\\n  else if(faceId == 2.0) {\\n    // top\\n    p = vec3(fp.x, 1.0, -fp.y);\\n    ni = vec4(0.0, 1.0, 0.0, faceId);\\n  }\\n  else if(faceId == 3.0) {\\n    // bottom\\n    p = vec3(fp.x, -1.0, fp.y);\\n    ni = vec4(0.0, 0.0, -1.0, faceId);\\n  }\\n  else if(faceId == 4.0) {\\n    // right\\n    p = vec3(-1.0, fp.y, -fp.x);\\n    ni = vec4(-1.0, 0.0, 0.0, faceId);\\n  }\\n  else {\\n    // left\\n    p = vec3(1.0, fp.y, fp.x);\\n    ni = vec4(1.0, 0.0, 0.0, faceId);\\n  }\\n  \\n  return p;\\n}\\n\\nvec3 shade(vec3 eye, vec3 p, vec3 n, vec3 dfscol, float amb, vec2 spec) {\\n  vec3 rgb;\\n  vec3 lit = normalize(vec3(1.0, 1.0, 4.0));\\n  \\n  float diffuse = max(0.0, dot(n, lit)) * (1.0 - amb) + amb;\\n  \\n  vec3 h = normalize(normalize(eye - p) + lit);\\n  float specular = 0.0;\\n  if(diffuse > 0.0) {\\n    specular = max(0.0, pow(dot(n, h), spec.x));\\n  }\\n  \\n  rgb = diffuse * dfscol + specular * spec.y;\\n  \\n  return rgb;\\n}\\n\\nvoid main() {\\n  float shapeCount = floor(vertexCount / kCubeVertexCount);\\n  float shapeId = floor(vertexId / kCubeVertexCount);\\n  float shapeVertexId = mod(vertexId, kCubeVertexCount);\\n  float lineId = mod(shapeId, 3.0);\\n  \\n  vec3 lineFactor;\\n  vec3 color;\\n  \\n  if(lineId == 0.0) {\\n    lineFactor = vec3(4.1, 6.7, 2.3);\\n    color = vec3(1.0, 0.0, 0.0);\\n  }\\n  else if(lineId == 1.0) {\\n    lineFactor = vec3(4.8, 5.2, 8.3);\\n    color = vec3(0.0, 1.0, 0.0);\\n  }\\n  else {\\n    lineFactor = vec3(6.1, 1.2, 3.6);\\n    color = vec3(0.0, 0.0, 1.0);\\n  }\\n  \\n  float t = shapeId / shapeCount;\\n  \\n  float aspect = resolution.x / resolution.y;\\n  vec4 cubeni;\\n  vec3 cubep = cubeVertex(shapeVertexId, cubeni) * 0.04;\\n  \\n  vec3 cubeHash = hash3(vec3(log(shapeId)));\\n  vec3 cubeOffset = (cubeHash * 2.0 - 1.0) * 0.1;\\n  vec3 cubeRot = hash3(cubeHash) * time * 2.0;\\n  \\n  cubep = rotX(rotY(rotZ(cubep, cubeRot.z), cubeRot.y), cubeRot.z);\\n  cubeni.xyz = rotX(rotY(rotZ(cubeni.xyz, cubeRot.z), cubeRot.y), cubeRot.z);\\n  \\n  cubep = lissajous(lineFactor, (t + time * 0.1) * 2.0) * vec3(aspect, 1.0, aspect) +  (cubep + cubeOffset);\\n  \\n  /*\\n  if(cubeni.w == 0.0) {\\n    color = vec3(1.0, 0.0, 0.0);\\n  }\\n  else if(cubeni.w == 1.0) {\\n    color = vec3(0.0, 1.0, 0.0);\\n  }\\n  else if(cubeni.w == 2.0) {\\n    color = vec3(0.0, 0.0, 1.0);\\n  }\\n  else if(cubeni.w == 3.0) {\\n    color = vec3(1.0, 1.0, 0.0);\\n  }\\n  else if(cubeni.w == 4.0) {\\n    color = vec3(1.0, 0.0, 1.0);\\n  }\\n  else {\\n    color = vec3(0.0, 1.0, 1.0);\\n  }\\n  */\\n  \\n  //vec3 eye = rotX(rotY(vec3(0.0, 0.0, 3.0), -mouse.x * 2.0), mouse.y);\\n  vec3 eye = vec3(0.0, 0.0, 3.0);\\n  \\n  color = shade(eye, cubep, cubeni.xyz, vec3(0.5 + cubeHash * 0.05), 0.1, vec2(64.0, 0.8));\\n  \\n  vec3 p = lookat(cubep, eye, vec3(0.0), vec3(0.0, 1.0, 0.0));\\n  gl_Position = perspective(p, 60.0, 0.1, 10.0);\\n  gl_PointSize = 20.0;\\n  \\n  v_color = vec4(color, 1.0);\\n}\"}",
  "screenshotURL": "data/images/images-6y9bmfj7t8dbgprml-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "1067"
  },
  "likes": {
    "$numberInt": "5"
  },
  "revisionId": "rNC8A2o8vt5wPxMan"
}