{
  "_id": "xdgnE3FvNBNtDFynG",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1523538621553"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1527465864951"
    }
  },
  "origId": "Nd7RLTNMwo9xcqBgZ",
  "name": "spiral blue def",
  "notes": "http://glslsandbox.com/e#38484.0",
  "rank": {
    "$numberDouble": "1.5357696475521487"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":50000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/neokontrol/popek-vs-neokontrol-ufos-are-real-176bpm\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"//Created by K Machine from http://glslsandbox.com/e#46283.0\\nvec2 surfacePosition;\\nvec4 simFragCoord;\\nvec2 vertexResolution = resolution;\\n\\n//precision  mediump float;\\n\\n\\n//uniform  float time;\\n//uniform  vec2 mouse;\\n//uniform  vec2 vertexResolution;\\n\\n////CAMERA\\n//Functions used for camera\\n#define PI radians(180.)\\n\\nmat4 inverse(mat4 m) {\\n  float\\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n      b00 = a00 * a11 - a01 * a10,\\n      b01 = a00 * a12 - a02 * a10,\\n      b02 = a00 * a13 - a03 * a10,\\n      b03 = a01 * a12 - a02 * a11,\\n      b04 = a01 * a13 - a03 * a11,\\n      b05 = a02 * a13 - a03 * a12,\\n      b06 = a20 * a31 - a21 * a30,\\n      b07 = a20 * a32 - a22 * a30,\\n      b08 = a20 * a33 - a23 * a30,\\n      b09 = a21 * a32 - a22 * a31,\\n      b10 = a21 * a33 - a23 * a31,\\n      b11 = a22 * a33 - a23 * a32,\\n\\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  return mat4(\\n      a11 * b11 - a12 * b10 + a13 * b09,\\n      a02 * b10 - a01 * b11 - a03 * b09,\\n      a31 * b05 - a32 * b04 + a33 * b03,\\n      a22 * b04 - a21 * b05 - a23 * b03,\\n      a12 * b08 - a10 * b11 - a13 * b07,\\n      a00 * b11 - a02 * b08 + a03 * b07,\\n      a32 * b02 - a30 * b05 - a33 * b01,\\n      a20 * b05 - a22 * b02 + a23 * b01,\\n      a10 * b10 - a11 * b08 + a13 * b06,\\n      a01 * b08 - a00 * b10 - a03 * b06,\\n      a30 * b04 - a31 * b02 + a33 * b00,\\n      a21 * b02 - a20 * b04 - a23 * b00,\\n      a11 * b07 - a10 * b09 - a12 * b06,\\n      a00 * b09 - a01 * b07 + a02 * b06,\\n      a31 * b01 - a30 * b03 - a32 * b00,\\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n  vec3 zAxis = normalize(eye - target);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    eye, 1);\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n  //#if 1\\n  return inverse(lookAt(eye, target, up));\\n  /*#else\\n  vec3 zAxis = normalize(target - eye);\\n  vec3 xAxis = normalize(cross(up, zAxis));\\n  vec3 yAxis = cross(zAxis, xAxis);\\n\\n  return mat4(\\n    xAxis, 0,\\n    yAxis, 0,\\n    zAxis, 0,\\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n  #endif*/\\n  \\n}\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n  float f = tan(PI * 0.5 - 0.5 * fov);\\n  float rangeInv = 1.0 / (zNear - zFar);\\n\\n  return mat4(\\n    f / aspect, 0, 0, 0,\\n    0, f, 0, 0,\\n    0, 0, (zNear + zFar) * rangeInv, -1,\\n    0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n//END CAMERA\\n\\nvec2 R = vertexResolution;\\nvec2 Offset;\\nvec2 Scale=vec2(0.001,0.002);\\nfloat Saturation = 0.8; // 0 - 1;\\n\\n\\nvec3 lungth(vec2 x,vec3 c){\\n       return vec3(length(x+c.r),length(x+c.g),length(c.b));\\n}\\n\\nvoid main( void ) {float finalDesiredPointSize = 3.;\\nfloat maxFinalSquareSideSize = floor(sqrt(vertexCount));\\nfloat finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\\nfloat maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\\nvertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\\nfloat finalVertexCount = vertexResolution.x*vertexResolution.y;\\nfloat finalVertexId = mod(vertexId,finalVertexCount);\\nfloat x = mod(finalVertexId, vertexResolution.x);\\nfloat y = floor(finalVertexId / vertexResolution.x);\\nsimFragCoord = vec4(x,y,1.,1.);//simfragCoord will replace the gl_FragCoord of fragment shader\\nfloat u_i = (x /vertexResolution.x);\\nfloat v_i = (y /vertexResolution.y);\\nfloat sizeFactor = finalDesiredPointSize*vertexResolution.x/resolution.x;\\nfloat ux = sizeFactor*(u_i - 0.5);\\nfloat vy = sizeFactor*(v_i - 0.5);\\ngl_PointSize = finalDesiredPointSize;\\ngl_Position = vec4(ux, vy, 0., 1.);\\nsurfacePosition = vec2(ux,vy);\\n\\n\\t\\n\\tvec2 position = (simFragCoord.xy - vertexResolution * .5) / vertexResolution.yy;\\n\\tfloat th = atan(position.y, position.x) / (1.0 * 3.1415926);\\n\\tfloat dd = length(position) + 0.005;\\n\\tfloat d = 0.5 / dd + time;\\n\\t\\n    \\tvec2 x2 = simFragCoord.xy;\\n   \\tx2=x2*Scale*R/R.x;\\n    \\tx2+sin(x2.yx*sqrt(vec2(1,9)))/1.;\\n\\tx2+=sin(x2.yx*sqrt(vec2(73,5)))/5.;\\n    \\tx2+=sin(x2.yx*sqrt(vec2(93,7)))/3.;\\n\\t\\n\\tvec3 uv = vec3(th + d, th - d, th + sin(d) * 0.45);\\n\\tfloat a = 0.5 + cos(uv.x * 3.1415926 * 2.0) * 0.5;\\n\\tfloat b = 0.5 + cos(uv.y * 3.1415926 * 2.0) * 0.5;\\n\\tfloat c = 0.5 + cos(uv.z * 3.1415926 * 6.0) * 0.5;\\n\\tvec3 color = \\tmix(vec3(0.1, 0.5, 0.5), \\tvec3(0.1, 0.1, 0.2),  pow(a, 0.2)) * 3.;\\n\\tcolor += \\tmix(vec3(0.8, 0.2, 1.0), \\tvec3(0.1, 0.1, 0.2),  pow(b, 0.1)) * 0.75;\\n\\t//color += \\tmix(c2, \\t\\t\\tvec3(0.1, 0.2, 0.2),  pow(c, 0.1)) * 0.75;\\n\\n\\tv_color = vec4( (color * dd), 1.0);\\n                   \\n                   //gl_Position.x-= v_color.r/5.;\\n                   //gl_Position.y-= v_color.g/5.;\\n                   gl_Position.z-= v_color.b/2.;\\n                   \\n                   //camera\\n  float r  = 0.9;\\n  float tm = 1.5;//*time;\\n  float tm2 = 0.05*time;\\n  mat4 mat = persp(radians(60.0), resolution.x / resolution.y, 0.1, 10.0);\\n  vec3 eye = vec3(cos(tm) * r, sin(tm * 0.93) * r, sin(tm) * r);\\n  vec3 target = vec3(0);\\n  vec3 up = vec3(0., sin(tm2), cos(tm2));\\n  \\n  \\n  mat *= cameraLookAt(eye, target, up);\\ngl_Position*=mat;\\n}\"}",
  "screenshotURL": "data/images/images-ca9pl9hkltleuvfs5-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "17"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "Nue8nph35vtwGv6PW"
}