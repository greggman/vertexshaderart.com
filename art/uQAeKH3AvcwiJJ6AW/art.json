{
  "_id": "uQAeKH3AvcwiJJ6AW",
  "owner": {
    "_id": "yXJ6WCMQCSanfJTWk",
    "createdAt": {
      "$date": {
        "$numberLong": "1447692554526"
      }
    },
    "username": "dzozef",
    "profile": {
      "info": "tinkerer",
      "avatarUrl": "https://secure.gravatar.com/avatar/d6b044e92a377cd617762af9a488719d?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1448884846874"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1449247754850"
    }
  },
  "origId": null,
  "name": "billboarded blobs",
  "rank": {
    "$numberDouble": "1.8639806195531037"
  },
  "private": true,
  "unlisted": false,
  "username": "dzozef",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"float SIDE = 40.; // how many nodes on one side\\nfloat CUBESIZE = 0.1;// one node size\\nfloat NSCALE = 0.1;\\nfloat TSCALE = 2.2;\\n\\nvoid rotateX(inout vec3 p, float a) {\\n\\tfloat c,s;vec3 q=p;\\n\\tc = cos(a); s = sin(a);\\n\\tp.y = c * q.y - s * q.z;\\n\\tp.z = s * q.y + c * q.z;\\n}\\n\\nvec3 rotateY( vec3 p, float a )\\n{\\n    float sa = sin(a);\\n    float ca = cos(a);\\n    vec3 r;\\n    r.x = ca*p.x + sa*p.z;\\n    r.y = p.y;\\n    r.z = -sa*p.x + ca*p.z;\\n    return r;\\n}\\n\\n// noise from iq (https://www.shadertoy.com/view/4sfGzS)\\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\\nfloat noise( in vec3 x )\\n{\\n    vec3 p = floor(x);\\n    vec3 f = fract(x);\\n    f = f*f*(3.0-2.0*f);\\n\\t\\n    float n = p.x + p.y*157.0 + 113.0*p.z;\\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\\n}\\n\\nfloat noise4( in vec4 x )\\n{\\n\\treturn mix( noise( x.xyz ), noise( x.xyz + vec3(-2.1*sin(x.w*0.2),4.33*sin(x.w*0.43),2.3*sin(x.w*0.5)) ), 0.5 );\\n}\\n\\nvec3 GetPoint( float vertexid, out float color, out float psize )\\n{\\n\\tfloat node = vertexid;\\n\\tif (node > SIDE*SIDE*SIDE-1.) return vec3(0.0);\\n\\t// get the grid location\\n\\tfloat y = floor( node / (SIDE*SIDE) );\\n\\tfloat z = floor( mod( node, SIDE*SIDE ) / SIDE );\\n\\tfloat x = mod( mod( node, SIDE*SIDE ), SIDE );\\n\\t// first check if empty\\n  \\tvec4 npos = vec4( x, y, z, time*TSCALE ) * NSCALE;// + vec3( time, time/2., time /3. ) * TSCALE;\\n\\tfloat n = noise4( npos );\\n  \\tcolor = 0.0;\\n  \\tpsize = 0.0;\\n\\tif (n < 0.7 || n > 0.78) return vec3(0.);\\n\\n  \\tpsize = CUBESIZE * smoothstep( n, 0.7, 0.71 ) * 220.;\\n\\n\\tvec3 normal = normalize( vec3( n-noise4( npos+vec4(.01,.0,.0,.0) ), n-noise4( npos+vec4(.0,.01,.0,.0) ), n-noise4( npos+vec4(.0,.0,.01,.0) )  ) );\\n\\n  \\tnormal = rotateY( normal, -mouse.x*1.2-0.2 );\\n\\trotateX( normal, mouse.y*1.2-0.2 );\\n  \\t\\n  \\tvec3 light = vec3( 0.0, 1., -1. );\\n  \\tnormalize( light );\\n\\tcolor = abs( dot( normal, light ) )*0.5 + abs( dot( normal, -light ) )*0.1;\\n  \\n  \\tvec3 p = (vec3( x, y, z ) + vec3( -SIDE/2. ))* CUBESIZE;\\n\\tp = rotateY( p, -mouse.x*1.2-0.2 );\\n\\trotateX( p, mouse.y*1.2-0.2 );\\n\\n  \\t//float vid = mod( vertexid, 24. );\\n\\t//float sideid = floor( vid / 4. );\\n\\tfloat vid = mod( vertexid, 6. );\\n\\tvec3 d = vec3( 0.0 );\\n  \\tif (vid == 0. || vid == 3.)\\n    {\\n    \\td.x = -CUBESIZE;\\n    \\td.y = -CUBESIZE;\\n    }\\n  \\tif (vid == 1.)\\n    {\\n    \\td.x = CUBESIZE;\\n    \\td.y = -CUBESIZE;\\n    }\\n  \\tif (vid == 2. || vid == 4.)\\n    {\\n    \\td.x = CUBESIZE;\\n    \\td.y = CUBESIZE;\\n    }\\n  \\tif (vid == 5.)\\n    {\\n    \\td.x = -CUBESIZE;\\n    \\td.y = CUBESIZE;\\n    }\\n\\treturn p;// + d*0.5*(n-0.7)/0.13;\\n}\\n\\nvoid main()\\n{\\n\\tfloat col = 1.0;\\n  \\tfloat ps = 0.0;\\n\\tvec3 p = GetPoint( vertexId, col, ps );\\n\\tfloat origz = p.z;\\n\\tp += vec3( 0.0, 0, SIDE/7. );\\n\\tfloat fov = 1.1;\\n\\tgl_Position = vec4( p.xy*fov, 1.0/(-p.z-0.0), p.z );   \\n\\tgl_PointSize = ps;\\n\\tv_color = vec4(col,col,col,1.); //vec4(vec3(max( 0.0, origz)),1.);\\n}\"}",
  "screenshotURL": "data/images/images-tsn7v6m0mey89w9ol-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "6"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "T2z6JxdjaCQwqFipW",
  "avatarUrl": "https://secure.gravatar.com/avatar/d6b044e92a377cd617762af9a488719d?default=retro&size=200"
}