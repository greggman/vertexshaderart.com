{
  "_id": "YXfLo5Yw55muQ7MZn",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1468375901068"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1468375901068"
    }
  },
  "origId": "wJuenftt4G6XBy8x7",
  "name": "t-grid",
  "notes": "",
  "rank": {
    "$numberDouble": "1.2800674467182693"
  },
  "private": false,
  "unlisted": true,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":15238,\"mode\":\"LINES\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[1,1,1,1],\"shader\":\"#define PI radians(180.)\\n\\nvoid main() {\\n  float numQuads = floor(vertexCount / 4.);\\n  float quadId = floor(vertexId / 4.);\\n  float down = floor(sqrt(numQuads));\\n  float across = floor(numQuads / down);\\n  \\n  float gx = mod(quadId, across);\\n  float gy = floor(quadId / across);\\n  \\n  float vId = mod(vertexId, 4.);\\n  \\n  float x = gx + mod(vId, 2.) - step(3., vId);\\n  float y = gy + step(3., vId);\\n\\n  \\n  \\n  \\n  vec2 aspect = vec2(1, resolution.x / resolution.y);\\n  vec2 xy = vec2(x, y) / vec2(across, down) * 2. - 1.;\\n  \\n  vec2 sp = xy * aspect * 1.1;\\n  \\n  const int count = 60;\\n  for (int i = 0; i < count; ++i) {\\n    float iv = 1. - float(i) / float(count - 1);\\n    vec2 m = texture2D(touch, vec2(0, (float(i) + 0.5) / soundRes.y)).xy;\\n\\n    vec2 dm = m - sp;\\n    float dist = length(dm);\\n    float effect = mix(1., 0., clamp(dist * 3., 0., 1.));\\n    sp = sp - dm * pow(abs(effect), 2.5) * 0.5 * pow(iv, 5.);\\n  }\\n    \\n  \\n  \\n  gl_Position = vec4(sp, 0, 1);\\n\\n  v_color = vec4(vec3(0), 1);\\n}\"}",
  "screenshotURL": "data/images/images-n5suzffth9sqqycz0-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "97"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "PXMZ6YCzxC2AkjMhZ"
}