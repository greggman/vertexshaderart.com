{
  "_id": "qcXAqrGwABRk4ge5N",
  "owner": {
    "_id": "vkPwAHM8PnAebFPxW",
    "createdAt": {
      "$date": 1501857924166
    },
    "profile": {
      "name": "Macro Machines",
      "avatarUrl": "https://lh3.googleusercontent.com/-hZKcNaW8AT0/AAAAAAAAAAI/AAAAAAAAEGM/geaXegN2s9U/photo.jpg",
      "info": "axiom-crux.net macromachines.net"
    },
    "username": "macro"
  },
  "createdAt": {
    "$date": 1510548441651
  },
  "modifiedAt": {
    "$date": 1510548441651
  },
  "origId": "xTf82BxK4LCcHNgq6",
  "name": "Shadertoy Adapter",
  "notes": "wtf/how",
  "rank": 1.89031429251875,
  "private": false,
  "unlisted": true,
  "username": "macro",
  "avatarUrl": "https://lh3.googleusercontent.com/-hZKcNaW8AT0/AAAAAAAAAAI/AAAAAAAAEGM/geaXegN2s9U/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "TRIANGLES",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "\n// Silly Shadertoy adapter \n\n// based on https://www.shadertoy.com/view/Msl3Rn\n// chains and gears - @P_Malin\n\n// Shadertoy variables:\n#define iResolution vec2(1024.0, 1024.0)\n#define iGlobalTime time\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord );\n\n//#define RANDOM_POSITIONS\n\n#ifdef RANDOM_POSITIONS\n\n#define MOD3 vec3(.1031,.11369,.13787)\n#define MOD4 vec4(.1031,.11369,.13787, .09987)\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * MOD3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n#endif // RANDOM_POSITIONS\n\nvoid main() \n{  \n\tvec2 vDim = vec2( 160.0, 100.0 );\n\n\tfloat fQuadIndex = floor(vertexId / 6.0);//\n\n\tvec2 vUV;\n\n\tvUV.x = mod( fQuadIndex, vDim.x );\n\tvUV.y = fQuadIndex / vDim.x;\n\n\tvUV = vUV / vDim;\n  \n#ifdef RANDOM_POSITIONS\n  \tvUV = hash21( fQuadIndex );\n#endif // RANDOM_POSITIONS  \n\n\tfloat triVert = mod( vertexId, 6.0 );\n\tfloat quadVert = mod( vertexId, 3.0 );\n\n\tif( triVert >= 3.0 )\n\t{\n         quadVert = quadVert + 1.0;\n\t}\n\n\tvec2 vSize = 1.0 / vDim;\n\tif( quadVert < 0.5 )\n\t{\n        vUV += vec2(0.0, 0.0);\n\t}\n\telse if( quadVert < 1.5 )\n\t{\n        vUV += vec2(vSize.x, 0.0);\n\t}\n\telse if( quadVert < 2.5 )\n\t{\n        vUV += vec2(0.0, vSize.y);\n\t}\n\telse if( quadVert < 3.5 )\n\t{\n        vUV += vec2(vSize.x, vSize.y);\n\t}\n  \n\tmainImage( v_color, vUV * iResolution );\n\n    gl_Position = vec4(vUV * 2.0 - 1.0, 0, 1); \n}\n\n// Pasted shadertoy code here\n// -------- 8< --------  8< --------  8< --------  8< --------  8< --------  8< -------- \n\n// Shadertoy adapter \n\n// based on https://www.shadertoy.com/view/Msl3Rn\n// chains and gears - @P_Malin\n\n#define ENABLE_AMBIENT_OCCLUSION\n#define ENABLE_SPECULAR\n#define ENABLE_REFLECTIONS\n#define ENABLE_SHADOWS\n#define ENABLE_FOG\n\n//#define ENABLE_DIRECTIONAL_LIGHT\n//#define ENABLE_DIRECTIONAL_LIGHT_FLARE\n\n#define ENABLE_POINT_LIGHT\n//#define ENABLE_POINT_LIGHT_FLARE\n\n#define kRaymarchMaxIter 28\n\nconst float kPI = 3.141592654;\nconst float kTwoPI = kPI * 2.0;\n\nstruct C_Ray\n{\n    vec3 vOrigin;\n    vec3 vDir;\n    float fStartDistance;\n    float fLength;\n};\n\nstruct C_HitInfo\n{\n    vec3 vPos;\n    float fDistance;\n    vec3 vObjectId;\n};\n    \nstruct C_Surface\n{\n    vec3 vNormal;\n    vec3 cReflection;\n    vec3 cTransmission;    \n};\n\nstruct C_Material\n{\n    vec3 cAlbedo;\n    float fR0;\n    float fSmoothness;\n    vec2 vParam;\n};\n\nstruct C_Shading\n{\n    vec3 cDiffuse;\n    vec3 cSpecular;\n};\n\nstruct C_PointLight\n{\n    vec3 vPos;\n    vec3 cColour;\n};\n\nstruct C_DirectionalLight\n{\n    vec3 vDir;\n    vec3 cColour;\n};\n\nvec3 RotateX( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);\n    \n    return vResult;\n}\n\nvec3 RotateY( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\n    \n    return vResult;\n}\n\nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);\n    \n    return vResult;\n}\n\n/////////////////////////////////////\n// Distance Field CSG\n// These carry with them the material parameters in yzw\n\nvec4 DistCombineUnion( const in vec4 v1, const in vec4 v2 )\n{\n    //if(v1.x < v2.x) return v1; else return v2;\n    return mix(v1, v2, step(v2.x, v1.x));\n}\n\nvec4 DistCombineUnionConditional( const in vec4 v1, const in vec4 v2, const in float fCondition )\n{    \n\t//if( fCondition < 0.0 )\n\t//            return v1;\n                \n    return mix(v1, v2, step(v2.x, v1.x) * step(0.0, fCondition));\n}\n\nvec4 DistCombineIntersect( const in vec4 v1, const in vec4 v2 )\n{\n    return mix(v2, v1, step(v2.x,v1.x));\n}\n\nvec4 DistCombineSubtract( const in vec4 v1, const in vec4 v2 )\n{\n    return DistCombineIntersect(v1, vec4(-v2.x, v2.yzw));\n}\n\nvec3 DomainRepeatXZGetTile( const in vec3 vPos, const in vec2 vRepeat, out vec2 vTile )\n{\n\tvec3 vResult = vPos;\n\tvec2 vTilePos = (vPos.xz / vRepeat) + 0.5;\n\tvTile = floor(vTilePos + 1000.0);\n\tvResult.xz = (fract(vTilePos) - 0.5) * vRepeat;\n\treturn vResult;\n}\n\nvec3 DomainRepeatXZ( const in vec3 vPos, const in vec2 vRepeat )\n{\n\tvec3 vResult = vPos;\n\tvec2 vTilePos = (vPos.xz / vRepeat) + 0.5;\n\tvResult.xz = (fract(vTilePos) - 0.5) * vRepeat;\n\treturn vResult;\n}\n\nvec3 DomainRepeatY( const in vec3 vPos, const in float fSize )\n{\n\tvec3 vResult = vPos;\n\tvResult.y = (fract(vPos.y / fSize + 0.5) - 0.5) * fSize;\n\treturn vResult;\n}\n\nvec3 DomainRotateSymmetry( const in vec3 vPos, const in float fSteps )\n{\n\tfloat angle = atan( vPos.x, vPos.z );\n\t\n\tfloat fScale = fSteps / (kPI * 2.0);\n\tfloat steppedAngle = (floor(angle * fScale + 0.5)) / fScale;\n\t\n\tfloat s = sin(-steppedAngle);\n\tfloat c = cos(-steppedAngle);\n\t\n\tvec3 vResult = vec3( c * vPos.x + s * vPos.z, \n\t\t\t     vPos.y,\n\t\t\t     -s * vPos.x + c * vPos.z);\n\t\n\treturn vResult;\n}\n\nfloat GetDistanceXYTorus( const in vec3 p, const in float r1, const in float r2 )\n{\n   vec2 q = vec2(length(p.xy)-r1,p.z);\n   return length(q)-r2;\n}\n\nfloat GetDistanceYZTorus( const in vec3 p, const in float r1, const in float r2 )\n{\n   vec2 q = vec2(length(p.yz)-r1,p.x);\n   return length(q)-r2;\n}\n\nfloat GetDistanceCylinderY(const in vec3 vPos, const in float r)\n{\n\treturn length(vPos.xz) - r;\n}\n\nfloat GetDistanceChain( const in vec3 vPos )\n{\n\tfloat fOuterCylinder = length(vPos.xz) - 1.05;\n\tif(fOuterCylinder > 0.5)\n\t{\n\t\treturn fOuterCylinder;\n\t}\n\t\n\tvec3 vChainDomain = vPos;\n\t\n\tvChainDomain.y = fract(vChainDomain.y + 0.5) - 0.5;\t\t\n\tfloat fDistTorus1 = GetDistanceXYTorus(vChainDomain, 0.35, 0.1);\n\t\n\tvChainDomain.y = fract(vChainDomain.y + 1.0) - 0.5;\t\t\n\tfloat fDistTorus2 = GetDistanceYZTorus(vChainDomain, 0.35, 0.1);\n\t\n\tfloat fDist = min(fDistTorus1, fDistTorus2);\n\n\treturn fDist;\n}\n\nfloat GetDistanceGear( const in vec3 vPos )\n{\n\tfloat fOuterCylinder = length(vPos.xz) - 1.05;\n\tif(fOuterCylinder > 0.5)\n\t{\n\t\treturn fOuterCylinder;\n\t}\n\t\n\tvec3 vToothDomain = DomainRotateSymmetry(vPos, 16.0);\n\tvToothDomain.xz = abs(vToothDomain.xz);\n\tfloat fGearDist = dot(vToothDomain.xz,normalize(vec2(1.0, 0.55))) - 0.55;\n\tfloat fSlabDist = abs(vPos.y + 0.1) - 0.15;\n\t\n\tvec3 vHoleDomain = abs(vPos);\n\tvHoleDomain -= 0.35;\n\tfloat fHoleDist = length(vHoleDomain.xz) - 0.2;\n\t\n\tfloat fBarDist =vToothDomain.z - 0.15;\n\tfBarDist = max(vPos.y - 0.1, fBarDist);\n\t\n\tfloat fResult = fGearDist;\n\tfResult = max(fResult, fSlabDist);\n\tfResult = max(fResult, fOuterCylinder);\n\tfResult = max(fResult, -fHoleDist);\n\tfResult = min(fResult, fBarDist);\n\treturn fResult;\n}\n\nvec4 GetDistanceScene( const in vec3 vPos )\n{             \t\n\tvec2 vChainTile;\n\tvec2 vRepeat = vec2(4.0, 8.0);\n\tvec3 vRepeatDomain = DomainRepeatXZGetTile(vPos, vRepeat, vChainTile);\n\t\t\n\tvec4 vDistFloor = vec4(vPos.y + 0.5, 1.0, vec2(0.0));\n\tvec4 vResult = vDistFloor;\n\t{\n\t\tvec3 vGearDomain1 = DomainRepeatXZ(vPos+vec3(0.0, 0.0, 4.0), vRepeat);\n\t\tvGearDomain1 = RotateY( vGearDomain1, iGlobalTime);\n\t\tvec4 vDistGear = vec4(GetDistanceGear(vGearDomain1), 3.0, vec2(0.0));\n\t\tvResult = DistCombineUnion( vResult, vDistGear );\n\t\t\n\t\tvec3 vGearDomain2 = DomainRepeatXZ(vPos+vec3(2.0, 0.0, 4.0), vRepeat);\n\t\tvGearDomain2 = RotateY( vGearDomain2, -iGlobalTime + (2.0 * kPI / 32.0));\n\t\tvec4 vDistGear2 = vec4(GetDistanceGear(vGearDomain2), 3.0, vec2(0.0));\t\t\n\t\tvResult = DistCombineUnion( vResult, vDistGear2 );\n\t\t\n\t}\n\n\t{\n\t\tvec4 vDistChainHole = vec4( GetDistanceCylinderY(vRepeatDomain, 0.7), 2.0, vec2(0.0));\n\t\tvResult = DistCombineSubtract( vResult, vDistChainHole );\n\n\t\tvec3 vChainDomain = vRepeatDomain;\n\t\tfloat fSpeed = (sin(vChainTile.y + vChainTile.x) + 1.1) * 0.5;\n\t\tvChainDomain.y += sin(iGlobalTime * fSpeed);\n\t\tvec4 vDistChain = vec4( GetDistanceChain(vChainDomain), 4.0, vec2(0.0));\n\t\tvResult = DistCombineUnion( vResult, vDistChain );\n\t}\n\treturn vResult;\n}\n\nC_Material GetObjectMaterial( const in C_HitInfo hitInfo )\n{\n\tC_Material mat;\n\n\tif(hitInfo.vObjectId.x < 1.5)\n\t{\n\t\t// floor\n\t\tmat.fR0 = 0.02;\n\t\tmat.fSmoothness = 0.8;\n\t\tmat.cAlbedo = vec3(0.7, 0.8, 0.3);\n\t}\n\telse\n\tif(hitInfo.vObjectId.x < 2.5)\n\t{\n\t\t// hole interior\n\t\tmat.fR0 = 0.0;\n\t\tmat.fSmoothness = 0.0;\n\t\tmat.cAlbedo = vec3(0.7, 0.8, 0.3);\n\t}\n\telse\n\tif(hitInfo.vObjectId.x < 3.5)\n\t{\n\t\t// gear\n\t\tmat.fR0 = 0.4;\n\t\tmat.fSmoothness = 0.7;\n\t\tmat.cAlbedo = vec3(0.5, 0.6, 0.6);\n\t}\n\telse\n\t{\n\t\t// chain\n\t\tmat.fR0 = 0.2;\n\t\tmat.fSmoothness = 0.1;\n\t\tmat.cAlbedo = vec3(0.15, 0.125, 0.1);\n\t}\n\t\n\treturn mat;\n}\n\nfloat GetRayFirstStep( const in C_Ray ray )\n{\n    return ray.fStartDistance;  \n}\n\n\nvec3 GetSkyGradient( const in vec3 vDir )\n{\n    const vec3 cColourTop = vec3(0.7, 0.9, 1.0);\n    const vec3 cColourHorizon = vec3(0.2, 0.3, 0.4);\n\n    float fBlend = clamp(vDir.y, 0.0, 1.0);\n    return mix(cColourHorizon, cColourTop, fBlend);\n}\n\nC_PointLight GetPointLight()\n{\n    C_PointLight result;\n\n    result.vPos = vec3(sin(iGlobalTime), 2.0 + cos(iGlobalTime * 1.231), cos(iGlobalTime));\n    result.cColour = vec3(32.0, 6.0, 1.0);\n\n    return result;\n}\n\nC_DirectionalLight GetDirectionalLight()\n{\n    C_DirectionalLight result;\n\n    result.vDir = normalize(vec3(-0.2, -0.3, 0.5));\n    result.cColour = vec3(8.0, 7.5, 7.0);\n\n    return result;\n}\n\nvec3 GetAmbientLight(const in vec3 vNormal)\n{\n    return GetSkyGradient(vNormal);\n}\n\n/////////////////////////////////////\n// Raymarching \n\nvec3 GetSceneNormal( const in vec3 vPos )\n{\n    // tetrahedron normal\n    const float fDelta = 0.01;\n\n    vec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n    vec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n    vec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n    vec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n\n    float f1 = GetDistanceScene( vPos + vOffset1 ).x;\n    float f2 = GetDistanceScene( vPos + vOffset2 ).x;\n    float f3 = GetDistanceScene( vPos + vOffset3 ).x;\n    float f4 = GetDistanceScene( vPos + vOffset4 ).x;\n\n    vec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n\n    return normalize( vNormal );\n}\n\n#define kRaymarchEpsilon 0.01\n// This is an excellent resource on ray marching -> http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const int maxIter )\n{        \n    result.fDistance = GetRayFirstStep( ray );\n    result.vObjectId.x = 0.0;\n        \n    for(int i=0;i<=kRaymarchMaxIter;i++)              \n    {\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n        vec4 vSceneDist = GetDistanceScene( result.vPos );\n        result.vObjectId = vSceneDist.yzw;\n        \n        // abs allows backward stepping - should only be necessary for non uniform distance functions\n        if((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= ray.fLength) || (i > maxIter))\n        {\n            break;\n        }                        \n\n        result.fDistance = result.fDistance + vSceneDist.x; \n    }\n\n\n    if(result.fDistance >= ray.fLength)\n    {\n        result.fDistance = 1000.0;\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n        result.vObjectId.x = 0.0;\n    }\n}\n\nfloat GetShadow( const in vec3 vPos, const in vec3 vNormal, const in vec3 vLightDir, const in float fLightDistance )\n{\n    #ifdef ENABLE_SHADOWS\n\t\tC_Ray shadowRay;\n\t\tshadowRay.vDir = vLightDir;\n\t\tshadowRay.vOrigin = vPos;\n\t\tconst float fShadowBias = 0.05;\n\t\tshadowRay.fStartDistance = fShadowBias / abs(dot(vLightDir, vNormal));\n\t\tshadowRay.fLength = fLightDistance - shadowRay.fStartDistance;\n\t\n\t\tC_HitInfo shadowIntersect;\n\t\tRaymarch(shadowRay, shadowIntersect, 32);\n\t\t\n\t\tfloat fShadow = step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );\n\t\t\n\t\treturn fShadow;          \n    #else\n    \treturn 1.0;\n    #endif\n}\n\n// use distance field to evaluate ambient occlusion\nfloat GetAmbientOcclusion(const in C_HitInfo intersection, const in C_Surface surface)\n{\n    #ifdef ENABLE_AMBIENT_OCCLUSION    \n\t\tvec3 vPos = intersection.vPos;\n\t\tvec3 vNormal = surface.vNormal;\n\t\n\t\tfloat fAmbientOcclusion = 1.0;\n\t\n\t\tfloat fDist = 0.0;\n\t\tfor(int i=0; i<=5; i++)\n\t\t{\n\t\t\tfDist += 0.1;\n\t\n\t\t\tvec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist);\n\t\n\t\t\tfAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 / fDist );                                  \n\t\t}\n\t\n\t\treturn fAmbientOcclusion;\n    #else\n\t    return 1.0;\n    #endif    \n}\n\n/////////////////////////////////////\n// Lighting and Shading\n\n#define kFogDensity 0.1\n\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo hitInfo)\n{\n    #ifdef ENABLE_FOG\n    // fog\n    float fFogAmount = exp(hitInfo.fDistance * -kFogDensity);\n    vec3 cFog = GetSkyGradient(ray.vDir);\n\n    #ifdef ENABLE_DIRECTIONAL_LIGHT_FLARE\n    C_DirectionalLight directionalLight = GetDirectionalLight();\n    float fDirDot = clamp(dot(-directionalLight.vDir, ray.vDir), 0.0, 1.0);\n    cFog += directionalLight.cColour * pow(fDirDot, 10.0);\n    #endif \n\n    col = mix(cFog, col, fFogAmount);\n    #endif\n\n    // glare from light (a bit hacky - use length of closest approach from ray to light)\n    #ifdef ENABLE_POINT_LIGHT_FLARE\n    C_PointLight pointLight = GetPointLight();\n\n    vec3 vToLight = pointLight.vPos - ray.vOrigin;\n    float fPointDot = dot(vToLight, ray.vDir);\n    fPointDot = clamp(fPointDot, 0.0, hitInfo.fDistance);\n\n    vec3 vClosestPoint = ray.vOrigin + ray.vDir * fPointDot;\n    float fDist = length(vClosestPoint - pointLight.vPos);\n    col += pointLight.cColour * 0.01/ (fDist * fDist);\n    #endif    \n}\n\n// http://en.wikipedia.org/wiki/Schlick's_approximation\nfloat Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor)\n{\n    float fDot = dot(vNormal, -vView);\n    fDot = clamp((1.0 - fDot), 0.0, 1.0);\n    float fDotPow = pow(fDot, 5.0);\n    return fR0 + (1.0 - fR0) * fDotPow * fSmoothFactor;\n}\n\nvec3 ApplyFresnel(const in vec3 vDiffuse, const in vec3 vSpecular, const in vec3 vNormal, const in vec3 vView, const in C_Material material)\n{\n    float fFresnel = Schlick(vNormal, vView, material.fR0, material.fSmoothness * 0.9 + 0.1);\n    return mix(vDiffuse, vSpecular, fFresnel);    \n}\n\nfloat GetBlinnPhongIntensity(const in vec3 vIncidentDir, const in vec3 vLightDir, const in vec3 vNormal, const in float fSmoothness)\n{          \n    vec3 vHalf = normalize(vLightDir - vIncidentDir);\n    float fNdotH = max(0.0, dot(vHalf, vNormal));\n\n    float fSpecPower = exp2(4.0 + 6.0 * fSmoothness);\n    float fSpecIntensity = (fSpecPower + 2.0) * 0.125;\n\n    return pow(fNdotH, fSpecPower) * fSpecIntensity;\n}\n\nC_Shading ApplyPointLight( const in C_PointLight light, const in vec3 vSurfacePos, const in vec3 vIncidentDir, const in vec3 vNormal, const in C_Material material )\n{\n    C_Shading shading;\n    \n    vec3 vToLight = light.vPos - vSurfacePos;\n    vec3 vLightDir = normalize(vToLight);\n    float fLightDistance = length(vToLight);\n    \n    float fAttenuation = 1.0 / (fLightDistance * fLightDistance);\n    \n    float fShadowFactor = GetShadow( vSurfacePos, vNormal, vLightDir, fLightDistance );\n    vec3 vIncidentLight = light.cColour * fShadowFactor * fAttenuation * max(0.0, dot(vLightDir, vNormal));\n    \n    shading.cDiffuse = vIncidentLight;                                  \n    shading.cSpecular = GetBlinnPhongIntensity( vIncidentDir, vLightDir, vNormal, material.fSmoothness ) * vIncidentLight;\n    \n    return shading;\n}  \n\nC_Shading ApplyDirectionalLight( const in C_DirectionalLight light, const in vec3 vSurfacePos, const in vec3 vIncidentDir, const in vec3 vNormal, const in C_Material material )\n{\n    C_Shading shading;\n\n    const float kShadowRayLength = 10.0;      \n    vec3 vLightDir = -light.vDir;\n    float fShadowFactor = GetShadow( vSurfacePos, vNormal, vLightDir, kShadowRayLength );\n    vec3 vIncidentLight = light.cColour * fShadowFactor * max(0.0, dot(vLightDir, vNormal));\n    \n    shading.cDiffuse = vIncidentLight;                                  \n    shading.cSpecular = GetBlinnPhongIntensity( vIncidentDir, vLightDir, vNormal, material.fSmoothness ) * vIncidentLight;\n    \n    return shading;\n}  \n\n\nvec3 ShadeSurface(const in C_Ray ray, const in C_HitInfo hitInfo, const in C_Surface surface, const in C_Material material)\n{\n    vec3 cScene;\n    \n    C_Shading shading;\n\n    shading.cDiffuse = vec3(0.0);\n    shading.cSpecular = vec3(0.0);\n    \n    float fAmbientOcclusion = GetAmbientOcclusion(hitInfo, surface);\n    vec3 vAmbientLight = GetAmbientLight(surface.vNormal) * fAmbientOcclusion;\n    \n    shading.cDiffuse += vAmbientLight;\n    shading.cSpecular += surface.cReflection;\n              \n    #ifdef ENABLE_POINT_LIGHT\n    C_PointLight pointLight = GetPointLight(); \n    C_Shading pointLighting = ApplyPointLight(pointLight, hitInfo.vPos,ray.vDir, surface.vNormal, material);\n    shading.cDiffuse += pointLighting.cDiffuse;\n    shading.cSpecular += pointLighting.cSpecular;\n    #endif\n\n    #ifdef ENABLE_DIRECTIONAL_LIGHT\n\tC_DirectionalLight directionalLight = GetDirectionalLight();\n    C_Shading directionLighting = ApplyDirectionalLight(directionalLight, hitInfo.vPos, ray.vDir, surface.vNormal, material);\n    shading.cDiffuse += directionLighting.cDiffuse;\n    shading.cSpecular += directionLighting.cSpecular;\n    #endif\n\t\n\t// fire in the hole\n\tshading.cDiffuse += clamp(-hitInfo.vPos.y - 0.5, 0.0, 1.0) * vec3(5.0, 0.25, 0.05);\n\n    vec3 vDiffuseReflection = shading.cDiffuse * material.cAlbedo;              \n\n    #ifdef ENABLE_SPECULAR\n    cScene = ApplyFresnel(vDiffuseReflection , shading.cSpecular, surface.vNormal, ray.vDir, material);\n    #else\n    cScene = vDiffuseReflection;\n    #endif\n    \n    return cScene;\n}\n\nvec3 GetSceneColourSecondary( const in C_Ray ray );\n\nvec3 GetReflection( const in C_Ray ray, const in C_HitInfo hitInfo, const in C_Surface surface )\n{\n    #ifdef ENABLE_REFLECTIONS    \n    {\n        // get colour from reflected ray\n        const float fSeparation    = 0.1;\n\n        C_Ray reflectRay;\n        reflectRay.vDir = reflect(ray.vDir, surface.vNormal);\n        reflectRay.vOrigin = hitInfo.vPos;\n        reflectRay.fLength = 16.0;\n        reflectRay.fStartDistance = fSeparation / abs(dot(reflectRay.vDir, surface.vNormal));\n        \n        return GetSceneColourSecondary(reflectRay);      \n    }\n    #else\n        return GetSkyGradient(reflect(ray.vDir, surface.vNormal));                              \n    #endif\n}\n\n// no reflections, no transparency, used for secondary rays\nvec3 GetSceneColourSecondary( const in C_Ray ray )\n{\n    C_HitInfo hitInfo;\n    Raymarch(ray, hitInfo, 32);\n                        \n    vec3 cScene;\n\n    if(hitInfo.vObjectId.x < 0.5)\n    {\n        cScene = GetSkyGradient(ray.vDir);\n    }\n    else\n    {\n        C_Surface surface;        \n        surface.vNormal = GetSceneNormal(hitInfo.vPos);\n\n        C_Material material = GetObjectMaterial(hitInfo);\n\n        // use sky gradient instead of reflection\n        surface.cReflection = GetSkyGradient(reflect(ray.vDir, surface.vNormal));\n\n        // apply lighting\n        cScene = ShadeSurface(ray, hitInfo, surface, material);\n    }\n\n    ApplyAtmosphere(cScene, ray, hitInfo);\n\n    return cScene;\n}\n\nvec3 GetSceneColourPrimary( const in C_Ray ray )\n{                                                          \n    C_HitInfo intersection;\n    Raymarch(ray, intersection, 256);\n                \n    vec3 cScene;\n\n    if(intersection.vObjectId.x < 0.5)\n    {\n        cScene = GetSkyGradient(ray.vDir);\n    }\n    else\n    {\n        C_Surface surface;\n        \n        surface.vNormal = GetSceneNormal(intersection.vPos);\n\n        C_Material material = GetObjectMaterial(intersection);\n\n        surface.cReflection = GetReflection(ray, intersection, surface);\n\n        // apply lighting\n        cScene = ShadeSurface(ray, intersection, surface, material);\n    }\n\n    ApplyAtmosphere(cScene, ray, intersection);\n\n    return cScene;\n}\n\nfloat kFarClip = 30.0;\n\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, const in vec2 fragCoord, out C_Ray ray)\n{\n    vec2 vUV = ( fragCoord.xy / iResolution.xy );\n    vec2 vViewCoord = vUV * 2.0 - 1.0;\n\n    float fRatio = iResolution.x / iResolution.y;\n    vViewCoord.y /= fRatio;                          \n\n    ray.vOrigin = vPos;\n\n    vec3 vRight = normalize(cross(vForwards, vWorldUp));\n    vec3 vUp = cross(vRight, vForwards);\n        \n    ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards); \n    ray.fStartDistance = 0.0;\n    ray.fLength = kFarClip;      \n}\n\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, const in vec2 fragCoord, out C_Ray ray)\n{\n    vec3 vForwards = normalize(vInterest - vPos);\n    vec3 vUp = vec3(0.0, 1.0, 0.0);\n\n    GetCameraRay(vPos, vForwards, vUp, fragCoord, ray);\n}\n\nvec3 OrbitPoint( const in float fHeading, const in float fElevation )\n{\n    return vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\n}\n\nvec3 Gamma( const in vec3 cCol )\n{\n    return sqrt(cCol);\n}\n\nvec3 Tonemap( const in vec3 cCol )\n{\n    vec3 vResult = 1.0 - exp2(-cCol);\n\n    return vResult;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    C_Ray ray;\n\n \tGetCameraRayLookat( OrbitPoint(iGlobalTime * 0.3, cos(iGlobalTime * 0.2) * 0.3 + 0.4) * 7.0, vec3(0.0, 0.0, 0.0), fragCoord, ray);\n\n    vec3 cScene = GetSceneColourPrimary( ray );  \n\n    const float fExposure = 1.5;    \n    fragColor = vec4( Tonemap(cScene * fExposure), 1.0 );\n}\n\n// -------- 8< --------  8< --------  8< --------  8< --------  8< --------  8< -------- \n// End pasted shadertoy code\n\n"
  },
  "screenshotURL": "data/images/images-ylklxefy7cyj6qr79-thumbnail.jpg",
  "hasSound": "",
  "views": 1,
  "likes": 0,
  "revisionId": "yrv2TbadBX2TTnAMp"
}