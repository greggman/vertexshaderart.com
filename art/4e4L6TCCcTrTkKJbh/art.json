{
  "_id": "4e4L6TCCcTrTkKJbh",
  "owner": {
    "_id": "sP483FJXn7SuTsbAt",
    "createdAt": {
      "$date": {
        "$numberLong": "1472559237427"
      }
    },
    "profile": {
      "name": null,
      "avatarUrl": "https://avatars.githubusercontent.com/EvilProfesseur?s=200"
    },
    "username": "evilprofesseur"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1472807609813"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1472807609813"
    }
  },
  "origId": "GRmubu72jMXJivdL4",
  "name": "grid attempt",
  "notes": "",
  "rank": {
    "$numberDouble": "1.7270344286523491"
  },
  "private": false,
  "unlisted": true,
  "username": "evilprofesseur",
  "avatarUrl": "https://avatars.githubusercontent.com/EvilProfesseur?s=200",
  "settings": {
    "num": 62000,
    "mode": "TRIANGLES",
    "sound": "https://soundcloud.com/caseandpoint/case-point-upgrade-free-download",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "mat4 rotX(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n\n    return mat4(\n      1, 0, 0, 0,\n      0, c, s, 0,\n      0, -s, c, 0,\n      0, 0, 0, 1);\n}\n\nmat4 rotY(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n\n    return mat4(\n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);\n}\n\nmat4 rotZ(float angleInRadians) {\n    float s = sin(angleInRadians);\n    float c = cos(angleInRadians);\n\n    return mat4(\n      c,-s, 0, 0,\n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1);\n}\n\nmat4 trans(vec3 trans) {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    trans, 1);\n}\n\nmat4 ident() {\n  return mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\n\nmat4 scale(vec3 s) {\n  return mat4(\n    s[0], 0, 0, 0,\n    0, s[1], 0, 0,\n    0, 0, s[2], 0,\n    0, 0, 0, 1);\n}\n\nmat4 uniformScale(float s) {\n  return mat4(\n    s, 0, 0, 0,\n    0, s, 0, 0,\n    0, 0, s, 0,\n    0, 0, 0, 1);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n} \n\n#define PI radians(180.0)\n\nvec2 getCirclePoint(float id, float circleSegmentsCount) {\n  float ux = floor(id /6.) + mod(id, 2.);\n  \n  float vy = mod(floor(id /2.) + floor(id /3.), 2.);\n\n  float angle = ux / circleSegmentsCount  * PI * 2.;\n  float c = cos(angle);\n  float s = sin(angle);\n    \n  float radius = vy + 1.;\n  \n  float x = c * radius;\n  float y = s * radius;\n  \n  return vec2(x,y);    \n}\n\nvoid main() {\n  float circleSegmentsCount = 6.;\n  vec2 circleXY = getCirclePoint(vertexId, circleSegmentsCount);\n  \n  float pointsPerCircle = circleSegmentsCount * 6.;\n  float circleId = floor(vertexId / pointsPerCircle);\n  float circleCount = floor(vertexCount/ pointsPerCircle);\n  \n  float down = sqrt(circleCount);\n  float across = floor(circleCount / down);\n  \n  float x = mod(circleId, across);\n  float y = floor(circleId / across);\n  \n  float u = x / (across - 1.);\n  float v = y / (across - 1.);   \n  \n  float xOffset = 0.; //sin(time*2.1 + y * 0.2) * 0.1;\n  float yOffset = 0.; //sin(time + x * 0.3) * 0.2;\n  \n  float ux = u * 2. - 1. + xOffset; // switch from 0-1 to -1-1\n  float vy = v * 2. - 1. + yOffset;\n  \n  float su = abs(u- 0.5) * 2.;\n  float sv = abs(v - 0.5) * 2.;\n  float au = abs(atan(su, sv)) / PI;\n  float av = length(vec2(su, sv));\n  float snd = texture2D(sound, vec2(au* 0.125, av * 0.25)).a;\n  \n  float aspect = resolution.x / resolution.y;\n  float sc = pow(snd + 0.2, 5.);\n  \n  vec4 pos = vec4(circleXY, 0 ,1);\n  mat4 mat = ident();\n  mat *= scale(vec3(1, aspect, 1));\n  mat *= trans(vec3(ux, vy, 0));\n  mat *= rotZ(snd * 10.);\n  mat *= uniformScale(0.03 * sc);\n  \n  vec2 xy = circleXY * 0.02 * sc + vec2(ux, vy) *1.3; \n  \n  gl_Position = mat * pos;\n  \n  float sizeOffset = sin(time*0.7 + x * y * 0.02) * 5. + snd*15.;\n\n  gl_PointSize = pow(snd + 0.3, 5.) * 10.0 + sizeOffset;\n  gl_PointSize *= 20.0 / across;\n  gl_PointSize *= resolution.x / 600.0;\n    \n  float hue = u * .1 + snd *0.3 + time * 0.1;\n  float sat = smoothstep(0.1, 1.0, av);\n  float val = pow(snd + 0.2 , 4.);\n  \n  v_color = vec4(hsv2rgb(vec3(hue,sat,val)),1);\n}"
  },
  "screenshotURL": "data/images/images-ql00txi9pr81ny1h2-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "12"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "vCwsEn73X6Nqy6A7d"
}