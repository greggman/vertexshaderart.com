{
  "_id": "sS597q4aY9wEpneFz",
  "owner": {
    "_id": "gYBmTGxvno9hKndQM",
    "createdAt": {
      "$date": "1610122206689"
    },
    "profile": {
      "name": "Thanos Theodorakopoulos",
      "avatarUrl": "https://avatars.githubusercontent.com/galousis?s=200"
    },
    "username": "galousis"
  },
  "createdAt": {
    "$date": "1611587053378"
  },
  "modifiedAt": {
    "$date": "1611587053378"
  },
  "origId": "DiGpLPYqRW3DAtnFc",
  "name": "crazymusicbox",
  "notes": "",
  "rank": "10.15714643549282",
  "private": false,
  "unlisted": false,
  "username": "galousis",
  "avatarUrl": "https://avatars.githubusercontent.com/galousis?s=200",
  "settings": {
    "num": 80000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/pridon/here-be-dragons",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/*\n\n\n___________________1111111111111__________________\n______________1¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1_____________\n___________1¶¶¶¶¶¶111111111111111¶¶¶¶¶¶1__________\n_________1¶¶¶11111111111111111111111¶1¶¶¶1________\n_______1¶¶¶¶1111111111111111111111111111¶¶¶1______\n______1¶¶1¶1111111111¶¶¶¶¶¶¶¶1111111111111¶¶1_____\n_____¶¶¶11111111¶¶¶¶¶¶¶¶1_¶¶¶¶¶¶¶¶111111111¶¶¶____\n____¶¶¶1111111¶¶¶¶¶¶¶¶1_____¶¶¶¶¶¶¶¶11111111¶¶¶___\n___1¶¶111111¶¶¶¶¶¶¶¶1_________¶¶¶¶¶¶¶¶1111111¶¶1__\n___¶¶11111¶¶¶¶¶¶¶¶1____________1¶¶¶¶¶¶¶¶111111¶¶1_\n__¶¶11111¶¶¶¶¶¶¶¶¶¶¶¶¶_____¶¶¶¶¶1¶¶¶¶¶¶¶¶111111¶¶_\n__¶¶1111¶¶¶¶¶¶¶¶_____¶¶¶¶_¶¶_____1¶¶¶¶¶¶¶¶11111¶¶_\n__¶¶1111¶¶¶¶¶¶¶1________¶¶________¶¶¶¶¶¶1¶¶1111¶¶_\n__¶1111¶¶¶¶¶¶¶¶_______¶¶_¶_¶¶______¶¶¶¶¶¶1¶11111¶_\n__¶¶111¶1¶¶¶¶¶¶_______¶¶_¶_¶¶______¶¶¶¶¶¶1¶11111¶_\n__¶1111¶¶1¶¶¶¶¶¶________¶¶¶_______1¶¶¶¶¶11¶11111¶_\n__¶¶111¶¶1¶¶¶¶¶¶1_____¶¶¶_¶¶______¶¶¶¶¶¶1¶¶1111¶¶_\n__1¶¶111¶11¶¶¶¶¶¶¶¶¶¶¶¶_____¶¶¶¶_¶¶¶¶¶¶11¶1111¶¶1_\n___¶¶¶11¶¶11¶¶¶¶¶¶¶1___________¶¶¶¶¶¶¶11¶¶111¶¶¶__\n___1¶¶111¶¶111¶¶¶¶¶¶¶________1¶¶¶¶¶¶111¶¶1111¶¶1__\n____1¶¶1111¶¶111¶¶¶¶¶¶¶1___¶¶¶¶¶¶¶111¶¶¶1111¶¶1___\n_____1¶¶¶111¶¶¶11111¶¶¶¶¶¶¶¶¶¶11111¶¶¶11111¶¶1____\n______1¶¶¶1111¶¶¶¶¶1111¶¶¶11111¶¶¶¶¶11111¶¶¶1_____\n________1¶¶111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111111¶¶1_______\n__________¶¶1111111111¶¶¶¶1111111111111¶1_________\n__________¶¶¶11111111¶¶11¶¶11111111111¶¶¶_________\n________1¶¶11¶1¶¶111111111¶111111¶¶¶¶¶11¶¶________\n_______1¶¶111111¶¶¶¶¶1¶1¶¶¶¶¶¶¶¶¶¶1111111¶¶_______\n_______¶¶¶11111111111111¶¶11¶1111111111111¶¶______\n______1¶1111¶11111111111¶¶11111111111111111¶1_____\n______¶¶111¶111111111111¶¶1111111111111¶111¶¶_____\n_____1¶111¶¶111111111111¶¶1111111111111¶1111¶1____\n_____¶¶¶¶¶¶¶111111111111¶¶1111111111111¶¶¶¶¶¶¶____\n____¶¶¶¶¶¶¶¶¶11111111111¶¶111111111111¶¶¶¶¶¶¶¶¶___\n____¶¶¶¶¶¶¶¶¶11111111111¶¶111111111111¶¶¶¶¶¶¶¶¶___\n____1¶¶¶¶¶¶1111111111111¶¶11111111111111¶¶¶¶¶¶1___\n______1111¶1111111111111¶¶11111111111111¶1111_____\n__________¶¶¶11111111111¶¶111111111111¶¶¶_________\n__________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶_________\n________1¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1_______\n\n\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// based & influenced by this https://github.com/KessonDalef/Shaders/blob/master/Vertex/spherepointcloud.vert\n\n/*{\n  \"pixelRatio\": 1,\n  \"vertexCount\": 80000,\n  \"vertexMode\": \"POINTS\",\n}*/\n\n#define DOTS_PER 80000.\n#define PI radians(180.)\n#define NUM_SEGMENTS 21.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 5.0\n\nprecision mediump float;\n/*\nattribute float vertexId;\nuniform float vertexCount;\nuniform float time;\nuniform vec2 resolution;\nvarying vec4 v_color;\n*/\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.-2.0*f);\n    u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nmat4 rotateX(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat4(\n    1, 0, 0, 0,\n    0, c, s, 0,\n    0, -s, c, 0,\n    0, 0, 0, 1);\n}\n\nmat4 rotateY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4(\n      c, 0,-s, 0,\n      0, 1, 0, 0,\n      s, 0, c, 0,\n      0, 0, 0, 1);\n}\n\nmat4 rotateZ(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4(\n      c,-s, 0, 0,\n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1);\n}\n\n\nfloat easeInOutSine(float x) \n{\n  return -(cos(PI * x) - 1.) * 0.5;\n}\n\nvec4 Slerp(vec4 p0, vec4 p1, float t)\n{\n  float dotp = dot(normalize(p0), normalize(p1));\n  if ((dotp > 0.9999) || (dotp<-0.9999))\n  {\n    if (t<=0.5)\n      return p0;\n    return p1;\n  }\n  float theta = acos(dotp * PI/180.0);\n  vec4 P = (\n    (\n      p0*sin((1.-t)*theta) + p1*sin(t*theta)\n    ) / sin(theta)\n  );\n  P.w = 1.;\n  return P;\n}\n\nvec3 posf2(float t, float i, float snd) \n{\n  \n  \n\treturn vec3(\n      cos(t*.4+i*1.53) +\n      sin(t*4.84+i*.6)\n      //noise(vec2(t*.5*snd, i))\n      ,\n      cos(t*1.4+i*1.353-2.1) +\n      sin(t*4.84+i*.476-2.1) \n      //noise(vec2(t, i))\n      ,\n      sin(t*1.84+i*.36+2.1)// +\n\t)*.1;\n}\n\nvec3 posf0(float t, float fsndweight, float snd) {\n  //return posf2(t,-1.)*0.9;\n  return posf2(t,-1.,snd)*fsndweight;\n}\n\nvec3 posf(float t, float i, float fsndweight, float snd) \n{\n  //float fsndweightf = mix(4.4, 4.49, pow(fsndweight, 2.0));\n  return posf2(t*.045,i,snd) + posf0(t,fsndweight,snd);\n}\n\nvec3 push(float t, float i, vec3 ofs, float lerpEnd, float lenghtweight, float snd) {\n  //vec3 pos = posf(t,i,.49)+ofs;\n  vec3 pos = posf(t,i, mix(.45, 4.5, pow(snd, 1.0)), snd) + ofs;\n\n  vec3 posf = fract(pos+.5)-.5;\n\n  float l = length(posf)*lenghtweight; //1.5\n  //return (- posf + posf/l)*(1.-smoothstep(lerpEnd,3.,l));\n  //return (posf/l)*(1.-smoothstep(lerpEnd,2.9,l));\n  return (posf/l)*(1.-smoothstep(lerpEnd,1.,l));\n}\n\nfloat m1p1(float v) {\n  return v * 2. - 1.;\n}\n\n// YUV to RGB matrix\nmat3 yuv2rgb = mat3(1.0, 0.0, 1.13983,\n                    1.0, -0.39465, -0.58060,\n                    1.0, 2.03211, 0.0);\n\n// RGB to YUV matrix\nmat3 rgb2yuv = mat3(0.2126, 0.7152, 0.0722,\n                    -0.09991, -0.33609, 0.43600,\n                    0.615, -0.5586, -0.05639);\n\n#define OCTAVES 12\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nfloat fbm2 ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid main(void)\n{\n\n  float t = time*.6;\n  float i = vertexId+sin(vertexId)*100.;\n  \n  float v = vertexId / vertexCount;\n  float invV = 1.0 - v;\n  float thingId = floor(vertexId / DOTS_PER);\n  float numThings = floor(vertexCount / DOTS_PER);\n  float thingV = thingId / numThings;\n  \n  float snd = texture2D(sound, vec2(thingV * 0.5 + 0.01, mod(thingV * 4., 4.) * 6. / 24.)).a*mix(.5, .9, .8);\n  \n  vec3 pos = posf(t,i, mix(1.45, 4.5, pow(snd, 1.)), snd);\n  \n  vec3 ofs = vec3(0);\n  \n  for (float f = -10.; f < 0.; f++) {\n\t  //ofs += push(t+f*.03,i,ofs,2.-exp(-f*.1),mix(1.45, 1.5, pow(snd, 1.)),snd);\n      ofs += push(t+f*.03,i,ofs,2.-exp(-f*.1),mix(1.45, 1.5, pow(snd, 1.)),snd);\n  }\n  ofs += push(t,i,ofs,.999,mix(1.45, 1.5, pow(snd, 2.)),snd);\n\n  //pos -= posf0(t);\n  pos -= posf0(t,.49, snd);\n  \n  pos += ofs;\n\n  vec3 oscillationV = posf0(t*.1,0.25, 10.001);\n\t\n  oscillationV = vec3(\n    oscillationV.x, \n    dot(normalize( cross(pos,vec3(1.0,0.0,0.0)) ),oscillationV), \n    dot(pos,oscillationV)\n  );\n\n  float offset = .5 + .5*sin( 1.0 + 6.0*pow(.5-.5*oscillationV.x,1.) );\n  float dist = length( oscillationV*vec3(5.,.0,.0) ) - .80 - offset;\n  \n  dist += 8.*sin(1.*oscillationV.z);\n  dist += sin(10.0*oscillationV.x) * sin(500.*oscillationV.y) * sin(10.*oscillationV.z) * clamp(2.0*oscillationV.y+0.5,0.0,1.0);\n  //dist *= clamp(2.0*oscillationV.y+0.5,0.0,1.0);\n  \n  //vec4 sphericalInt = Slerp(vec4(pos, 1.), vec4(vec3(ofs), 1.), time*pow(snd, 2.));\n  \n  pos.yz *= mat2(dist*0.8,dist*.6,-dist*.6,dist*0.8);\n  pos.xz *= mat2(dist*0.8,dist*.6,-dist*.6,dist*0.8);\n  \n  //pos.yz *= mat2(.8,.6,-.6,.8);\n  //pos.xz *= mat2(.8,.6,-.6,.8);\n  \n  //sphericalInt.yz *= mat2(.8,.6,-.6,.8);\n  //sphericalInt.xz *= mat2(.8,.6,-.6,.8);\n\n  pos.x *= resolution.y/resolution.x;\n  pos.z *= resolution.y/resolution.x;\n\n  mat4 rotation = rotateY(time*0.15);\n  vec4 rot = vec4(pos.xyz, 1.0) * rotation;\n\n  pos.z += .9;\n\n  //rot *= .95;\n  rot *= .5;\n\n  gl_Position = vec4(rot.xyz, 0.55);\n  gl_PointSize = .3;\n\n  float hue = 1.6 + v;// + v * time * 0.;\n  hue = mix(hue, 50., mod(floor(t * 4.0), 1.4));\n  hue = mix(hue, 0.5, step(0.95, snd*0.95));\n  \n  float clipZ = m1p1(gl_Position.z / gl_Position.w);\n  float invClipZ = 1. - clipZ;\n  float val = invClipZ * 150.;\n  \n  \n  \n  \n  //v_color = vec4(hsv2rgb(vec3(hue*2., hue*22., val)),mix(1., 2.5, pow(snd, 4.)));\n  v_color = vec4(yuv2rgb * vec3(0.5, pos.x, pos.y),mix(1., 2.5, pow(snd, 4.)));\n  v_color = vec4(\n    v_color.rbg * v_color.g, \n    v_color.a\n  );\n  v_color += fbm(pos.xy*50.0);\n  \n  //v_color += vec4(.7, 0.6, 1.0, 0.6);\n}\n"
  },
  "screenshotURL": "data/images/images-w0kskivlej25q9evu-thumbnail.jpg",
  "hasSound": true,
  "views": "604",
  "likes": "3",
  "revisionId": "EfgwSKAZcFztggoGg"
}