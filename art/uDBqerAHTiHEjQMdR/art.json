{
  "_id": "uDBqerAHTiHEjQMdR",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1545822688245"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1577644463685"
    }
  },
  "origId": "rBjrdN2CvsneEkgEk",
  "name": "otbs",
  "notes": "",
  "rank": {
    "$numberDouble": "10.492971835380686"
  },
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":1000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/brianne-becker/charlie-brown-o-tannenbaum\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"/*\\n\\n _____,   ____, ___,   ___,   __  _, \\n(-| | |  (-|_, (-|_)  (-|_)  (-\\\\ |   \\n _| | |_, _|__, _| \\\\_, _| \\\\_,   \\\\|    \\n(        (     (      (       (__/    \\n   ____   __   _, ___,   ____, ____  ____, _____,   ___,   ____ \\n  (-/  ` (-|__|  (-|_)  (-|   (-(__`(-|   (-| | |  (-|_\\\\_,(-(__`\\n    \\\\___, _|  |_, _| \\\\_, _|__, ____) _|    _| | |_, _|  )  ____)\\n         (       (      (     (     (     (        (      (     \\n\\n*/\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n#define PI radians(180.0)\\n\\nvoid main() {\\n  float t = vertexId / vertexCount + fract(time * 8.) * -0.0025;\\n  float sideId = mod(vertexId, 2.);\\n  float twist = vertexCount / 200.0;\\n  \\n  t = cos(t * PI * .5);\\n\\n  float m = t * PI * twist + sideId * PI;\\n  float r = t * .75;\\n  \\n  m += mod(time / vertexCount, 1.);\\n\\n  float x = r * cos(m);\\n  float z = r * sin(m);\\n\\n  float aspect = resolution.x / resolution.y;\\n  gl_Position = vec4(\\n      vec3(\\n          x / aspect, \\n          t * -2. + 1., \\n          z) * 0.8,\\n      1);\\n  gl_PointSize = 3.0;\\n  v_color.rgb = mix(vec3(1,0,0), vec3(0,1,1), sideId); \\n  v_color.a = mix(.5, 1., sin(m) * .5 * .5);\\n  v_color.a = mix(.2, 1., step(0., -sin(m)));\\n  v_color.rgb *= v_color.a;\\n}\\n\"}",
  "screenshotURL": "data/images/images-40kex9pv9s2ex3dvt-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "975"
  },
  "likes": {
    "$numberInt": "6"
  },
  "revisionId": "bzsZiPwe2bgPDJKP9"
}