{
  "_id": "qjLQadWFssvPKLLCN",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1471063671478"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1471064359407"
    }
  },
  "origId": "pJM2rdtSkSBnEkMeG",
  "name": "80smovielogo",
  "notes": "",
  "rank": {
    "$numberDouble": "10.298824540235215"
  },
  "private": false,
  "unlisted": false,
  "username": "gman",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "settings": "{\"num\":10300,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/tangerinedreamofficial2015/tangerine-dream-quantum-years-soundcloud\",\"lineSize\":\"CSS\",\"backgroundColor\":[0,0,0,1],\"shader\":\"/*\\n\\n\\n ⓥⓔⓡⓣⓔⓧⓢⓗⓐⓓⓔⓡⓐⓡⓣ\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n*/\\n\\n\\n#define PI radians(180.0)\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat p1m1(float v) {\\n  return v * 0.5 + 0.5;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\n#define NUM_EDGE_POINTS_PER_CIRCLE 54.\\n#define NUM_SUBDIVISIONS_PER_CIRCLE 16.\\n#define NUM_POINTS_PER_DIVISION (NUM_EDGE_POINTS_PER_CIRCLE * 6.)\\n#define NUM_POINTS_PER_CIRCLE (NUM_SUBDIVISIONS_PER_CIRCLE * NUM_POINTS_PER_DIVISION) \\nvoid getCirclePoint(const float id, const float inner, const float start, const float end, out vec3 pos, out vec2 uv) {\\n  float edgeId = mod(id, NUM_POINTS_PER_DIVISION);\\n  float ux = floor(edgeId / 6.) + mod(edgeId, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.) * 1.; // change that 3. for cool fx\\n  float sub = floor(id / NUM_POINTS_PER_DIVISION);\\n  float subV = sub / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\\n  float level = subV + vy / (NUM_SUBDIVISIONS_PER_CIRCLE - 1.);\\n  float u = ux / NUM_EDGE_POINTS_PER_CIRCLE;\\n  float v = mix(inner, 1., level);\\n  float a = mix(start, end, u) * PI * 2. + PI * 0.0;\\n  float s = sin(a);\\n  float c = cos(a);\\n  float x = c * v;\\n  float y = s * v;\\n  float z = mod(id, 2.) * 0.1;\\n  pos = vec3(x, y, z);  \\n  uv  = vec2(floor(edgeId / 6.) / NUM_EDGE_POINTS_PER_CIRCLE, sub);\\n}\\n\\nfloat goop(float t) {\\n  return sin(t) + sin(t * 0.27) + sin(t * 0.13) + sin(t * 0.73);\\n}\\n\\nvoid main() {\\n  float circleId = floor(vertexId / NUM_POINTS_PER_CIRCLE);\\n  float pointId = mod(vertexId, NUM_POINTS_PER_CIRCLE);\\n//  float sideId = floor(circleId / 2.);\\n//  float side = mix(-1., 1., step(0.5, mod(circleId, 2.)));\\n  float numCircles = floor(vertexCount / NUM_POINTS_PER_CIRCLE);\\n  float cu = circleId / numCircles * 0.5;\\n  vec3 pos;\\n  float inner = 0.0; //mix(0.0, 0.5, p1m1(sin(goop(circleId) + time * 0.1)));\\n  float start = fract(hash(circleId * 0.33) + sin(time * 0.03 + circleId) * 1.1);\\n  float end   = start + 1.;//start + hash(sideId + 1.);\\n  vec2 uv;\\n  getCirclePoint(pointId, inner, start, end, pos, uv); \\n  \\n  float snd = texture2D(sound, vec2((0.02 + cu + abs(uv.x * 2. - 1.)) * 0.20, uv.y * 0.05)).a;\\n  \\n  vec3 offset = vec3(\\n    m1p1(hash(circleId)) * 0.1,\\n    m1p1(hash(circleId * 0.37)) * 0.1, \\n    0);\\n  offset.x += goop(circleId + time * 0.03) * 0.05;\\n  offset.y += goop(circleId + time * 0.013) * 0.05;\\n  vec3 aspect = vec3(resolution.y / resolution.x, 1, 1);\\n  \\n  float sc = 2.; //mix(0.1, 0.4, hash(circleId) * exp(snd));\\n  \\n  mat4 mat = ident(); \\n  mat *= scale(aspect);\\n  mat *= trans(offset);\\n  mat *= scale(vec3(sc, sc, 1));\\n  gl_Position = vec4((mat * vec4(pos, 1)).xyz, 1);\\n  gl_PointSize = 4.;\\n\\n  float hue = 1.;\\n  float sat = 1.;\\n  float val = mod(circleId, 2.);\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1);//pow(snd + 0.1, 5.));\\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\\n}\"}",
  "screenshotURL": "data/images/images-up351nmrh7g6tkdzj-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "237"
  },
  "likes": {
    "$numberInt": "7"
  },
  "revisionId": "pnauSNGZPGwi7rtK7"
}