{
  "_id": "SAToMsqc7PybLLEc2",
  "owner": {
    "_id": "tFSGYdMSg7J6WsAhF",
    "createdAt": {
      "$date": {
        "$numberLong": "1450381162182"
      }
    },
    "username": "aiekick",
    "profile": {
      "avatarUrl": "https://secure.gravatar.com/avatar/9423fa0d99c42e44e2b7d18c6f88b041?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1530027655061"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1530027776259"
    }
  },
  "origId": null,
  "name": "Pics Danse",
  "notes": "",
  "rank": {
    "$numberDouble": "10.310446999188839"
  },
  "private": false,
  "unlisted": false,
  "username": "aiekick",
  "avatarUrl": "https://secure.gravatar.com/avatar/9423fa0d99c42e44e2b7d18c6f88b041?default=retro&size=200",
  "settings": "{\"num\":10000,\"mode\":\"TRIANGLES\",\"sound\":\"\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"// Created by Stephane Cuillerdier - Aiekick/2018 (twitter:@aiekick)\\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\\n\\n////////////////////////////////////////////////////////////\\n#define PI radians(180.)\\nmat4 persp(float fov, float aspect, float zNear, float zFar);\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up);\\nmat4 inverse(mat4 m);\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up);\\n////////////////////////////////////////////////////////////\\n\\nmat3 RotX(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\\nmat3 RotY(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\\nmat3 RotZ(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\\nmat4 Trans(float x, float y, float z){return mat4(1,0,0,0,0,1,0,0,0,0,1,0,x,y,z,1);}\\n\\n#define _2pi 6.2831853\\n#define _pi 3.1415926\\n#define _05pi 1.5707963\\n\\n// based on http://vincentwoo.com/2013/03/08/above-and-beyond-the-affirm-job-puzzle/\\nvec2 getHexPos(float vVertexId, float vPolySize, float vHexSpace)\\n{\\n\\tfloat indexTri = floor(vVertexId / 3.);\\n\\tfloat indexCircle = floor(indexTri / vPolySize);\\n\\t\\n\\tif (indexCircle == 0.) return vec2(0);\\n\\n\\tfloat ringCircle = floor(sqrt((4. * indexCircle - 1.) / 12.0) - 0.5) + 1.0;;\\n\\n\\tfloat circleOffset = (3. * pow(ringCircle,2.) + 3. * ringCircle + 1.) - indexCircle;\\n\\t\\t\\n\\tfloat side_number = floor(circleOffset / ringCircle);\\n\\tfloat side_offset = mod(circleOffset, ringCircle);\\n\\t\\t\\n\\tfloat as = _2pi / vPolySize;\\n\\t\\t\\n\\tfloat a = as * side_number;\\n\\tvec2 hex0 = vec2(cos(a),sin(a));\\n\\t\\t\\n\\ta = as * mod((side_number + 1.), vPolySize);\\n\\tvec2 hex1 = vec2(cos(a),sin(a)) - hex0;\\n\\n\\treturn ((hex0 * ringCircle) + (hex1 * side_offset)) * vHexSpace;\\n}\\n\\nvoid main()\\n{\\n  \\tfloat t = time * 5.;\\n  \\n  \\tgl_PointSize = 3.;\\n\\n\\tfloat polySize = floor(abs(mouse.x * 3.)+3.);\\n\\tfloat hexSpace = cos(radians(45.))*2.;\\n  \\t\\n\\tfloat off = 360.0 * time * 0.2;\\n\\tfloat astep = -_2pi / polySize;\\n\\tfloat angleOffset = cos(radians(off))*2.;\\n\\tfloat indexTri = floor(vertexId / 3.);\\n\\tfloat indexShape = floor(indexTri / polySize);\\n\\t\\n\\tfloat angle0 = indexTri * astep + angleOffset;\\n\\tfloat angle1 = (indexTri + 1.) * astep + angleOffset;\\n  \\n\\tfloat index = mod(vertexId, 3.);\\n\\t\\n\\tvec3 p = vec3(0);\\n\\t\\n\\tif (index == 0.) p = vec3(cos(angle0), -10, sin(angle0));\\n\\telse if (index == 1.) p = vec3(cos(angle1), -10, sin(angle1));\\n\\telse if (index == 2.) p = vec3(0,1,0);\\n\\t\\n\\tvec3 col = vec3(0,p.y,0);\\n\\t\\n\\t//p.xz *= 2.;\\n    p.xz -= getHexPos(vertexId, polySize, hexSpace);\\n\\t\\n\\tp.y += cos((indexShape * 2. + t)) * 2.;\\n\\t\\n\\t///////////////////////////////////////////////////////////////////////////////////////\\n\\tfloat ca = -0.7;\\n\\tfloat ce = 1.57;\\n\\tfloat cd = 10.8;\\n\\tvec3 eye = vec3(0.2, 1, 0.) * cd;\\n\\tvec3 target = vec3(0, 0, 0);\\n\\tvec3 up = vec3(0, 1, 0);\\n  \\n\\tmat4 camera = persp(45. * PI / 180., resolution.x / resolution.y, 0.1, 10000.); \\n\\tcamera *= cameraLookAt(eye, target, up);\\n  \\n\\tgl_Position = camera * vec4(p, 1);\\n\\t\\n  \\tv_color = vec4(clamp(col,0.,1.), 1);\\n}\\n\\t\\n////////////////////////////////////////////////////////////\\n\\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\\n\\tfloat f = tan(PI * 0.5 - 0.5 * fov);\\n\\tfloat rangeInv = 1.0 / (zNear - zFar);\\n\\n\\treturn mat4(\\n\\t\\tf / aspect, 0, 0, 0,\\n\\t\\t0, f, 0, 0,\\n\\t\\t0, 0, (zNear + zFar) * rangeInv, -1,\\n\\t\\t0, 0, zNear * zFar * rangeInv * 2., 0);\\n}\\n\\n\\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\\n\\tvec3 zAxis = normalize(eye - target);\\n\\tvec3 xAxis = normalize(cross(up, zAxis));\\n\\tvec3 yAxis = cross(zAxis, xAxis);\\n\\n\\treturn mat4(\\n\\t\\txAxis, 0,\\n\\t\\tyAxis, 0,\\n\\t\\tzAxis, 0,\\n\\t\\teye, 1);\\n}\\n\\nmat4 inverse(mat4 m) {\\n\\tfloat\\n\\t\\ta00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\\n\\t\\ta10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\\n\\t\\ta20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\\n\\t\\ta30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\\n\\n\\t\\tb00 = a00 * a11 - a01 * a10,\\n\\t\\tb01 = a00 * a12 - a02 * a10,\\n\\t\\tb02 = a00 * a13 - a03 * a10,\\n\\t\\tb03 = a01 * a12 - a02 * a11,\\n\\t\\tb04 = a01 * a13 - a03 * a11,\\n\\t\\tb05 = a02 * a13 - a03 * a12,\\n\\t\\tb06 = a20 * a31 - a21 * a30,\\n\\t\\tb07 = a20 * a32 - a22 * a30,\\n\\t\\tb08 = a20 * a33 - a23 * a30,\\n\\t\\tb09 = a21 * a32 - a22 * a31,\\n\\t\\tb10 = a21 * a33 - a23 * a31,\\n\\t\\tb11 = a22 * a33 - a23 * a32,\\n\\n\\t\\tdet = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n\\treturn mat4(\\n\\t\\ta11 * b11 - a12 * b10 + a13 * b09,\\n\\t\\ta02 * b10 - a01 * b11 - a03 * b09,\\n\\t\\ta31 * b05 - a32 * b04 + a33 * b03,\\n\\t\\ta22 * b04 - a21 * b05 - a23 * b03,\\n\\t\\ta12 * b08 - a10 * b11 - a13 * b07,\\n\\t\\ta00 * b11 - a02 * b08 + a03 * b07,\\n\\t\\ta32 * b02 - a30 * b05 - a33 * b01,\\n\\t\\ta20 * b05 - a22 * b02 + a23 * b01,\\n\\t\\ta10 * b10 - a11 * b08 + a13 * b06,\\n\\t\\ta01 * b08 - a00 * b10 - a03 * b06,\\n\\t\\ta30 * b04 - a31 * b02 + a33 * b00,\\n\\t\\ta21 * b02 - a20 * b04 - a23 * b00,\\n\\t\\ta11 * b07 - a10 * b09 - a12 * b06,\\n\\t\\ta00 * b09 - a01 * b07 + a02 * b06,\\n\\t\\ta31 * b01 - a30 * b03 - a32 * b00,\\n\\t\\ta20 * b03 - a21 * b01 + a22 * b00) / det;\\n}\\n\\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\\n#if 1\\n\\treturn inverse(lookAt(eye, target, up));\\n#else\\n\\tvec3 zAxis = normalize(target - eye);\\n\\tvec3 xAxis = normalize(cross(up, zAxis));\\n\\tvec3 yAxis = cross(zAxis, xAxis);\\n\\n\\treturn mat4(\\n\\t\\txAxis, 0,\\n\\t\\tyAxis, 0,\\n\\t\\tzAxis, 0,\\n\\t\\t-dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \\n#endif\\n  \\n\\t}\\n////////////////////////////////////////////////////////////\"}",
  "screenshotURL": "data/images/images-4lq2zemdh1lxl19ve-thumbnail.jpg",
  "hasSound": "",
  "views": {
    "$numberInt": "756"
  },
  "likes": {
    "$numberInt": "4"
  },
  "revisionId": "v7jCGhs9n3tS9XppF"
}