{
  "_id": "3QtDqanQXHR4KXBo2",
  "owner": {
    "_id": "GsGemnD2x9QaMRX9g",
    "createdAt": {
      "$date": 1619196586677
    },
    "profile": {
      "name": null,
      "avatarUrl": "https://avatars.githubusercontent.com/Hugo-W?s=200"
    },
    "username": "hugo-w"
  },
  "createdAt": {
    "$date": 1619198718606
  },
  "modifiedAt": {
    "$date": 1619525873749
  },
  "origId": null,
  "name": "gMan-Lessons",
  "notes": "Just following the lessons\nfrom Youtube.",
  "rank": 1.6985619257037676,
  "private": false,
  "unlisted": true,
  "username": "hugo-w",
  "avatarUrl": "https://avatars.githubusercontent.com/Hugo-W?s=200",
  "settings": {
    "num": 1000,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0.10980392156862745,
      0.10980392156862745,
      0.10980392156862745,
      1
    ],
    "shader": "// Lesson at \n\n// L2:\n//\n\n// Every shader needs a main\n// number of vertices fixed up there\n\n// Check the help to know which variables are available around\n\n// some code to convert HSV to RGB\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1., 2.0/ 3.0, 1.0/3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid main() {\n  float down = floor(sqrt(vertexCount));\n  float across = floor(vertexCount / down);\n  \n  // Get x, y coordinates on a grid\n  float x = mod(vertexId, across);\n  float y = floor(vertexId / across);\n  \n  float xoff = sin(time + y * 0.2) * .1;\n  float yoff = sin(time*1.1 + x * 0.3) * .1;\n  \n  // scale to get a fix number across the width\n  float u = x / (across - 1.);\n  float v = y / (across - 1.);\n  // scale it back to [-1, 1]\n  float ux = u*2. - 1. +  xoff;\n  float vy = v*2. - 1. + yoff;\n  \n  vec2 xy = vec2(ux, vy) * 1.3;\n  \n  gl_Position = vec4(xy, 0, 1); // x, y, z, (w) (each one from -1 to 1\n  \n  // Adjust size of points by time too\n  float soff = sin(time*1.2 + x * y * 0.02) * 5.;\n  \n  gl_PointSize = 12.0 + soff;\n  gl_PointSize *= 20. / across;\n  gl_PointSize *= resolution.x / 600.;\n  \n  float hue = u * .1 + sin(time * 1.3 + v * 20.) * 0.05;\n  float sat = 1.;\n  float val = sin(time * 1.4 * v * u * 20.) * .5 + .5; // check replace  the \"+\" by a \"*\" in the sin\n  \n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1); // v_color is specific to vertexshader.com (it's the gl_FragColor) equivalent\n\n}"
  },
  "screenshotURL": "data/images/images-t22lr11684hu770i7-thumbnail.jpg",
  "hasSound": "",
  "views": 6,
  "likes": 0,
  "revisionId": "n4mGbHHro8MR7vLWP"
}