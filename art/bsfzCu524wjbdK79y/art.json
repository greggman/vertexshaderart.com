{
  "_id": "bsfzCu524wjbdK79y",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1516016161280"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1516020700523"
    }
  },
  "origId": "BJohDPg4F2NmwfsEC",
  "name": "black and white resolutioned simplified2",
  "notes": "",
  "rank": {
    "$numberDouble": "1.4934060092237962"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"POINTS\",\"sound\":\"https://soundcloud.com/billx/tandava-billx-remix\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"#define ITERS 40\\n#define M_PI 3.1415926535897932384626433832795\\n\\n\\nvoid main ()\\n{\\n   float finalDesiredPointSize = 3.;\\n   float maxFinalSquareSideSize = floor(sqrt(vertexCount));\\n   float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\\n  \\n  //first the number of elements in a line\\n  float across = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\\n  \\n  //we want to keep the resolution >> across/down must be the same as resolution.x/resolution.y\\n  //across = across*resolution.x/resolution.y;\\n  \\n  //then the number of possible lines with the given vertexCount\\n  float down = floor(finalMaxVertexCount / across);\\n  \\n  //we can now calculate the final number of elements\\n  float finalVertexCount = across*down;\\n  \\n  //and the consequent finalVertexId\\n  float finalVertexId = mod(vertexId,finalVertexCount);\\n  \\n  //Now we calculate the position of the elements based on their finalVertexId\\n  float x = mod(finalVertexId, across);\\n  float y = floor(finalVertexId / across);\\n  \\n  float u = (x /across);\\n  float v = (y /down);\\n  \\n  float u0 = (u * (across*finalDesiredPointSize/resolution.x));\\n  float v0 = (v * (across*finalDesiredPointSize/resolution.x ));\\n  \\n  float ux =  u0 - 0.5*(across*finalDesiredPointSize/resolution.x);\\n  float vy =  v0- 0.5*(across*finalDesiredPointSize/resolution.x);;\\n  \\n  float udnd = u;\\n  if(u>0.5)\\n    udnd =  1.-u;\\n  \\n  float snd = texture2D(sound, vec2(0.,  udnd)).a;\\n  \\n    //apply fragment logic\\n\\n\\tvec2 position = vec2(u,v);\\n  \\n\\tposition.x = abs(position.x - 0.5);\\n    \\n\\n    if(v>0.5)\\n      position.y =   (1. -position.y);\\n  \\n\\tfloat j = 1.0;\\n\\tj += position.y + position.x/position.y;\\n\\t//j *= 1.;\\n\\tj = mod(j + time, 1.0);\\n\\t\\n\\tfloat i = mod(position.x  * 1. + 1.*cos(time/12.), sin(time/12.0) + 2.0);\\n\\t\\n    i = mod(position.y * 7. * j, i / j);\\n  \\n\\ti *= 5.;\\n\\t\\n\\t//i = mod(i - time/2.0 - j, colorCount);\\n\\t\\n\\t\\n \\n  gl_Position = vec4(ux, vy, 0, 1);\\n  \\n  gl_PointSize = finalDesiredPointSize;//(resolution.y/numAcrossDown) * 1.;//(resolution.y/numAcrossDown)*2.-1.;\\n\\n  v_color = vec4( vec3(mod(floor(i),2.)), 1.0 );\\n  \\n\\n}\"}",
  "screenshotURL": "data/images/images-82vce86gi0um1mqlm-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "11"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "FYZRYqFmJwECsrkQe"
}