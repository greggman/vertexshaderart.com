{
  "_id": "xLrHnki5affkbQiFT",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1551277068081"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1551277292958"
    }
  },
  "origId": "7HjknSiL8tp9XXHEa",
  "name": "vortex",
  "notes": "",
  "rank": {
    "$numberDouble": "1.6941475305223548"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": "{\"num\":100000,\"mode\":\"TRI_STRIP\",\"sound\":\"https://soundcloud.com/caseandpoint/case-point-upgrade-free-download\",\"lineSize\":\"NATIVE\",\"backgroundColor\":[0,0,0,1],\"shader\":\"\\n\\n//KDrawmode=GL_TRIANGLE_STRIP\\n//KVerticesNumber=100000\\n\\n#define speedFactor 0.//KParameter0 -2>>2.\\n#define sizeFactor1 0.02//KParameter1 0.01>>0.02\\n#define cubeRotFactor 1.//KParameter2 1.>>15.\\n#define eyeY 0.7//KParameter3 0.1>>2.\\n#define eyeX 0.//KParameter4 -1.>>1.\\n#define colorGFactor 0.0//KParameter5 0.>>1.\\n#define colorRFactor 1.0//KParameter6 0.>>1.\\n#define sndFactor 4.//KParameter7 0.>>3.\\n\\n#define HPI 1.570796326795\\n\\n\\n#define PI   3.14159265358988\\n\\nvec3 noise(vec3 _v) {\\n    return fract(sin(_v * vec3(43758.5453123, 12345.6789012,76543.2109876)));\\n}\\n\\nvec3 rotX(vec3 _v, float _rad) {\\n    vec2 f = sin(vec2(_rad, _rad + HPI));\\n    vec3 r = _v;\\n    r.y = _v.y * f.y + _v.z * -f.x;\\n    r.z = _v.y * f.x + _v.z *  f.y;\\n    return r;\\n}\\n\\nvec3 rotY(vec3 _v, float _rad) {\\n    vec2 f = sin(vec2(_rad, _rad + HPI));\\n    vec3 r = _v;\\n    r.x =  _v.x *  f.y + _v.z *  f.x;\\n    r.z =  _v.x * -f.x + _v.z *  f.y;\\n    return r;\\n}\\n\\nvec3 rotZ(vec3 _v, float _rad) {\\n    vec2 f = sin(vec2(_rad, _rad + HPI));\\n    vec3 r = _v;\\n    r.x =  _v.x *  f.x + _v.y * f.y;\\n    r.y =  _v.x * -f.y + _v.y * f.x;\\n    return r;\\n}\\n\\n\\nvec4 perspective(vec3 _v, float _fov, float _near, float _far, vec2 _res) {\\n    vec4 r = vec4(_v, -_v.z);\\n    r.xy *= vec2(_res.y / _res.x, 1.0) / tan(radians(_fov * 0.5));\\n    r.z = (-_v.z * (_far + _near) - 2.0 * _far * _near) / (_far - _near);\\n    return r;\\n}\\n\\nvec3 lookAt(vec3 _v, vec3 _eye, vec3 _look, vec3 _up) {\\n    vec3 z = normalize(_eye - _look);\\n    vec3 x = normalize(cross(_up, z));\\n    vec3 y = cross(z, x);\\n    vec4 r = mat4(x.x, y.x, z.x, 0.0, x.y, y.y, z.y, 0.0, x.z, y.z, z.z, 0.0, 0.0, 0.0, 0.0, 1.0) *mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -_eye.x, -_eye.y, -_eye.z, 1.0)* vec4(_v, 1.0);\\n    return r.xyz;\\n}\\n\\n\\nvec3 shade(vec3 _eye, vec3 _p, vec3 _n, vec3 _dfscol, float _amb, vec2 _spec)\\n{\\n    vec3 rgb;\\n    vec3 lit = normalize(vec3(1.0, 1.0, 4.0));\\n    \\n    float diffuse = max(0.0, dot(_n, lit)) * (1.0 - _amb) + _amb;\\n    \\n    vec3 h = normalize(normalize(_eye - _p) + lit);\\n    float specular = 1.0;\\n    if(diffuse > 0.0) {\\n        specular = max(0.1,dot(_n, h));\\n    }\\n    \\n    rgb = diffuse * _dfscol + specular * _spec.y;\\n    \\n    return rgb;\\n}\\n\\n#define kShapeVertexCount 36.0\\n#define kVertexPerShape 6.0\\n\\n\\nvec3 shapeVertex(float _vId, out vec4 _nI)\\n{\\n    float faceId = floor(_vId / kVertexPerShape);\\n    float vtxId = mod(_vId, kVertexPerShape);\\n    vec2 fp;\\n    vec3 v;\\n    \\n    if(vtxId <= 1.0) {\\n        fp = vec2(1.0, 1.0);\\n    }\\n    else if(vtxId == 2.0) {\\n        fp = vec2(-1.0, 1.0);\\n    }\\n    else if(vtxId == 3.0) {\\n        fp = vec2(1.0, -1.0);\\n    }\\n    else {\\n        fp = vec2(-1.0, -1.0);\\n    }\\n    \\n    if(faceId == 0.0) {\\n        \\n        v = vec3(fp.x, fp.y, 1.0);\\n        _nI = vec4(0.0, 0.0, 1.0, faceId);\\n    }\\n    else if(faceId == 1.0) {\\n        \\n        v = vec3(-fp.x, fp.y, -1.0);\\n        _nI = vec4(0.0, 0.0, -1.0, faceId);\\n    }\\n    else if(faceId == 2.0) {\\n        \\n        v = vec3(fp.x, 1.0, -fp.y);\\n        _nI = vec4(0.0, 1.0, 0.0, faceId);\\n    }\\n    else if(faceId == 3.0) {\\n        \\n        v = vec3(fp.x, -1.0, fp.y);\\n        _nI = vec4(0.0, -1.0, 0.0, faceId);\\n    }\\n    else if(faceId == 4.0) {\\n        \\n        v = vec3(-1.0, fp.y, -fp.x);\\n        _nI = vec4(-1.0, 0.0, 0.0, faceId);\\n    }\\n    else {\\n        \\n        v = vec3(1.0, fp.y, fp.x);\\n        _nI = vec4(1.0, 0.0, 0.0, faceId);\\n    }\\n    \\n    return v;\\n}\\n\\n\\n\\nvoid main() {\\n    \\n    float shapeCount = floor(vertexCount / kShapeVertexCount);\\n    float shapeId = floor(vertexId / kShapeVertexCount);\\n    float shapeVertexId = mod(vertexId, kShapeVertexCount);\\n \\n    float shapeRelId = shapeId/shapeCount;\\n    \\n    \\n    float numberOfElement = 15.;\\n    float numberOfLines = shapeCount/numberOfElement;\\n    \\n    float lineId = floor(shapeId/numberOfElement);\\n    \\n    float xPos = mod(shapeId,numberOfElement)/numberOfElement;\\n    float normXid = xPos/2.;\\n    //xPos = xPos*2.-1.;\\n  \\n    float soundFactor = texture2D(sound,vec2(xPos,shapeRelId)).a;\\n    \\n    \\n    float aspect = resolution.y / resolution.x;\\n    vec4 cbNi;\\n  \\n    \\n    //vec3 cubep = shapeVertex(shapeVertexId, cbNi) * 1./(2.*numberOfElement);\\n    \\n    vec3 cubep = shapeVertex(shapeVertexId, cbNi);// * min(lineId/10., 0.9)*1./(2.*numberOfElement);\\n \\n    vec3 color = vec3(1., 1., 1.);\\n  \\n    //lineId+=mod(time*10.,1.);\\n    //lineId/=numberOfElement;\\n\\n    cubep*=0.01;// min(lineId/2., 0.9)/(2.*numberOfElement);\\n    \\n    float snd = texture2D(sound, vec2(normXid, shapeRelId)).a/2.;\\n  \\n    \\n    cubep = vec3(cubep.x, cubep.y, cubep.z);//position\\n    //float deltaZ = mod(time,4.);\\n    //cubep.z+= deltaZ;\\n    //if(cubep.z>4.)\\n    //  cubep.z-= cubep.z;\\n    cbNi.xyz= vec3(cbNi.x, cbNi.y, cbNi.z);//normals\\n    \\n    float topZPos = cubep.z;//+5.;//numberOfLines*line/10.;\\n    //cubep .x*=aspect;\\n  \\n    vec3 circleCenter = vec3(-1.5,0.,0.);\\n \\n    //float xcircleRadius = 0.4;\\n    //circleCenter.x -= 1.;\\n\\n    //cubep.x += cos(lineId*2.*PI);//circleCenter.x;\\n    //cubep.z += sin(lineId*2.*PI);\\n    //cubep = rot(circleCenter,PI/10.);\\n    //cubep.x -= circleCenter.x;\\n  \\n  \\n    cubep.x += (1.+sndFactor*snd)*cos(xPos*2.*PI)/10.;\\n    cubep.y += (1.+sndFactor*snd)*sin(xPos*2.*PI)/10.;\\n    cubep += circleCenter;\\n    cubep = rotY(cubep,lineId*2.*PI/numberOfLines+time/2.);\\n    cubep  -= circleCenter;\\n\\n  /*\\n   cubep.x+= mod(time,2.);\\n    if(cubep.x>2.)\\n    {\\n      cubep.x-=4.;\\n    }\\n  */\\n\\n    //cubep = rotZ(cubep, mouse.x*PI*lineId/10.);\\n  \\n    //cubep.z+=lineId;\\n    //cubep.z+= mod(time/10.,10.);\\n    \\n    float eyeZ = sin(time/10.)*topZPos;\\n    //vec3 eye = vec3(sin(time/1.3), sin(time/1.), 29.*abs(cos(time/5.)));\\n    //vec3 eye = vec3(sin(time/1.3), sin(time/1.), 0.5);//29./2.*abs(cos(time/5.))\\n    vec3 eye = vec3(0., 0., .2);//29./2.*abs(cos(time/5.))\\n  \\n    //eye += circleCenter;\\n    //eye = rotY(eye,time);\\n    //eye  -= circleCenter;\\n  \\n     //eye = vec3(-1., 3., -1.);\\n    //cubep += distance(cubep, eye)/7.;\\n  \\n   //cubep.x += 0.2;\\n    color = shade(eye, cubep, cbNi.xyz, color, 0.6, vec2(64.0, .8));\\n    \\n   float redComp = mod(lineId,2.);\\n  color.r = redComp;\\n    vec3 p = lookAt(cubep, eye, vec3(0.0, 0., 0.), vec3(0.0, 01.0, 0.0));\\n    gl_Position = perspective(p, 60.0, 0.1, 10.0, resolution);\\n    gl_PointSize = 20.0;\\n    \\n    v_color = vec4(color, 1.0);\\n    \\n    \\n}\\n\\n\\n\\n\"}",
  "screenshotURL": "data/images/images-tgtnvgnkeypece5pg-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "3"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "PCT3k3beag3kqRKRn"
}