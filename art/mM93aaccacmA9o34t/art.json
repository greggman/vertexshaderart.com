{
  "_id": "mM93aaccacmA9o34t",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1448961631673"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1466549147559"
    }
  },
  "origId": "dYaXs9CwnzQhAT8Kt",
  "name": "trailmix",
  "rank": {
    "$numberDouble": "1.1220948931784671"
  },
  "private": false,
  "unlisted": true,
  "username": "gman",
  "settings": "{\"num\":98304,\"mode\":\"TRIANGLES\",\"sound\":\"https://soundcloud.com/nautylus-productions/falomir-feat-dila-libertine-lounge-deep-mix\",\"lineSize\":\"CSS\",\"backgroundColor\":[1,1,1,1],\"shader\":\"// ==========================================\\n//  ^\\n//  |\\n//  +-- click \\\"hide\\\" then MOVE YOUR MOUSE!!!!\\n// ==========================================\\n\\n#define PI 3.14159\\n\\nvec3 hsv2rgb(vec3 c) {\\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nmat4 rotY( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c, 0,-s, 0,\\n      0, 1, 0, 0,\\n      s, 0, c, 0,\\n      0, 0, 0, 1);  \\n}\\n\\n\\nmat4 rotZ( float angle ) {\\n    float s = sin( angle );\\n    float c = cos( angle );\\n  \\t\\n    return mat4( \\n      c,-s, 0, 0, \\n      s, c, 0, 0,\\n      0, 0, 1, 0,\\n      0, 0, 0, 1); \\n}\\n\\nmat4 trans(vec3 trans) {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    trans, 1);\\n}\\n\\nmat4 ident() {\\n  return mat4(\\n    1, 0, 0, 0,\\n    0, 1, 0, 0,\\n    0, 0, 1, 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 scale(vec3 s) {\\n  return mat4(\\n    s[0], 0, 0, 0,\\n    0, s[1], 0, 0,\\n    0, 0, s[2], 0,\\n    0, 0, 0, 1);\\n}\\n\\nmat4 uniformScale(float s) {\\n  return mat4(\\n    s, 0, 0, 0,\\n    0, s, 0, 0,\\n    0, 0, s, 0,\\n    0, 0, 0, 1);\\n}\\n\\n// hash function from https://www.shadertoy.com/view/4djSRW\\nfloat hash(float p) {\\n\\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(p2.x * p2.y * 95.4337);\\n}\\n\\nfloat m1p1(float v) {\\n  return v * 2. - 1.;\\n}\\n\\nfloat inv(float v) {\\n  return 1. - v;\\n}\\n\\n#define QUADS_PER_LINE 256.\\n#define SUBDIVISIONS_PER_QUAD 16.\\n#define POINTS_PER_LINE (QUADS_PER_LINE * SUBDIVISIONS_PER_QUAD * 6.)\\nconst float tension = 0.5;\\n\\n\\nvec3 getCenterPoint(const float id) {\\n  vec4 t = vec4(0);\\n  const int samples = 4;\\n  for (int ii = 0; ii < samples; ++ii) {\\n    t += texture2D(touch, \\n                   vec2(0.,\\n                       (id * 0.2) / (soundRes.y * 1.) \\n                       + float(ii) / float(samples) * 0.01));\\n  }\\n  t /= 4.;\\n  //t.xy = vec2(m1p1(hash(id)), m1p1(hash(id * 0.37))) * 0.5;\\n  return vec3(t.x, t.y, 0);\\n}\\n\\nvec3 getCurvePoint(const float superId) {\\n  float quadId = floor(superId / SUBDIVISIONS_PER_QUAD);\\n  float subId  = mod(superId, SUBDIVISIONS_PER_QUAD);\\n  float subV   = subId / SUBDIVISIONS_PER_QUAD;\\n  vec3 q0 = getCenterPoint(quadId - 1.);\\n  vec3 q1 = getCenterPoint(quadId + 0.);\\n  vec3 q2 = getCenterPoint(quadId + 1.);\\n  vec3 q3 = getCenterPoint(quadId + 2.);\\n  vec3 q4 = getCenterPoint(quadId + 3.);\\n  vec3 q5 = getCenterPoint(quadId + 4.);\\n  \\n  float s2 = pow(subV, 2.);\\n  float s3 = pow(subV, 3.);\\n  \\n  float c1 =   2. * s3  - 3. * s2 + 1.;\\n  float c2 = -(2. * s3) + 3. * s2; \\n  float c3 =        s3  - 2. * s2 + subV; \\n  float c4 =        s3  -      s2;  \\n\\n  vec3 t1 = (q2 - q0) * tension;\\n  vec3 t2 = (q3 - q1) * tension;\\n  return c1 * q1 + c2 * q2 + c3 * t1 + c4 * t2; \\n}\\n\\nvoid getQuadPoint(const float cpId, const float pointId, float thickness, vec2 seed, out vec3 pos, out vec2 uv) {\\n  float subId  = mod(cpId, SUBDIVISIONS_PER_QUAD);\\n  float subV   = subId / SUBDIVISIONS_PER_QUAD;\\n  \\n  vec3 q0 = getCurvePoint(cpId + 0.);\\n  vec3 q1 = getCurvePoint(cpId + 1.);\\n  vec3 q2 = getCurvePoint(cpId + 2.);\\n  vec3 q3 = getCurvePoint(cpId + 3.);\\n  vec3 q4 = getCurvePoint(cpId + 4.);\\n  vec3 q5 = getCurvePoint(cpId + 5.);\\n\\n  float id = pointId;\\n  float ux = mod(id, 2.);\\n  float vy = mod(floor(id / 2.) + floor(id / 3.), 2.); // change that 3. for cool fx\\n    \\n  #if 0\\n  vec3 p0 = mix(mix(q0, q1, subV), mix(q1, q2, subV), subV);\\n  vec3 p1 = mix(mix(q1, q2, subV), mix(q2, q3, subV), subV);\\n  vec3 p2 = mix(mix(q2, q3, subV), mix(q3, q4, subV), subV);\\n  vec3 p3 = mix(mix(q3, q4, subV), mix(q4, q5, subV), subV);\\n  vec3 perp0 = normalize(p2 - p0).yxz * vec3(-1, 1, 0) * thickness;\\n  vec3 perp1 = normalize(p3 - p1).yxz * vec3(-1, 1, 0) * thickness;\\n  pos = vec3(mix(p1, p2, vy) + mix(-1., 1., ux) * mix(perp0, perp1, vy)); \\n  #else\\n  vec3 perp0 = normalize(q2 - q0).yxz * vec3(-1, 1, 0) * thickness;\\n  vec3 perp1 = normalize(q3 - q1).yxz * vec3(-1, 1, 0) * thickness;\\n  pos = vec3(mix(q1, q2, vy) + mix(-1., 1., ux) * mix(perp0, perp1, vy)); \\n  #endif\\n  \\n  uv  = vec2(ux, vy);\\n}\\n\\nvoid main() {\\n  float lineId = floor(vertexId / POINTS_PER_LINE);\\n  float quadCount = POINTS_PER_LINE / 6.; \\n  float pointId = mod(vertexId, 6.);\\n  float quadId = floor(mod(vertexId, POINTS_PER_LINE) / 6.);\\n  float quadV = quadId / quadCount;\\n  float invQuadV = inv(quadV);\\n  vec3 pos;\\n  vec2 uv;\\n\\n  float snd0 = texture2D(sound, vec2(0.03, quadV * 0.2)).a;\\n  float snd1 = 0.6;texture2D(sound, vec2(0.14 + lineId * 0.05, quadId / quadCount * 0.01)).a;\\n  \\n  getQuadPoint(quadId, pointId, mix(0.01, 0.25, pow(snd0 + 0.2, 15.)), vec2(pow(snd0, 2.), pow(snd1, 2.0)), pos, uv);  \\n  \\n//  vec3 aspect = vec3(resolution.y / resolution.x, 1, 1);\\n  \\n  mat4 mat = ident(); \\n  mat *= scale(vec3(\\n    mix(1., -1., mod(lineId, 2.)),\\n    mix(1., -1., mod(floor(lineId / 2.), 2.)),\\n    1));\\n  gl_Position = vec4((mat * vec4(pos, 1)).xyz, 1);\\n//  gl_Position.z = -m1p1(quadId / quadCount);\\n//  gl_Position.x += m1p1(lineId / 10.) * 0.4 + (snd1 * snd0) * 0.1;\\n  gl_PointSize = 4.;\\n\\n  float hue = mix(0.95, 1.95, snd0);\\n  float sat = 1.;\\n  float val = mix(1.0, 0.0, step(50., mod(quadId, 100.)));\\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), invQuadV);\\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\\n\\n}\\n\\n\"}",
  "screenshotURL": "data/images/images-5qa18pssovt8dhfbl-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "206"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "GdSvvhYCnCQ7wgd3k",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200",
  "notes": ""
}