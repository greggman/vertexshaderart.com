{
  "_id": "NHc5v2ZJ5kCQAefNG",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": {
        "$numberLong": "1445777397953"
      }
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1446348237088"
    }
  },
  "origId": null,
  "name": "iso-wip",
  "username": "gman",
  "settings": {
    "num": 12,
    "mode": "POINTS",
    "sound": "",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "#define PI 3.14159\n#define NUM_SEGMENTS 4.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 5.0\n//#define FIT_VERTICAL\n\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n/*\n  {-X, 0.,  Z}, \n  { X, 0.,  Z}, \n  {-X, 0., -Z}, \n  { X, 0., -Z},    \n  {0.,  Z,  X}, \n  {0.,  Z, -X}, \n  {0., -Z,  X}, \n  {0., -Z, -X},    \n  { Z,  X, 0.}, \n  {-Z,  X, 0.}, \n  { Z, -X, 0.}, \n  {-Z, -X, 0.} \n*/\n#define ICOSO_X 0.525731112119133606\n#define ICOSO_Z 0.850650808352039932\nfloat icosoHelp(float pId) {\n  float id = mod(pId, 12.);\n  float useX = step(pId, 3.5);\n  float xOr0 = mix(ICOSO_X, 0., useX);\n  float sgn = mix(-1., 1., useX);\n  return mix(xOr0, ICOSO_Z, step(7.5, pId)) * sgn; \n}\n\nvec3 icosoNorm(float normId) {\n  if (normId <  1.) return vec3(-ICOSO_X, 0.,  ICOSO_Z); \n  if (normId <  2.) return vec3( ICOSO_X, 0.,  ICOSO_Z); \n  if (normId <  3.) return vec3(-ICOSO_X, 0., -ICOSO_Z); \n  if (normId <  4.) return vec3( ICOSO_X, 0., -ICOSO_Z);    \n  if (normId <  5.) return vec3(0.,  ICOSO_Z,  ICOSO_X); \n  if (normId <  6.) return vec3(0.,  ICOSO_Z, -ICOSO_X); \n  if (normId <  7.) return vec3(0., -ICOSO_Z,  ICOSO_X); \n  if (normId <  8.) return vec3(0., -ICOSO_Z, -ICOSO_X);    \n  if (normId <  9.) return vec3( ICOSO_Z,  ICOSO_X, 0.); \n  if (normId < 10.) return vec3(-ICOSO_Z,  ICOSO_X, 0.); \n  if (normId < 11.) return vec3( ICOSO_Z, -ICOSO_X, 0.); \n  /*if (normId < 12.)*/ return vec3(-ICOSO_Z, -ICOSO_X, 0.);    \n}\n  \n\nvoid main() {\n  vec2 aspect = vec2(1, resolution.x / resolution.y);\n\n  vec3 p = icosoNorm(vertexId);\n  gl_Position = vec4(p * 0.5 * vec3(aspect, 1), 1);\n\n  gl_PointSize = 10.0;\n  float hue = 0.;\n  v_color = vec4(hsv2rgb(vec3(hue, 1, 1)), 1);\n}"
  },
  "screenshotURL": "data/images/images-geh4tfrkzxltrx2yu-thumbnail.jpg",
  "views": {
    "$numberInt": "9"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "stNH2dckEWwDFgRu9",
  "modifiedAt": {
    "$date": {
      "$numberLong": "1446348237088"
    }
  },
  "private": true,
  "rank": {
    "$numberDouble": "1.63537098708925"
  },
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}