{
  "_id": "JsEv9AaC54NF6cY8Q",
  "owner": {
    "_id": "B7Kfai5f9h3MxwJcP",
    "createdAt": {
      "$date": "1445777397953"
    },
    "username": "gman",
    "profile": {
      "info": "&nbsp;&nbsp;contact: [@greggman](http://twitter.com/greggman), [github](http://github.com/greggman), [blog](http://greggman.com)\nnew stuff: [webgl](http://webglfundamentals.com), [twgl](http://twgljs.org), [threejsfundamentals](https://threejsfundamentals.org)\nold stuff: [chrome](http://chromium.org), [locoroco](https://www.youtube.com/watch?v=pFKpyScxv0k), [CTR](https://www.youtube.com/watch?v=3O8FK5d67cM), [Zombie Revenge](https://www.youtube.com/watch?v=Xw8yNik8Q-A), [and others...](http://games.greggman.com/game/games_o_the_greggman/)\n\nSome stuff you might want to look at\n\n*   [A uniform grid based on `vertexCount` and the window dimensions](https://www.vertexshaderart.com/art/NPohkmBgKdTBhML8P)\n*   [Tons of matrix functions](https://www.vertexshaderart.com/art/nr3EiyXWLMpwoouHt)\n\nNote: All the shaders I've posted are licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
      "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
    }
  },
  "createdAt": {
    "$date": "1445803147982"
  },
  "origId": null,
  "name": "round",
  "username": "gman",
  "settings": {
    "num": 6224,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/jamie-berry/jamie-berry-sweet-rascal-original-mix-free-download",
    "lineSize": "CSS",
    "backgroundColor": [
      1,
      1,
      1,
      1
    ],
    "shader": "#define NUM_SEGMENTS 64.0\n#define NUM_POINTS (NUM_SEGMENTS * 2.0)\n#define STEP 1.0\n#define NUM_LINES_DOWN 32.0\n#define PI 3.14159\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  // produces 0,1, 1,2, 2,3, ...\n  float point = floor(mod(vertexId, NUM_POINTS) / 2.0) + mod(vertexId, 2.0) * STEP;\n  // line count\n  float count = floor(vertexId / NUM_POINTS);\n\n  float u = point / NUM_SEGMENTS;    // 0 <-> 1 across line\n  float v = count / NUM_LINES_DOWN;  // 0 <-> 1 by line\n  float invV = 1.0 - v;\n\n  // Only use the left most 1/4th of the sound texture\n  // because there's no action on the right\n  float historyX = u * 0.1 + 0.1;\n  // Match each line to a specific row in the sound texture\n  float historyV = (v * NUM_LINES_DOWN + 0.5) / soundRes.y;\n  float snd = texture2D(sound, vec2(historyX, historyV)).a;\n  \n  gl_PointSize = min(32.0, 3.0 + pow((snd + 0.2) * 1.5, 10.0) * mix(3.0, 3.0, v)) * resolution.x / 1600.;\n\n  float x = u * PI * 2.0 + snd - 0.5 + sin(count + time * 0.00000) * 0.005;\n  float y = v - pow(snd, 1.5) * 0.4 + 0.5;\n  float c = cos(x);\n  float s = sin(x);\n  vec2 xy = vec2(c * y, s * y);\n  gl_Position = vec4(xy, length(xy) * 0.5, 1);\n\n  float hue = u;\n  float sat = invV;\n  float val = 1.0;\n  v_color = vec4(hsv2rgb(vec3(hue, sat, val)), 1. - length(xy) * 0.1);\n  v_color = vec4(v_color.rgb * v_color.a, v_color.a);\n}"
  },
  "screenshotDataId": "3EH8QEmsqvefvJDLK",
  "views": "518",
  "likes": "0",
  "revisionId": "6Eo4ptAdXRvCJK6qz",
  "screenshotURL": "data/images/images-n6aj66ziha1w267jv-thumbnail.jpg",
  "modifiedAt": {
    "$date": "1447068352637"
  },
  "private": false,
  "hasSound": true,
  "rank": "1.8240923603219836",
  "avatarUrl": "https://secure.gravatar.com/avatar/dcc0309895c3d6db087631813efaa9d1?default=retro&size=200"
}