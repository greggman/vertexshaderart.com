{
  "_id": "JagMqSrHRchzQAMRB",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1523537441170"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1523537441170"
    }
  },
  "origId": "yva6wZBxMPvZtC8iA",
  "name": "export 1",
  "notes": "http://glslsandbox.com/e#38484.0",
  "rank": {
    "$numberDouble": "1.301692827322658"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 50000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/user-158087960/studiomix-douzirec-06-2007-flac",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "//Created by K Machine from http://glslsandbox.com/e#46321.0\nvec2 surfacePosition;\nvec4 simFragCoord;\nvec2 vertexResolution = resolution;\n/*\n * Original shader from: https://www.shadertoy.com/view/XsKcDy\n */\n\n#ifdef GL_ES\n//precision  mediump float;\n#endif\n\n// glslsandbox //uniform s\n//uniform  //float time;\n//uniform  vec2 vertexResolution;\n\n// shadertoy globals\nfloat iTime = time;//;\nvec3 iResolution  = vec3(vertexResolution, 0.0);\n\n// --------[ Original ShaderToy begins here ]---------- //\n#define B(x,y)   O += line( U, vec2(x,y+E),vec2(x,y-E) )    // vertical bar free\n#define L(a,b)   O += line( U, vec2(a,E),  vec2(b,-E)  )    // slanted bar on rail\n#define S(D)     smoothstep( 4./R.y, 0. ,  length(D)-e )\n//#define S(D)     sin ( 100.*(length(D)-e) ) *.05 / dot(D,D)  // fun variant\n#define T(a,b)   if ( t>a && t<b )                          // time span\n#define f(T,a,b) mix( a, b, min(t-T,1.) )                   // interpolate, then still\n#define R        iResolution\nfloat e = .05, E = .5;                                      // bar radii\nvec2 A,B;\n#define line(p,a,b) S( -clamp(dot(B=b-a, A=U-a)/dot(B,B), 0.,1.) *B +A)\n//float line(vec2 p, vec2 a, vec2 b) {                      // draw a line\n//    b -= a; p -= a;\n//    return S( p - b * clamp(dot(b,p)/dot(b,b), 0., 1.) );\n//}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U = ( U+U - R.xy ) / R.y;\n    O -= O;   \n    float l = R.x/R.y+e+e, h = 1.+E+e,                      // distance out horiz & vert\n          t = mod(iTime,10.) + 1.;\n    \n    T(1., 5.)  B( f(1.,-l,-.3), 0.);                        // bring bar 1\n    T(2., 4.)  B( 0., f(2.,h,0.)  );                        // bring bar 2\n    T(3., 4.)  B( f(3.,l,.3), 0.  );                        // bring bar 3\n    T(4., 9.)  L( .0, f(4.,.0,.15)),                        // morph 2+3 to V\n               L( .3, f(4.,.3,.15));\n    T(5., 6.)  B( f(5.,-.3,-l), 0.);                        // out bar 1\n    T(6., 9.)  B( f(6.,l,.6), 0.  );                        // bring bar 6\n    T(7., 9.)  B( .9, f(7.,-h,0.) );                        // bring bar 7\n    T(8., 9.)  B( f(8.,l,1.2), 0. );                        // bring bar 8\n    T(9.,10.)  L( .0, f(9.,.15,.0));                        //   morph V to 1\n    T(9.,11.)  L( .3, f(9.,.15,.6)),                        //   morph VI to X\n               L( .6, f(9.,.6, .3)),\n               B( .9, f(9.,0.,h)  ),                        //   out bar 7\n               B( f(9.,1.2,l), 0. );                        //   out bar 8\n    T(10.,11.) B( f(10.,0.,-l), 0.);                        // out bar 1\nif(iTime>2.)\n      T(1.,2.) L( f(1.,.3,l),   f(1.,.6,l)   ),             // out the X\n               L( f(1.,.6,l+.2),f(1.,.3,l+.2));\n        \n}\n// --------[ Original ShaderToy ends here ]---------- //\n\nvoid main(void)\n{float finalDesiredPointSize = 3.;\nfloat maxFinalSquareSideSize = floor(sqrt(vertexCount));\nfloat finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\nfloat maxVerticesPerLine = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\nvertexResolution = vec2(maxVerticesPerLine, floor(finalMaxVertexCount/maxVerticesPerLine));\nfloat finalVertexCount = vertexResolution.x*vertexResolution.y;\nfloat finalVertexId = mod(vertexId,finalVertexCount);\nfloat x = mod(finalVertexId, vertexResolution.x);\nfloat y = floor(finalVertexId / vertexResolution.x);\nsimFragCoord = vec4(x,y,1.,1.);//simfragCoord will replace the gl_FragCoord of fragment shader\nfloat u_i = (x /vertexResolution.x);\nfloat v_i = (y /vertexResolution.y);\nfloat sizeFactor = finalDesiredPointSize*vertexResolution.x/resolution.x;\nfloat ux = sizeFactor*(u_i - 0.5);\nfloat vy = sizeFactor*(v_i - 0.5);\ngl_PointSize = finalDesiredPointSize;\ngl_Position = vec4(ux, vy, 0., 1.);\nsurfacePosition = vec2(ux,vy);\n\n    iTime = time;\n    iResolution = vec3(vertexResolution, 0.0);\n\n    mainImage(v_color, simFragCoord.xy);\n    v_color.a = 1.0;\n}"
  },
  "screenshotURL": "data/images/images-gakyagezmo7p4g6wv-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "4"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "qMQ2pCtZKwF6sGAqj"
}