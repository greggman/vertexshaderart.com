{
  "_id": "8LsJgzRWQxy2bJWwJ",
  "owner": {
    "_id": "Pexi77zfde4iNKmrT",
    "createdAt": {
      "$date": {
        "$numberLong": "1493741221077"
      }
    },
    "profile": {
      "name": "Kolargon Generative",
      "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg"
    },
    "username": "kolargon"
  },
  "createdAt": {
    "$date": {
      "$numberLong": "1522796826563"
    }
  },
  "modifiedAt": {
    "$date": {
      "$numberLong": "1522797813968"
    }
  },
  "origId": "PERaHxC8pvwoBGHMo",
  "name": "fragment conversion",
  "notes": "http://glslsandbox.com/e#46080.0",
  "rank": {
    "$numberDouble": "1.109848982083773"
  },
  "private": true,
  "unlisted": false,
  "username": "kolargon",
  "avatarUrl": "https://lh3.googleusercontent.com/-tiKYx1U71-Q/AAAAAAAAAAI/AAAAAAAAAGg/b-eEUsFpspc/photo.jpg",
  "settings": {
    "num": 100000,
    "mode": "POINTS",
    "sound": "https://soundcloud.com/user-158087960/studiomix-douzirec-06-2007-flac",
    "lineSize": "NATIVE",
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "shader": "/*\n#define PI radians(180.)\n\n//functions for the shader\nfloat random(in vec2 st) {\n\treturn fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.545123);\n} \n\nfloat noise(vec2 st) {\n\tvec2 i = floor(st);\n\tvec2 f = fract(st);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(random(i + vec2(0.0, 0.0)), \n\t\t\t     random(i + vec2(1.0, 0.0)), u.x), \n\t\t   mix(random(i + vec2(0.0, 1.0)), \n\t\t\t     random(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\nfloat lines(in vec2 pos, float b) {\n\tfloat scale = 10.0;\n\tpos *= scale;\n\treturn smoothstep(0.0, 0.5 + b * 0.5, abs(sin(pos.x * 3.1415) + b * 2.0) * .5);\n}\n\nmat2 rotate2d(float angle) {\n\treturn mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\n//end functions for the shader\n\n\n//Functions used for camera\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n  vec3 zAxis = normalize(eye - target);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    eye, 1);\n}\n\nmat4 cameraLookAt(vec3 eye, vec3 target, vec3 up) {\n  #if 1\n  return inverse(lookAt(eye, target, up));\n  #else\n  vec3 zAxis = normalize(target - eye);\n  vec3 xAxis = normalize(cross(up, zAxis));\n  vec3 yAxis = cross(zAxis, xAxis);\n\n  return mat4(\n    xAxis, 0,\n    yAxis, 0,\n    zAxis, 0,\n    -dot(xAxis, eye), -dot(yAxis, eye), -dot(zAxis, eye), 1);  \n  #endif\n  \n}\n\nmat4 persp(float fov, float aspect, float zNear, float zFar) {\n  float f = tan(PI * 0.5 - 0.5 * fov);\n  float rangeInv = 1.0 / (zNear - zFar);\n\n  return mat4(\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (zNear + zFar) * rangeInv, -1,\n    0, 0, zNear * zFar * rangeInv * 2., 0);\n}\n\n\nvec2 rotate(vec2 f, float deg) \n{\n\treturn vec2(f.x * cos(deg) - f.y * sin(deg), f.x * sin(deg) + f.y * cos(deg));\n}\n\n//End functions used for camera\n\nfloat pattern(vec2 p){p.x -= .866; p.x -= p.y * .005; p = mod(p, 1.); return p.x + p.y < 1.0 ? 0.3: 1.;}\n\n\nvec2 getFragCoord(in float _finalDesiredPointSize, out float _finalVertexCount, out float _finalVertexId, out vec2 _finalResolution )\n{\n  float maxFinalSquareSideSize = floor(sqrt(vertexCount));\n  _finalVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\n  _finalResolution.x = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\n  _finalResolution.y = floor(_finalVertexCount / _finalResolution.x);\n  _finalVertexId = mod(vertexId,_finalVertexCount);\n  return vec2(0.,0.);\n}\n\nvoid main ()\n{\n   float finalDesiredPointSize = 3.;\n   float maxFinalSquareSideSize = floor(sqrt(vertexCount));\n   float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\n  \n  vec2 vertexResolution = vec2(0.);\n  \n  //first the number of elements in a line\n  vertexResolution.x = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\n  \n  //finalDesiredPointSize = resolution.x/across;\n  //we want to keep the resolution >> across/down must be the same as resolution.x/resolution.y\n\n  //then the number of possible lines with the given vertexCount\n  vertexResolution.y = floor(finalMaxVertexCount / vertexResolution.x);\n  \n  //we can now calculate the final number of elements\n  float finalVertexCount = vertexResolution.x*vertexResolution.y;\n  \n  //and the consequent finalVertexId\n  float finalVertexId = mod(vertexId,finalVertexCount);\n  \n  //Calculate the position of the elements based on their finalVertexId\n  float x = mod(finalVertexId, vertexResolution.x);\n  float y = floor(finalVertexId / vertexResolution.x);\n  \n  //cordinates in 0..1 referential\n  float u = (x /vertexResolution.x);\n  float v = (y /vertexResolution.y);\n  \n  vec2 vfragCoord = vec2(u,v);\n  \n  float u0 = (u * (vertexResolution.x*finalDesiredPointSize/resolution.x));\n  float v0 = (v * (vertexResolution.x*finalDesiredPointSize/resolution.x ));\n  \n  //cordinates in -1...1 referential\n  float ux =  u0 - 0.5*(vertexResolution.x*finalDesiredPointSize/resolution.x);\n  float vy =  v0 - 0.5*(vertexResolution.x*finalDesiredPointSize/resolution.x);;\n  \n  //optional for symetry\n  //if(u>0.5)\n  //u = 1.-u;\n\t\n    \n  float udnd = u;\n  if(u>0.5)\n    udnd =  1.-u;\n  \n  float snd = texture2D(sound, vec2(0.,  udnd)).a;\n  \n    //apply fragment logic\n\n\tvec2 position = vec2(x,y);\n  \n\tvec2 uv\t\t\t= vec2(u,v);//position.xy/resolution.xy;\n \n  vec2 st = uv;\n\tst.x *= resolution.x / resolution.y;\n\n\tvec2 pos = st.yx* vec2(10.0, 3.0);\n\t\n\tfloat pattern = pos.x;\n\t\n\tpos += rotate2d((noise(pos + time) * 2.0 - 1.0) * 3.1415) * vec2(noise(pos - time * 0.2) * 2.0 - 1.0, noise(pos + vec2(100.0) - vec2(time) * 0.2) * 2.0 - 1.0);\n\t\n\tpattern = lines(pos, 0.5);\n\t\n\t\n\n  //camera\n  float r  = 2.5;\n  float tm = time * 0.5;\n  float tm2 = time * 0.13;\n  mat4 mat = persp(radians(60.0), resolution.x / resolution.y, 0.1, 10.0);\n  vec3 eye = vec3(cos(tm) * r, sin(tm * 0.93) * r, sin(tm) * r);\n  vec3 target = vec3(0);\n  vec3 up = vec3(0., sin(tm2), cos(tm2));\n  \n  \n  mat *= cameraLookAt(eye, target, up);\n  \n\n  \n  gl_PointSize = finalDesiredPointSize;\n\n  v_color = vec4(vec3(pattern), 1.0);\n  \n  vec4 finalPos = vec4(ux, vy, 0., 1.);\n  \n  gl_Position = finalPos;\n}\n*/\n\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n//Step 1 >> comment uniforms\n\n//uniform float time;\n//uniform vec2 mouse;\n//uniform vec2 resolution;\n\nfloat zoom = 0.1;\nfloat pi = 3.14159265359;\n\nvoid main( void ) {\n\n  //Step 2 >> replace  gl_FragCoord\n  float finalDesiredPointSize = 5.;\n   float maxFinalSquareSideSize = floor(sqrt(vertexCount));\n   float finalMaxVertexCount = maxFinalSquareSideSize*maxFinalSquareSideSize;\n  \n  vec2 vertexResolution = vec2(0.);\n  \n  //first the number of elements in a line\n  vertexResolution.x = floor(maxFinalSquareSideSize  *resolution.x/resolution.y);\n  \n  //finalDesiredPointSize = resolution.x/across;\n  //we want to keep the resolution >> across/down must be the same as resolution.x/resolution.y\n\n  //then the number of possible lines with the given vertexCount\n  vertexResolution.y = floor(finalMaxVertexCount / vertexResolution.x);\n  \n  //we can now calculate the final number of elements\n  float finalVertexCount = vertexResolution.x*vertexResolution.y;\n  \n  //and the consequent finalVertexId\n  float finalVertexId = mod(vertexId,finalVertexCount);\n  \n  //Calculate the position of the elements based on their finalVertexId\n  float x = mod(finalVertexId, vertexResolution.x);\n  float y = floor(finalVertexId / vertexResolution.x);\n  \n  //relative coordinate of the vertex (cordinates in 0..1 referential)\n  float u = (x /vertexResolution.x);\n  float v = (y /vertexResolution.y);\n  \n  vec2 vfragCoord = vec2(u,v);\n  \n  float u0 = (u * (vertexResolution.x*finalDesiredPointSize/resolution.x));\n  float v0 = (v * (vertexResolution.x*finalDesiredPointSize/resolution.x ));\n  \n  //calculate vertex coordinates\n  //float ux =  u0 - 0.5*u0/u;//(vertexResolution.x*finalDesiredPointSize/resolution.x);\n  float vy =  v0 - 0.5*v0/v;//(vertexResolution.x*finalDesiredPointSize/resolution.x);;\n  \n  float ux = 2.* u*(vertexResolution.x*finalDesiredPointSize/resolution.x) - 1.;\n  vy = v*(vertexResolution.x*finalDesiredPointSize/resolution.x) - 1.;\n  \n\t//vec2 position = ( gl_FragCoord.xy / resolution.xy ) / 4.0;\n    //vec2 position = ( vfragCoord.xy / vertexResolution.xy ) / 4.0;\n  \n    vec2 position = vec2(ux,vy);\n  \n\t//position = resolution.xy / min( resolution.x, resolution.y ) * ( position + vec2( -0.125, -0.125 ) ) / zoom;\n    //position = vertexResolution.xy / min( vertexResolution.x, vertexResolution.y ) * ( position + vec2( -0.125, -0.125 ) ) / zoom;\n\t\n    float r = 0.0;\n\tfloat g = 0.0;\n\tfloat b = 0.0;\n\t\n\t//CIRCLE\n\tfloat theta = floor( sin( atan( position.y / position.x ) * 20.0 + 120.0*10.*abs(cos(time*4.)) / sqrt( pow( position.x, 2.0 ) + pow( position.y, 2.0 ) ) + time * 3.0 ) + 1.0 ) ;\n\tr = theta;\n\tg = theta;\n\tb = theta;\n\t\n\t//FADE\n\tfloat alpha = sqrt( pow( position.x, 2.0 ) + pow( position.y, 2.0 ) ) / 3.0 - .01;\n\tr = 0.0 + (r - 0.0) * alpha;\n\tg = 0.0 + (g - 0.0) * alpha;\n\tb = 0.0 + (b - 0.0) * alpha;\n\n    //Step 3 >> set points colors replacing gl_FragColor\n  \n\tv_color  = vec4( vec3( r, g, b ), 1.0 );\n  \n  \n  //set pointsize\n  gl_PointSize = finalDesiredPointSize;\n  \n  //Step 6 >> set the point positions\n  //vec4 finalPos =  vec4(ux, vy, 0., 1.);\n  vec4 finalPos =  vec4(ux, vy, 0., 1.);\n  gl_Position = finalPos;\n\n}"
  },
  "screenshotURL": "data/images/images-7r1xe2d9vxqemps47-thumbnail.jpg",
  "hasSound": true,
  "views": {
    "$numberInt": "3"
  },
  "likes": {
    "$numberInt": "0"
  },
  "revisionId": "HTTssHqGRbxoqdzZe"
}